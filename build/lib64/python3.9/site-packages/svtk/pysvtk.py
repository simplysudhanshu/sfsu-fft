# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pysvtk
else:
    import _pysvtk

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SVTK_MAX_THREADS = _pysvtk.SVTK_MAX_THREADS
SVTK_SMP_BACKEND = _pysvtk.SVTK_SMP_BACKEND
SVTK_CXX_COMPILER = _pysvtk.SVTK_CXX_COMPILER
SVTK_MAXPATH = _pysvtk.SVTK_MAXPATH
KWIML_INT_private_VERSION = _pysvtk.KWIML_INT_private_VERSION
KWIML_INT_detail_DEFINED_VERSION_1 = _pysvtk.KWIML_INT_detail_DEFINED_VERSION_1
KWIML_INT_VERSION = _pysvtk.KWIML_INT_VERSION
KWIML_INT_HAVE_INTTYPES_H = _pysvtk.KWIML_INT_HAVE_INTTYPES_H
KWIML_INT_HAVE_INT8_T = _pysvtk.KWIML_INT_HAVE_INT8_T
KWIML_INT_HAVE_UINT8_T = _pysvtk.KWIML_INT_HAVE_UINT8_T
KWIML_INT_HAVE_INT16_T = _pysvtk.KWIML_INT_HAVE_INT16_T
KWIML_INT_HAVE_UINT16_T = _pysvtk.KWIML_INT_HAVE_UINT16_T
KWIML_INT_HAVE_INT32_T = _pysvtk.KWIML_INT_HAVE_INT32_T
KWIML_INT_HAVE_UINT32_T = _pysvtk.KWIML_INT_HAVE_UINT32_T
KWIML_INT_HAVE_INT64_T = _pysvtk.KWIML_INT_HAVE_INT64_T
KWIML_INT_HAVE_UINT64_T = _pysvtk.KWIML_INT_HAVE_UINT64_T
KWIML_INT_HAVE_INTPTR_T = _pysvtk.KWIML_INT_HAVE_INTPTR_T
KWIML_INT_HAVE_UINTPTR_T = _pysvtk.KWIML_INT_HAVE_UINTPTR_T
KWIML_INT_PRId8 = _pysvtk.KWIML_INT_PRId8
KWIML_INT_SCNd8 = _pysvtk.KWIML_INT_SCNd8
KWIML_INT_PRIi8 = _pysvtk.KWIML_INT_PRIi8
KWIML_INT_SCNi8 = _pysvtk.KWIML_INT_SCNi8
KWIML_INT_PRIo8 = _pysvtk.KWIML_INT_PRIo8
KWIML_INT_SCNo8 = _pysvtk.KWIML_INT_SCNo8
KWIML_INT_PRIu8 = _pysvtk.KWIML_INT_PRIu8
KWIML_INT_SCNu8 = _pysvtk.KWIML_INT_SCNu8
KWIML_INT_PRIx8 = _pysvtk.KWIML_INT_PRIx8
KWIML_INT_SCNx8 = _pysvtk.KWIML_INT_SCNx8
KWIML_INT_PRIX8 = _pysvtk.KWIML_INT_PRIX8
KWIML_INT_PRId16 = _pysvtk.KWIML_INT_PRId16
KWIML_INT_SCNd16 = _pysvtk.KWIML_INT_SCNd16
KWIML_INT_PRIi16 = _pysvtk.KWIML_INT_PRIi16
KWIML_INT_SCNi16 = _pysvtk.KWIML_INT_SCNi16
KWIML_INT_PRIo16 = _pysvtk.KWIML_INT_PRIo16
KWIML_INT_SCNo16 = _pysvtk.KWIML_INT_SCNo16
KWIML_INT_PRIu16 = _pysvtk.KWIML_INT_PRIu16
KWIML_INT_SCNu16 = _pysvtk.KWIML_INT_SCNu16
KWIML_INT_PRIx16 = _pysvtk.KWIML_INT_PRIx16
KWIML_INT_SCNx16 = _pysvtk.KWIML_INT_SCNx16
KWIML_INT_PRIX16 = _pysvtk.KWIML_INT_PRIX16
KWIML_INT_PRId32 = _pysvtk.KWIML_INT_PRId32
KWIML_INT_SCNd32 = _pysvtk.KWIML_INT_SCNd32
KWIML_INT_PRIi32 = _pysvtk.KWIML_INT_PRIi32
KWIML_INT_SCNi32 = _pysvtk.KWIML_INT_SCNi32
KWIML_INT_PRIo32 = _pysvtk.KWIML_INT_PRIo32
KWIML_INT_SCNo32 = _pysvtk.KWIML_INT_SCNo32
KWIML_INT_PRIu32 = _pysvtk.KWIML_INT_PRIu32
KWIML_INT_SCNu32 = _pysvtk.KWIML_INT_SCNu32
KWIML_INT_PRIx32 = _pysvtk.KWIML_INT_PRIx32
KWIML_INT_SCNx32 = _pysvtk.KWIML_INT_SCNx32
KWIML_INT_PRIX32 = _pysvtk.KWIML_INT_PRIX32
KWIML_ABI_private_VERSION = _pysvtk.KWIML_ABI_private_VERSION
KWIML_ABI_detail_DEFINED_VERSION_1 = _pysvtk.KWIML_ABI_detail_DEFINED_VERSION_1
KWIML_ABI_VERSION = _pysvtk.KWIML_ABI_VERSION
KWIML_ABI_SIZEOF_DATA_PTR = _pysvtk.KWIML_ABI_SIZEOF_DATA_PTR
KWIML_ABI_SIZEOF_CODE_PTR = _pysvtk.KWIML_ABI_SIZEOF_CODE_PTR
KWIML_ABI_SIZEOF_CHAR = _pysvtk.KWIML_ABI_SIZEOF_CHAR
KWIML_ABI_CHAR_IS_SIGNED = _pysvtk.KWIML_ABI_CHAR_IS_SIGNED
KWIML_ABI_SIZEOF_SHORT = _pysvtk.KWIML_ABI_SIZEOF_SHORT
KWIML_ABI_SIZEOF_INT = _pysvtk.KWIML_ABI_SIZEOF_INT
KWIML_ABI_SIZEOF_LONG = _pysvtk.KWIML_ABI_SIZEOF_LONG
KWIML_ABI_SIZEOF_LONG_LONG = _pysvtk.KWIML_ABI_SIZEOF_LONG_LONG
KWIML_ABI_SIZEOF___INT64 = _pysvtk.KWIML_ABI_SIZEOF___INT64
KWIML_ABI_SIZEOF_FLOAT = _pysvtk.KWIML_ABI_SIZEOF_FLOAT
KWIML_ABI_SIZEOF_DOUBLE = _pysvtk.KWIML_ABI_SIZEOF_DOUBLE
KWIML_ABI_ENDIAN_ID_BIG = _pysvtk.KWIML_ABI_ENDIAN_ID_BIG
KWIML_ABI_ENDIAN_ID_LITTLE = _pysvtk.KWIML_ABI_ENDIAN_ID_LITTLE
KWIML_ABI_ENDIAN_ID = _pysvtk.KWIML_ABI_ENDIAN_ID
SVTK_SIZEOF_CHAR = _pysvtk.SVTK_SIZEOF_CHAR
SVTK_SIZEOF_SHORT = _pysvtk.SVTK_SIZEOF_SHORT
SVTK_SIZEOF_INT = _pysvtk.SVTK_SIZEOF_INT
SVTK_SIZEOF_LONG = _pysvtk.SVTK_SIZEOF_LONG
SVTK_SIZEOF_LONG_LONG = _pysvtk.SVTK_SIZEOF_LONG_LONG
SVTK_SIZEOF_FLOAT = _pysvtk.SVTK_SIZEOF_FLOAT
SVTK_SIZEOF_DOUBLE = _pysvtk.SVTK_SIZEOF_DOUBLE
SVTK_SIZEOF_VOID_P = _pysvtk.SVTK_SIZEOF_VOID_P
SVTK_TYPE_CHAR_IS_SIGNED = _pysvtk.SVTK_TYPE_CHAR_IS_SIGNED
SVTK_VOID = _pysvtk.SVTK_VOID
SVTK_BIT = _pysvtk.SVTK_BIT
SVTK_CHAR = _pysvtk.SVTK_CHAR
SVTK_SIGNED_CHAR = _pysvtk.SVTK_SIGNED_CHAR
SVTK_UNSIGNED_CHAR = _pysvtk.SVTK_UNSIGNED_CHAR
SVTK_SHORT = _pysvtk.SVTK_SHORT
SVTK_UNSIGNED_SHORT = _pysvtk.SVTK_UNSIGNED_SHORT
SVTK_INT = _pysvtk.SVTK_INT
SVTK_UNSIGNED_INT = _pysvtk.SVTK_UNSIGNED_INT
SVTK_LONG = _pysvtk.SVTK_LONG
SVTK_UNSIGNED_LONG = _pysvtk.SVTK_UNSIGNED_LONG
SVTK_FLOAT = _pysvtk.SVTK_FLOAT
SVTK_DOUBLE = _pysvtk.SVTK_DOUBLE
SVTK_ID_TYPE = _pysvtk.SVTK_ID_TYPE
SVTK_STRING = _pysvtk.SVTK_STRING
SVTK_OPAQUE = _pysvtk.SVTK_OPAQUE
SVTK_LONG_LONG = _pysvtk.SVTK_LONG_LONG
SVTK_UNSIGNED_LONG_LONG = _pysvtk.SVTK_UNSIGNED_LONG_LONG
SVTK___INT64 = _pysvtk.SVTK___INT64
SVTK_UNSIGNED___INT64 = _pysvtk.SVTK_UNSIGNED___INT64
SVTK_VARIANT = _pysvtk.SVTK_VARIANT
SVTK_OBJECT = _pysvtk.SVTK_OBJECT
SVTK_UNICODE_STRING = _pysvtk.SVTK_UNICODE_STRING
SVTK_POLY_DATA = _pysvtk.SVTK_POLY_DATA
SVTK_STRUCTURED_POINTS = _pysvtk.SVTK_STRUCTURED_POINTS
SVTK_STRUCTURED_GRID = _pysvtk.SVTK_STRUCTURED_GRID
SVTK_RECTILINEAR_GRID = _pysvtk.SVTK_RECTILINEAR_GRID
SVTK_UNSTRUCTURED_GRID = _pysvtk.SVTK_UNSTRUCTURED_GRID
SVTK_PIECEWISE_FUNCTION = _pysvtk.SVTK_PIECEWISE_FUNCTION
SVTK_IMAGE_DATA = _pysvtk.SVTK_IMAGE_DATA
SVTK_DATA_OBJECT = _pysvtk.SVTK_DATA_OBJECT
SVTK_DATA_SET = _pysvtk.SVTK_DATA_SET
SVTK_POINT_SET = _pysvtk.SVTK_POINT_SET
SVTK_UNIFORM_GRID = _pysvtk.SVTK_UNIFORM_GRID
SVTK_COMPOSITE_DATA_SET = _pysvtk.SVTK_COMPOSITE_DATA_SET
SVTK_MULTIGROUP_DATA_SET = _pysvtk.SVTK_MULTIGROUP_DATA_SET
SVTK_MULTIBLOCK_DATA_SET = _pysvtk.SVTK_MULTIBLOCK_DATA_SET
SVTK_HIERARCHICAL_DATA_SET = _pysvtk.SVTK_HIERARCHICAL_DATA_SET
SVTK_HIERARCHICAL_BOX_DATA_SET = _pysvtk.SVTK_HIERARCHICAL_BOX_DATA_SET
SVTK_GENERIC_DATA_SET = _pysvtk.SVTK_GENERIC_DATA_SET
SVTK_HYPER_OCTREE = _pysvtk.SVTK_HYPER_OCTREE
SVTK_TEMPORAL_DATA_SET = _pysvtk.SVTK_TEMPORAL_DATA_SET
SVTK_TABLE = _pysvtk.SVTK_TABLE
SVTK_GRAPH = _pysvtk.SVTK_GRAPH
SVTK_TREE = _pysvtk.SVTK_TREE
SVTK_SELECTION = _pysvtk.SVTK_SELECTION
SVTK_DIRECTED_GRAPH = _pysvtk.SVTK_DIRECTED_GRAPH
SVTK_UNDIRECTED_GRAPH = _pysvtk.SVTK_UNDIRECTED_GRAPH
SVTK_MULTIPIECE_DATA_SET = _pysvtk.SVTK_MULTIPIECE_DATA_SET
SVTK_DIRECTED_ACYCLIC_GRAPH = _pysvtk.SVTK_DIRECTED_ACYCLIC_GRAPH
SVTK_ARRAY_DATA = _pysvtk.SVTK_ARRAY_DATA
SVTK_REEB_GRAPH = _pysvtk.SVTK_REEB_GRAPH
SVTK_UNIFORM_GRID_AMR = _pysvtk.SVTK_UNIFORM_GRID_AMR
SVTK_NON_OVERLAPPING_AMR = _pysvtk.SVTK_NON_OVERLAPPING_AMR
SVTK_OVERLAPPING_AMR = _pysvtk.SVTK_OVERLAPPING_AMR
SVTK_HYPER_TREE_GRID = _pysvtk.SVTK_HYPER_TREE_GRID
SVTK_MOLECULE = _pysvtk.SVTK_MOLECULE
SVTK_PISTON_DATA_OBJECT = _pysvtk.SVTK_PISTON_DATA_OBJECT
SVTK_PATH = _pysvtk.SVTK_PATH
SVTK_UNSTRUCTURED_GRID_BASE = _pysvtk.SVTK_UNSTRUCTURED_GRID_BASE
SVTK_PARTITIONED_DATA_SET = _pysvtk.SVTK_PARTITIONED_DATA_SET
SVTK_PARTITIONED_DATA_SET_COLLECTION = _pysvtk.SVTK_PARTITIONED_DATA_SET_COLLECTION
SVTK_UNIFORM_HYPER_TREE_GRID = _pysvtk.SVTK_UNIFORM_HYPER_TREE_GRID
SVTK_EXPLICIT_STRUCTURED_GRID = _pysvtk.SVTK_EXPLICIT_STRUCTURED_GRID
SVTK_BIT_MIN = _pysvtk.SVTK_BIT_MIN
SVTK_BIT_MAX = _pysvtk.SVTK_BIT_MAX
SVTK_TYPE_UINT8 = _pysvtk.SVTK_TYPE_UINT8
SVTK_TYPE_INT8 = _pysvtk.SVTK_TYPE_INT8
SVTK_TYPE_UINT16 = _pysvtk.SVTK_TYPE_UINT16
SVTK_TYPE_INT16 = _pysvtk.SVTK_TYPE_INT16
SVTK_TYPE_UINT32 = _pysvtk.SVTK_TYPE_UINT32
SVTK_TYPE_INT32 = _pysvtk.SVTK_TYPE_INT32
SVTK_TYPE_UINT64 = _pysvtk.SVTK_TYPE_UINT64
SVTK_TYPE_INT64 = _pysvtk.SVTK_TYPE_INT64
SVTK_MTIME_TYPE_IMPL = _pysvtk.SVTK_MTIME_TYPE_IMPL
SVTK_TYPE_FLOAT32 = _pysvtk.SVTK_TYPE_FLOAT32
SVTK_TYPE_FLOAT64 = _pysvtk.SVTK_TYPE_FLOAT64
SVTK_ID_TYPE_IMPL = _pysvtk.SVTK_ID_TYPE_IMPL
SVTK_SIZEOF_ID_TYPE = _pysvtk.SVTK_SIZEOF_ID_TYPE
SVTK_ID_TYPE_PRId = _pysvtk.SVTK_ID_TYPE_PRId

def svtkDataTypesCompare(a, b):
    return _pysvtk.svtkDataTypesCompare(a, b)

def svtkOutputWindowDisplayText(arg1):
    return _pysvtk.svtkOutputWindowDisplayText(arg1)

def svtkOutputWindowDisplayErrorText(*args):
    return _pysvtk.svtkOutputWindowDisplayErrorText(*args)

def svtkOutputWindowDisplayWarningText(*args):
    return _pysvtk.svtkOutputWindowDisplayWarningText(*args)

def svtkOutputWindowDisplayGenericWarningText(*args):
    return _pysvtk.svtkOutputWindowDisplayGenericWarningText(*args)

def svtkOutputWindowDisplayDebugText(*args):
    return _pysvtk.svtkOutputWindowDisplayDebugText(*args)
SVTK_EMPTY_CELL = _pysvtk.SVTK_EMPTY_CELL
SVTK_VERTEX = _pysvtk.SVTK_VERTEX
SVTK_POLY_VERTEX = _pysvtk.SVTK_POLY_VERTEX
SVTK_LINE = _pysvtk.SVTK_LINE
SVTK_POLY_LINE = _pysvtk.SVTK_POLY_LINE
SVTK_TRIANGLE = _pysvtk.SVTK_TRIANGLE
SVTK_TRIANGLE_STRIP = _pysvtk.SVTK_TRIANGLE_STRIP
SVTK_POLYGON = _pysvtk.SVTK_POLYGON
SVTK_PIXEL = _pysvtk.SVTK_PIXEL
SVTK_QUAD = _pysvtk.SVTK_QUAD
SVTK_TETRA = _pysvtk.SVTK_TETRA
SVTK_VOXEL = _pysvtk.SVTK_VOXEL
SVTK_HEXAHEDRON = _pysvtk.SVTK_HEXAHEDRON
SVTK_WEDGE = _pysvtk.SVTK_WEDGE
SVTK_PYRAMID = _pysvtk.SVTK_PYRAMID
SVTK_PENTAGONAL_PRISM = _pysvtk.SVTK_PENTAGONAL_PRISM
SVTK_HEXAGONAL_PRISM = _pysvtk.SVTK_HEXAGONAL_PRISM
SVTK_QUADRATIC_EDGE = _pysvtk.SVTK_QUADRATIC_EDGE
SVTK_QUADRATIC_TRIANGLE = _pysvtk.SVTK_QUADRATIC_TRIANGLE
SVTK_QUADRATIC_QUAD = _pysvtk.SVTK_QUADRATIC_QUAD
SVTK_QUADRATIC_POLYGON = _pysvtk.SVTK_QUADRATIC_POLYGON
SVTK_QUADRATIC_TETRA = _pysvtk.SVTK_QUADRATIC_TETRA
SVTK_QUADRATIC_HEXAHEDRON = _pysvtk.SVTK_QUADRATIC_HEXAHEDRON
SVTK_QUADRATIC_WEDGE = _pysvtk.SVTK_QUADRATIC_WEDGE
SVTK_QUADRATIC_PYRAMID = _pysvtk.SVTK_QUADRATIC_PYRAMID
SVTK_BIQUADRATIC_QUAD = _pysvtk.SVTK_BIQUADRATIC_QUAD
SVTK_TRIQUADRATIC_HEXAHEDRON = _pysvtk.SVTK_TRIQUADRATIC_HEXAHEDRON
SVTK_QUADRATIC_LINEAR_QUAD = _pysvtk.SVTK_QUADRATIC_LINEAR_QUAD
SVTK_QUADRATIC_LINEAR_WEDGE = _pysvtk.SVTK_QUADRATIC_LINEAR_WEDGE
SVTK_BIQUADRATIC_QUADRATIC_WEDGE = _pysvtk.SVTK_BIQUADRATIC_QUADRATIC_WEDGE
SVTK_BIQUADRATIC_QUADRATIC_HEXAHEDRON = _pysvtk.SVTK_BIQUADRATIC_QUADRATIC_HEXAHEDRON
SVTK_BIQUADRATIC_TRIANGLE = _pysvtk.SVTK_BIQUADRATIC_TRIANGLE
SVTK_CUBIC_LINE = _pysvtk.SVTK_CUBIC_LINE
SVTK_CONVEX_POINT_SET = _pysvtk.SVTK_CONVEX_POINT_SET
SVTK_POLYHEDRON = _pysvtk.SVTK_POLYHEDRON
SVTK_PARAMETRIC_CURVE = _pysvtk.SVTK_PARAMETRIC_CURVE
SVTK_PARAMETRIC_SURFACE = _pysvtk.SVTK_PARAMETRIC_SURFACE
SVTK_PARAMETRIC_TRI_SURFACE = _pysvtk.SVTK_PARAMETRIC_TRI_SURFACE
SVTK_PARAMETRIC_QUAD_SURFACE = _pysvtk.SVTK_PARAMETRIC_QUAD_SURFACE
SVTK_PARAMETRIC_TETRA_REGION = _pysvtk.SVTK_PARAMETRIC_TETRA_REGION
SVTK_PARAMETRIC_HEX_REGION = _pysvtk.SVTK_PARAMETRIC_HEX_REGION
SVTK_HIGHER_ORDER_EDGE = _pysvtk.SVTK_HIGHER_ORDER_EDGE
SVTK_HIGHER_ORDER_TRIANGLE = _pysvtk.SVTK_HIGHER_ORDER_TRIANGLE
SVTK_HIGHER_ORDER_QUAD = _pysvtk.SVTK_HIGHER_ORDER_QUAD
SVTK_HIGHER_ORDER_POLYGON = _pysvtk.SVTK_HIGHER_ORDER_POLYGON
SVTK_HIGHER_ORDER_TETRAHEDRON = _pysvtk.SVTK_HIGHER_ORDER_TETRAHEDRON
SVTK_HIGHER_ORDER_WEDGE = _pysvtk.SVTK_HIGHER_ORDER_WEDGE
SVTK_HIGHER_ORDER_PYRAMID = _pysvtk.SVTK_HIGHER_ORDER_PYRAMID
SVTK_HIGHER_ORDER_HEXAHEDRON = _pysvtk.SVTK_HIGHER_ORDER_HEXAHEDRON
SVTK_LAGRANGE_CURVE = _pysvtk.SVTK_LAGRANGE_CURVE
SVTK_LAGRANGE_TRIANGLE = _pysvtk.SVTK_LAGRANGE_TRIANGLE
SVTK_LAGRANGE_QUADRILATERAL = _pysvtk.SVTK_LAGRANGE_QUADRILATERAL
SVTK_LAGRANGE_TETRAHEDRON = _pysvtk.SVTK_LAGRANGE_TETRAHEDRON
SVTK_LAGRANGE_HEXAHEDRON = _pysvtk.SVTK_LAGRANGE_HEXAHEDRON
SVTK_LAGRANGE_WEDGE = _pysvtk.SVTK_LAGRANGE_WEDGE
SVTK_LAGRANGE_PYRAMID = _pysvtk.SVTK_LAGRANGE_PYRAMID
SVTK_BEZIER_CURVE = _pysvtk.SVTK_BEZIER_CURVE
SVTK_BEZIER_TRIANGLE = _pysvtk.SVTK_BEZIER_TRIANGLE
SVTK_BEZIER_QUADRILATERAL = _pysvtk.SVTK_BEZIER_QUADRILATERAL
SVTK_BEZIER_TETRAHEDRON = _pysvtk.SVTK_BEZIER_TETRAHEDRON
SVTK_BEZIER_HEXAHEDRON = _pysvtk.SVTK_BEZIER_HEXAHEDRON
SVTK_BEZIER_WEDGE = _pysvtk.SVTK_BEZIER_WEDGE
SVTK_BEZIER_PYRAMID = _pysvtk.SVTK_BEZIER_PYRAMID
SVTK_NUMBER_OF_CELL_TYPES = _pysvtk.SVTK_NUMBER_OF_CELL_TYPES
class svtkObjectBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetClassName(self):
        return _pysvtk.svtkObjectBase_GetClassName(self)

    @staticmethod
    def IsTypeOf(name):
        return _pysvtk.svtkObjectBase_IsTypeOf(name)

    def IsA(self, name):
        return _pysvtk.svtkObjectBase_IsA(self, name)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(name):
        return _pysvtk.svtkObjectBase_GetNumberOfGenerationsFromBaseType(name)

    def GetNumberOfGenerationsFromBase(self, name):
        return _pysvtk.svtkObjectBase_GetNumberOfGenerationsFromBase(self, name)

    def Delete(self):
        return _pysvtk.svtkObjectBase_Delete(self)

    def FastDelete(self):
        return _pysvtk.svtkObjectBase_FastDelete(self)

    @staticmethod
    def New():
        return _pysvtk.svtkObjectBase_New()

    def InitializeObjectBase(self):
        return _pysvtk.svtkObjectBase_InitializeObjectBase(self)

    def Print(self, os):
        return _pysvtk.svtkObjectBase_Print(self, os)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkObjectBase_PrintSelf(self, os, indent)

    def PrintHeader(self, os, indent):
        return _pysvtk.svtkObjectBase_PrintHeader(self, os, indent)

    def PrintTrailer(self, os, indent):
        return _pysvtk.svtkObjectBase_PrintTrailer(self, os, indent)

    def Register(self, o):
        return _pysvtk.svtkObjectBase_Register(self, o)

    def UnRegister(self, o):
        return _pysvtk.svtkObjectBase_UnRegister(self, o)

    def GetReferenceCount(self):
        return _pysvtk.svtkObjectBase_GetReferenceCount(self)

    def SetReferenceCount(self, arg2):
        return _pysvtk.svtkObjectBase_SetReferenceCount(self, arg2)

    def PrintRevisions(self, arg2):
        return _pysvtk.svtkObjectBase_PrintRevisions(self, arg2)
    __swig_destroy__ = _pysvtk.delete_svtkObjectBase

    def __init__(self):
        _pysvtk.svtkObjectBase_swiginit(self, _pysvtk.new_svtkObjectBase())

    def __str__(self):
        return _pysvtk.svtkObjectBase___str__(self)

# Register svtkObjectBase in _pysvtk:
_pysvtk.svtkObjectBase_swigregister(svtkObjectBase)
class svtkObject(svtkObjectBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkObject_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkObject_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkObject_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkObject_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkObject_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkObject_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkObject_New()

    def DebugOn(self):
        return _pysvtk.svtkObject_DebugOn(self)

    def DebugOff(self):
        return _pysvtk.svtkObject_DebugOff(self)

    def GetDebug(self):
        return _pysvtk.svtkObject_GetDebug(self)

    def SetDebug(self, debugFlag):
        return _pysvtk.svtkObject_SetDebug(self, debugFlag)

    @staticmethod
    def BreakOnError():
        return _pysvtk.svtkObject_BreakOnError()

    def Modified(self):
        return _pysvtk.svtkObject_Modified(self)

    def GetMTime(self):
        return _pysvtk.svtkObject_GetMTime(self)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkObject_PrintSelf(self, os, indent)

    @staticmethod
    def SetGlobalWarningDisplay(val):
        return _pysvtk.svtkObject_SetGlobalWarningDisplay(val)

    @staticmethod
    def GlobalWarningDisplayOn():
        return _pysvtk.svtkObject_GlobalWarningDisplayOn()

    @staticmethod
    def GlobalWarningDisplayOff():
        return _pysvtk.svtkObject_GlobalWarningDisplayOff()

    @staticmethod
    def GetGlobalWarningDisplay():
        return _pysvtk.svtkObject_GetGlobalWarningDisplay()

    def AddObserver(self, *args):
        return _pysvtk.svtkObject_AddObserver(self, *args)

    def GetCommand(self, tag):
        return _pysvtk.svtkObject_GetCommand(self, tag)

    def RemoveObserver(self, *args):
        return _pysvtk.svtkObject_RemoveObserver(self, *args)

    def RemoveObservers(self, *args):
        return _pysvtk.svtkObject_RemoveObservers(self, *args)

    def RemoveAllObservers(self):
        return _pysvtk.svtkObject_RemoveAllObservers(self)

    def HasObserver(self, *args):
        return _pysvtk.svtkObject_HasObserver(self, *args)

    def InvokeEvent(self, *args):
        return _pysvtk.svtkObject_InvokeEvent(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkObject

    def __init__(self):
        _pysvtk.svtkObject_swiginit(self, _pysvtk.new_svtkObject())

    def __str__(self):
        return _pysvtk.svtkObject___str__(self)

# Register svtkObject in _pysvtk:
_pysvtk.svtkObject_swigregister(svtkObject)
class svtkAbstractArray(svtkObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAbstractArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAbstractArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAbstractArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAbstractArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAbstractArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAbstractArray_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkAbstractArray_PrintSelf(self, os, indent)

    def Allocate(self, numValues, ext=1000):
        return _pysvtk.svtkAbstractArray_Allocate(self, numValues, ext)

    def Initialize(self):
        return _pysvtk.svtkAbstractArray_Initialize(self)

    def GetDataType(self):
        return _pysvtk.svtkAbstractArray_GetDataType(self)

    @staticmethod
    def GetDataTypeSize(*args):
        return _pysvtk.svtkAbstractArray_GetDataTypeSize(*args)

    def GetElementComponentSize(self):
        return _pysvtk.svtkAbstractArray_GetElementComponentSize(self)

    def SetNumberOfComponents(self, _arg):
        return _pysvtk.svtkAbstractArray_SetNumberOfComponents(self, _arg)

    def GetNumberOfComponentsMinValue(self):
        return _pysvtk.svtkAbstractArray_GetNumberOfComponentsMinValue(self)

    def GetNumberOfComponentsMaxValue(self):
        return _pysvtk.svtkAbstractArray_GetNumberOfComponentsMaxValue(self)

    def GetNumberOfComponents(self):
        return _pysvtk.svtkAbstractArray_GetNumberOfComponents(self)

    def SetComponentName(self, component, name):
        return _pysvtk.svtkAbstractArray_SetComponentName(self, component, name)

    def GetComponentName(self, component):
        return _pysvtk.svtkAbstractArray_GetComponentName(self, component)

    def HasAComponentName(self):
        return _pysvtk.svtkAbstractArray_HasAComponentName(self)

    def CopyComponentNames(self, da):
        return _pysvtk.svtkAbstractArray_CopyComponentNames(self, da)

    def SetNumberOfTuples(self, numTuples):
        return _pysvtk.svtkAbstractArray_SetNumberOfTuples(self, numTuples)

    def SetNumberOfValues(self, numValues):
        return _pysvtk.svtkAbstractArray_SetNumberOfValues(self, numValues)

    def GetNumberOfTuples(self):
        return _pysvtk.svtkAbstractArray_GetNumberOfTuples(self)

    def GetNumberOfValues(self):
        return _pysvtk.svtkAbstractArray_GetNumberOfValues(self)

    def SetTuple(self, dstTupleIdx, srcTupleIdx, source):
        return _pysvtk.svtkAbstractArray_SetTuple(self, dstTupleIdx, srcTupleIdx, source)

    def InsertTuple(self, dstTupleIdx, srcTupleIdx, source):
        return _pysvtk.svtkAbstractArray_InsertTuple(self, dstTupleIdx, srcTupleIdx, source)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAbstractArray_InsertTuples(self, *args)

    def InsertNextTuple(self, srcTupleIdx, source):
        return _pysvtk.svtkAbstractArray_InsertNextTuple(self, srcTupleIdx, source)

    def GetTuples(self, *args):
        return _pysvtk.svtkAbstractArray_GetTuples(self, *args)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAbstractArray_HasStandardMemoryLayout(self)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAbstractArray_GetVoidPointer(self, valueIdx)

    def DeepCopy(self, da):
        return _pysvtk.svtkAbstractArray_DeepCopy(self, da)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkAbstractArray_InterpolateTuple(self, *args)

    def Squeeze(self):
        return _pysvtk.svtkAbstractArray_Squeeze(self)

    def Resize(self, numTuples):
        return _pysvtk.svtkAbstractArray_Resize(self, numTuples)

    def Reset(self):
        return _pysvtk.svtkAbstractArray_Reset(self)

    def GetSize(self):
        return _pysvtk.svtkAbstractArray_GetSize(self)

    def GetMaxId(self):
        return _pysvtk.svtkAbstractArray_GetMaxId(self)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAbstractArray_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAbstractArray_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAbstractArray_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAbstractArray_SVTK_DATA_ARRAY_USER_DEFINED

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAbstractArray_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAbstractArray_SetArrayFreeFunction(self, callback)

    def ExportToVoidPointer(self, out_ptr):
        return _pysvtk.svtkAbstractArray_ExportToVoidPointer(self, out_ptr)

    def GetActualMemorySize(self):
        return _pysvtk.svtkAbstractArray_GetActualMemorySize(self)

    def SetName(self, _arg):
        return _pysvtk.svtkAbstractArray_SetName(self, _arg)

    def GetName(self):
        return _pysvtk.svtkAbstractArray_GetName(self)

    def GetDataTypeAsString(self):
        return _pysvtk.svtkAbstractArray_GetDataTypeAsString(self)

    @staticmethod
    def CreateArray(dataType):
        return _pysvtk.svtkAbstractArray_CreateArray(dataType)

    def IsNumeric(self):
        return _pysvtk.svtkAbstractArray_IsNumeric(self)

    def NewIterator(self):
        return _pysvtk.svtkAbstractArray_NewIterator(self)

    def GetDataSize(self):
        return _pysvtk.svtkAbstractArray_GetDataSize(self)

    def LookupValue(self, *args):
        return _pysvtk.svtkAbstractArray_LookupValue(self, *args)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkAbstractArray_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkAbstractArray_InsertVariantValue(self, valueIdx, value)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkAbstractArray_SetVariantValue(self, valueIdx, value)

    def DataChanged(self):
        return _pysvtk.svtkAbstractArray_DataChanged(self)

    def ClearLookup(self):
        return _pysvtk.svtkAbstractArray_ClearLookup(self)

    def GetProminentComponentValues(self, comp, values, uncertainty=1.e-6, minimumProminence=1.e-3):
        return _pysvtk.svtkAbstractArray_GetProminentComponentValues(self, comp, values, uncertainty, minimumProminence)

    def GetInformation(self):
        return _pysvtk.svtkAbstractArray_GetInformation(self)

    def HasInformation(self):
        return _pysvtk.svtkAbstractArray_HasInformation(self)

    def CopyInformation(self, infoFrom, deep=1):
        return _pysvtk.svtkAbstractArray_CopyInformation(self, infoFrom, deep)

    @staticmethod
    def GUI_HIDE():
        return _pysvtk.svtkAbstractArray_GUI_HIDE()

    @staticmethod
    def PER_COMPONENT():
        return _pysvtk.svtkAbstractArray_PER_COMPONENT()

    @staticmethod
    def PER_FINITE_COMPONENT():
        return _pysvtk.svtkAbstractArray_PER_FINITE_COMPONENT()

    def Modified(self):
        return _pysvtk.svtkAbstractArray_Modified(self)

    @staticmethod
    def DISCRETE_VALUES():
        return _pysvtk.svtkAbstractArray_DISCRETE_VALUES()

    @staticmethod
    def DISCRETE_VALUE_SAMPLE_PARAMETERS():
        return _pysvtk.svtkAbstractArray_DISCRETE_VALUE_SAMPLE_PARAMETERS()
    MAX_DISCRETE_VALUES = _pysvtk.svtkAbstractArray_MAX_DISCRETE_VALUES

    def GetMaxDiscreteValues(self):
        return _pysvtk.svtkAbstractArray_GetMaxDiscreteValues(self)

    def SetMaxDiscreteValues(self, _arg):
        return _pysvtk.svtkAbstractArray_SetMaxDiscreteValues(self, _arg)
    AbstractArray = _pysvtk.svtkAbstractArray_AbstractArray
    DataArray = _pysvtk.svtkAbstractArray_DataArray
    AoSDataArrayTemplate = _pysvtk.svtkAbstractArray_AoSDataArrayTemplate
    SoADataArrayTemplate = _pysvtk.svtkAbstractArray_SoADataArrayTemplate
    TypedDataArray = _pysvtk.svtkAbstractArray_TypedDataArray
    MappedDataArray = _pysvtk.svtkAbstractArray_MappedDataArray
    ScaleSoADataArrayTemplate = _pysvtk.svtkAbstractArray_ScaleSoADataArrayTemplate
    DataArrayTemplate = _pysvtk.svtkAbstractArray_DataArrayTemplate

    def GetArrayType(self):
        return _pysvtk.svtkAbstractArray_GetArrayType(self)
    __swig_destroy__ = _pysvtk.delete_svtkAbstractArray

    def __str__(self):
        return _pysvtk.svtkAbstractArray___str__(self)

# Register svtkAbstractArray in _pysvtk:
_pysvtk.svtkAbstractArray_swigregister(svtkAbstractArray)
class svtkDataArray(svtkAbstractArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkDataArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkDataArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkDataArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkDataArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkDataArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkDataArray_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkDataArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkDataArray_FastDownCast(source)

    def IsNumeric(self):
        return _pysvtk.svtkDataArray_IsNumeric(self)

    def GetElementComponentSize(self):
        return _pysvtk.svtkDataArray_GetElementComponentSize(self)

    def InsertTuples(self, *args):
        return _pysvtk.svtkDataArray_InsertTuples(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkDataArray_GetTuples(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkDataArray_InterpolateTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkDataArray_GetTuple(self, *args)

    def GetTuple1(self, tupleIdx):
        return _pysvtk.svtkDataArray_GetTuple1(self, tupleIdx)

    def GetTuple2(self, tupleIdx):
        return _pysvtk.svtkDataArray_GetTuple2(self, tupleIdx)

    def GetTuple3(self, tupleIdx):
        return _pysvtk.svtkDataArray_GetTuple3(self, tupleIdx)

    def GetTuple4(self, tupleIdx):
        return _pysvtk.svtkDataArray_GetTuple4(self, tupleIdx)

    def GetTuple6(self, tupleIdx):
        return _pysvtk.svtkDataArray_GetTuple6(self, tupleIdx)

    def GetTuple9(self, tupleIdx):
        return _pysvtk.svtkDataArray_GetTuple9(self, tupleIdx)

    def SetTuple(self, *args):
        return _pysvtk.svtkDataArray_SetTuple(self, *args)

    def SetTuple1(self, tupleIdx, value):
        return _pysvtk.svtkDataArray_SetTuple1(self, tupleIdx, value)

    def SetTuple2(self, tupleIdx, val0, val1):
        return _pysvtk.svtkDataArray_SetTuple2(self, tupleIdx, val0, val1)

    def SetTuple3(self, tupleIdx, val0, val1, val2):
        return _pysvtk.svtkDataArray_SetTuple3(self, tupleIdx, val0, val1, val2)

    def SetTuple4(self, tupleIdx, val0, val1, val2, val3):
        return _pysvtk.svtkDataArray_SetTuple4(self, tupleIdx, val0, val1, val2, val3)

    def SetTuple6(self, tupleIdx, val0, val1, val2, val3, val4, val5):
        return _pysvtk.svtkDataArray_SetTuple6(self, tupleIdx, val0, val1, val2, val3, val4, val5)

    def SetTuple9(self, tupleIdx, val0, val1, val2, val3, val4, val5, val6, val7, val8):
        return _pysvtk.svtkDataArray_SetTuple9(self, tupleIdx, val0, val1, val2, val3, val4, val5, val6, val7, val8)

    def InsertTuple(self, *args):
        return _pysvtk.svtkDataArray_InsertTuple(self, *args)

    def InsertTuple1(self, tupleIdx, value):
        return _pysvtk.svtkDataArray_InsertTuple1(self, tupleIdx, value)

    def InsertTuple2(self, tupleIdx, val0, val1):
        return _pysvtk.svtkDataArray_InsertTuple2(self, tupleIdx, val0, val1)

    def InsertTuple3(self, tupleIdx, val0, val1, val2):
        return _pysvtk.svtkDataArray_InsertTuple3(self, tupleIdx, val0, val1, val2)

    def InsertTuple4(self, tupleIdx, val0, val1, val2, val3):
        return _pysvtk.svtkDataArray_InsertTuple4(self, tupleIdx, val0, val1, val2, val3)

    def InsertTuple6(self, tupleIdx, val0, val1, val2, val3, val4, val5):
        return _pysvtk.svtkDataArray_InsertTuple6(self, tupleIdx, val0, val1, val2, val3, val4, val5)

    def InsertTuple9(self, tupleIdx, val0, val1, val2, val3, val4, val5, val6, val7, val8):
        return _pysvtk.svtkDataArray_InsertTuple9(self, tupleIdx, val0, val1, val2, val3, val4, val5, val6, val7, val8)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkDataArray_InsertNextTuple(self, *args)

    def InsertNextTuple1(self, value):
        return _pysvtk.svtkDataArray_InsertNextTuple1(self, value)

    def InsertNextTuple2(self, val0, val1):
        return _pysvtk.svtkDataArray_InsertNextTuple2(self, val0, val1)

    def InsertNextTuple3(self, val0, val1, val2):
        return _pysvtk.svtkDataArray_InsertNextTuple3(self, val0, val1, val2)

    def InsertNextTuple4(self, val0, val1, val2, val3):
        return _pysvtk.svtkDataArray_InsertNextTuple4(self, val0, val1, val2, val3)

    def InsertNextTuple6(self, val0, val1, val2, val3, val4, val5):
        return _pysvtk.svtkDataArray_InsertNextTuple6(self, val0, val1, val2, val3, val4, val5)

    def InsertNextTuple9(self, val0, val1, val2, val3, val4, val5, val6, val7, val8):
        return _pysvtk.svtkDataArray_InsertNextTuple9(self, val0, val1, val2, val3, val4, val5, val6, val7, val8)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkDataArray_RemoveTuple(self, tupleIdx)

    def RemoveFirstTuple(self):
        return _pysvtk.svtkDataArray_RemoveFirstTuple(self)

    def RemoveLastTuple(self):
        return _pysvtk.svtkDataArray_RemoveLastTuple(self)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkDataArray_GetComponent(self, tupleIdx, compIdx)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkDataArray_SetComponent(self, tupleIdx, compIdx, value)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkDataArray_InsertComponent(self, tupleIdx, compIdx, value)

    def GetData(self, tupleMin, tupleMax, compMin, compMax, data):
        return _pysvtk.svtkDataArray_GetData(self, tupleMin, tupleMax, compMin, compMax, data)

    def DeepCopy(self, *args):
        return _pysvtk.svtkDataArray_DeepCopy(self, *args)

    def ShallowCopy(self, other):
        return _pysvtk.svtkDataArray_ShallowCopy(self, other)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkDataArray_FillComponent(self, compIdx, value)

    def Fill(self, value):
        return _pysvtk.svtkDataArray_Fill(self, value)

    def CopyComponent(self, dstComponent, src, srcComponent):
        return _pysvtk.svtkDataArray_CopyComponent(self, dstComponent, src, srcComponent)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkDataArray_WriteVoidPointer(self, valueIdx, numValues)

    def GetActualMemorySize(self):
        return _pysvtk.svtkDataArray_GetActualMemorySize(self)

    def CreateDefaultLookupTable(self):
        return _pysvtk.svtkDataArray_CreateDefaultLookupTable(self)

    def SetLookupTable(self, lut):
        return _pysvtk.svtkDataArray_SetLookupTable(self, lut)

    def GetLookupTable(self):
        return _pysvtk.svtkDataArray_GetLookupTable(self)

    def GetRange(self, *args):
        return _pysvtk.svtkDataArray_GetRange(self, *args)

    def GetFiniteRange(self, *args):
        return _pysvtk.svtkDataArray_GetFiniteRange(self, *args)

    @staticmethod
    def GetDataTypeRange(*args):
        return _pysvtk.svtkDataArray_GetDataTypeRange(*args)

    @staticmethod
    def GetDataTypeMin(*args):
        return _pysvtk.svtkDataArray_GetDataTypeMin(*args)

    @staticmethod
    def GetDataTypeMax(*args):
        return _pysvtk.svtkDataArray_GetDataTypeMax(*args)

    def GetMaxNorm(self):
        return _pysvtk.svtkDataArray_GetMaxNorm(self)

    @staticmethod
    def CreateDataArray(dataType):
        return _pysvtk.svtkDataArray_CreateDataArray(dataType)

    @staticmethod
    def COMPONENT_RANGE():
        return _pysvtk.svtkDataArray_COMPONENT_RANGE()

    @staticmethod
    def L2_NORM_RANGE():
        return _pysvtk.svtkDataArray_L2_NORM_RANGE()

    @staticmethod
    def L2_NORM_FINITE_RANGE():
        return _pysvtk.svtkDataArray_L2_NORM_FINITE_RANGE()

    def Modified(self):
        return _pysvtk.svtkDataArray_Modified(self)

    @staticmethod
    def UNITS_LABEL():
        return _pysvtk.svtkDataArray_UNITS_LABEL()

    def CopyInformation(self, infoFrom, deep=1):
        return _pysvtk.svtkDataArray_CopyInformation(self, infoFrom, deep)

    def GetArrayType(self):
        return _pysvtk.svtkDataArray_GetArrayType(self)
    __swig_destroy__ = _pysvtk.delete_svtkDataArray

    def __str__(self):
        return _pysvtk.svtkDataArray___str__(self)

# Register svtkDataArray in _pysvtk:
_pysvtk.svtkDataArray_swigregister(svtkDataArray)
class AllValues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysvtk.AllValues_swiginit(self, _pysvtk.new_AllValues())
    __swig_destroy__ = _pysvtk.delete_AllValues

# Register AllValues in _pysvtk:
_pysvtk.AllValues_swigregister(AllValues)
class FiniteValues(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysvtk.FiniteValues_swiginit(self, _pysvtk.new_FiniteValues())
    __swig_destroy__ = _pysvtk.delete_FiniteValues

# Register FiniteValues in _pysvtk:
_pysvtk.FiniteValues_swigregister(FiniteValues)
class svtkGenericDataArray_char(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_char_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_char_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_char_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_char_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_char_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_char_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_char_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_char_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_char_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_char_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_char_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_char_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_char_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_char_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_char_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_char_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_char_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_char_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_char_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_char_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_char_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_char_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_char_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_char_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_char_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_char_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_char_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_char_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_char_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_char_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_char_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_char_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_char_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_char_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_char_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_char_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_char_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_char_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_char_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_char_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_char_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_char_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_char_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_char_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_char_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_char_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_char_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_char_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_char_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_char_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_char_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_char_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_char_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_char_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_char_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_char_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_char_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_char_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_char

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_char___str__(self)

# Register svtkGenericDataArray_char in _pysvtk:
_pysvtk.svtkGenericDataArray_char_swigregister(svtkGenericDataArray_char)
class svtkGenericDataArray_double(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_double_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_double_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_double_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_double_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_double_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_double_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_double_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_double_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_double_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_double_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_double_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_double_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_double_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_double_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_double_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_double_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_double_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_double_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_double_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_double_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_double_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_double_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_double_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_double_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_double_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_double_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_double_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_double_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_double_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_double_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_double_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_double_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_double_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_double_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_double_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_double_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_double_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_double_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_double_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_double_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_double_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_double_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_double_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_double_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_double_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_double_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_double_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_double_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_double_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_double_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_double_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_double_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_double_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_double_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_double_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_double_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_double_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_double_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_double

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_double___str__(self)

# Register svtkGenericDataArray_double in _pysvtk:
_pysvtk.svtkGenericDataArray_double_swigregister(svtkGenericDataArray_double)
class svtkGenericDataArray_float(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_float_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_float_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_float_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_float_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_float_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_float_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_float_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_float_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_float_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_float_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_float_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_float_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_float_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_float_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_float_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_float_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_float_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_float_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_float_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_float_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_float_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_float_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_float_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_float_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_float_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_float_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_float_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_float_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_float_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_float_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_float_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_float_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_float_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_float_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_float_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_float_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_float_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_float_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_float_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_float_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_float_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_float_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_float_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_float_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_float_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_float_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_float_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_float_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_float_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_float_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_float_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_float_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_float_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_float_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_float_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_float_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_float_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_float_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_float

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_float___str__(self)

# Register svtkGenericDataArray_float in _pysvtk:
_pysvtk.svtkGenericDataArray_float_swigregister(svtkGenericDataArray_float)
class svtkGenericDataArray_int(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_int_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_int_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_int_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_int_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_int_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_int_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_int_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_int_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_int_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_int_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_int_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_int_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_int_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_int_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_int_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_int_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_int_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_int_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_int_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_int_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_int_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_int_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_int_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_int_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_int_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_int_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_int_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_int_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_int_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_int_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_int_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_int_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_int_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_int_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_int_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_int_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_int_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_int_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_int_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_int_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_int_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_int_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_int_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_int_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_int_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_int_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_int_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_int_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_int_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_int_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_int_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_int_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_int_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_int_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_int_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_int_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_int_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_int_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_int

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_int___str__(self)

# Register svtkGenericDataArray_int in _pysvtk:
_pysvtk.svtkGenericDataArray_int_swigregister(svtkGenericDataArray_int)
class svtkGenericDataArray_long(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_long_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_long_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_long_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_long_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_long_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_long_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_long_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_long_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_long_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_long_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_long_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_long_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_long_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_long_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_long_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_long_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_long_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_long_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_long_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_long_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_long_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_long_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_long_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_long_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_long_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_long_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_long_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_long_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_long_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_long_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_long_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_long_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_long_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_long_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_long_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_long_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_long_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_long_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_long_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_long_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_long_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_long_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_long_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_long_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_long_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_long_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_long_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_long_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_long_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_long_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_long_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_long_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_long_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_long_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_long_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_long_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_long_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_long_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_long

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_long___str__(self)

# Register svtkGenericDataArray_long in _pysvtk:
_pysvtk.svtkGenericDataArray_long_swigregister(svtkGenericDataArray_long)
class svtkGenericDataArray_long_long(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_long_long_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_long_long_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_long_long_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_long_long_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_long_long_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_long_long_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_long_long_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_long_long_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_long_long_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_long_long_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_long_long_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_long_long_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_long_long_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_long_long_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_long_long_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_long_long_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_long_long_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_long_long_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_long_long_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_long_long_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_long_long_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_long_long_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_long_long_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_long_long_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_long_long_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_long_long_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_long_long_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_long_long_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_long_long_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_long_long_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_long_long_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_long_long_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_long_long_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_long_long_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_long_long_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_long_long_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_long_long_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_long_long_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_long_long_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_long_long_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_long_long_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_long_long_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_long_long_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_long_long_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_long_long_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_long_long_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_long_long_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_long_long

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_long_long___str__(self)

# Register svtkGenericDataArray_long_long in _pysvtk:
_pysvtk.svtkGenericDataArray_long_long_swigregister(svtkGenericDataArray_long_long)
class svtkGenericDataArray_short(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_short_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_short_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_short_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_short_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_short_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_short_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_short_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_short_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_short_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_short_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_short_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_short_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_short_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_short_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_short_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_short_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_short_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_short_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_short_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_short_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_short_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_short_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_short_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_short_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_short_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_short_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_short_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_short_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_short_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_short_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_short_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_short_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_short_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_short_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_short_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_short_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_short_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_short_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_short_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_short_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_short_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_short_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_short_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_short_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_short_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_short_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_short_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_short_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_short_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_short_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_short_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_short_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_short_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_short_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_short_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_short_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_short_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_short_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_short

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_short___str__(self)

# Register svtkGenericDataArray_short in _pysvtk:
_pysvtk.svtkGenericDataArray_short_swigregister(svtkGenericDataArray_short)
class svtkGenericDataArray_signed_char(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_signed_char_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_signed_char_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_signed_char_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_signed_char_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_signed_char_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_signed_char_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_signed_char_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_signed_char_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_signed_char_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_signed_char_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_signed_char_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_signed_char_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_signed_char_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_signed_char_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_signed_char_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_signed_char_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_signed_char_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_signed_char_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_signed_char_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_signed_char_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_signed_char_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_signed_char_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_signed_char_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_signed_char_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_signed_char_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_signed_char_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_signed_char_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_signed_char_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_signed_char_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_signed_char_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_signed_char_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_signed_char_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_signed_char_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_signed_char_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_signed_char_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_signed_char_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_signed_char_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_signed_char_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_signed_char_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_signed_char_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_signed_char_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_signed_char_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_signed_char_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_signed_char_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_signed_char_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_signed_char_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_signed_char_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_signed_char

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_signed_char___str__(self)

# Register svtkGenericDataArray_signed_char in _pysvtk:
_pysvtk.svtkGenericDataArray_signed_char_swigregister(svtkGenericDataArray_signed_char)
class svtkGenericDataArray_unsigned_char(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_unsigned_char_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_unsigned_char_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_unsigned_char_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_unsigned_char_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_unsigned_char_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_char_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_unsigned_char_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_unsigned_char_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_char_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_char_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_char_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_unsigned_char

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_unsigned_char___str__(self)

# Register svtkGenericDataArray_unsigned_char in _pysvtk:
_pysvtk.svtkGenericDataArray_unsigned_char_swigregister(svtkGenericDataArray_unsigned_char)
class svtkGenericDataArray_unsigned_int(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_unsigned_int_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_unsigned_int_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_unsigned_int_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_unsigned_int_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_unsigned_int_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_int_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_unsigned_int_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_unsigned_int_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_int_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_int_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_int_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_unsigned_int

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_unsigned_int___str__(self)

# Register svtkGenericDataArray_unsigned_int in _pysvtk:
_pysvtk.svtkGenericDataArray_unsigned_int_swigregister(svtkGenericDataArray_unsigned_int)
class svtkGenericDataArray_unsigned_long(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_unsigned_long_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_unsigned_long_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_unsigned_long_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_unsigned_long_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_unsigned_long_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_unsigned_long_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_unsigned_long_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_unsigned_long

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long___str__(self)

# Register svtkGenericDataArray_unsigned_long in _pysvtk:
_pysvtk.svtkGenericDataArray_unsigned_long_swigregister(svtkGenericDataArray_unsigned_long)
class svtkGenericDataArray_unsigned_long_long(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_unsigned_long_long_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_unsigned_long_long

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_unsigned_long_long___str__(self)

# Register svtkGenericDataArray_unsigned_long_long in _pysvtk:
_pysvtk.svtkGenericDataArray_unsigned_long_long_swigregister(svtkGenericDataArray_unsigned_long_long)
class svtkGenericDataArray_unsigned_short(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkGenericDataArray_unsigned_short_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkGenericDataArray_unsigned_short_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_TYPE = _pysvtk.svtkGenericDataArray_unsigned_short_SVTK_DATA_TYPE

    def GetValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetTypedComponent(self, tupleIdx, compIdx)

    def SetTypedComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SetTypedComponent(self, tupleIdx, compIdx, value)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetVoidPointer(self, valueIdx)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetPointer(self, valueIdx)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SetArrayFreeFunction(self, callback)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_unsigned_short_WriteVoidPointer(self, valueIdx, numValues)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkGenericDataArray_unsigned_short_WritePointer(self, valueIdx, numValues)

    def RemoveTuple(self, tupleIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_short_RemoveTuple(self, tupleIdx)

    def InsertNextValue(self, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InsertNextValue(self, value)

    def InsertValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InsertValue(self, valueIdx, value)

    def InsertTypedTuple(self, tupleIdx, t):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InsertTypedTuple(self, tupleIdx, t)

    def InsertNextTypedTuple(self, t):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InsertNextTypedTuple(self, t)

    def InsertTypedComponent(self, tupleIdx, compIdx, val):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InsertTypedComponent(self, tupleIdx, compIdx, val)

    def GetValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetValueRange(self, *args)

    def GetFiniteValueRange(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetFiniteValueRange(self, *args)

    def Capacity(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short_Capacity(self)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_FillValue(self, value)

    def GetDataType(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetDataTypeSize(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short_HasStandardMemoryLayout(self)

    def Allocate(self, size, ext=1000):
        return _pysvtk.svtkGenericDataArray_unsigned_short_Allocate(self, size, ext)

    def Resize(self, numTuples):
        return _pysvtk.svtkGenericDataArray_unsigned_short_Resize(self, numTuples)

    def SetNumberOfComponents(self, num):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SetNumberOfComponents(self, num)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SetNumberOfTuples(self, number)

    def Initialize(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short_Initialize(self)

    def Squeeze(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short_Squeeze(self)

    def SetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SetTuple(self, *args)

    def InsertTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InsertTuples(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InsertNextTuple(self, *args)

    def GetTuples(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetTuple(self, *args)

    def InterpolateTuple(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InterpolateTuple(self, *args)

    def SetComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SetComponent(self, tupleIdx, compIdx, value)

    def GetComponent(self, tupleIdx, compIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetComponent(self, tupleIdx, compIdx)

    def SetVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_SetVariantValue(self, valueIdx, value)

    def GetVariantValue(self, valueIdx):
        return _pysvtk.svtkGenericDataArray_unsigned_short_GetVariantValue(self, valueIdx)

    def InsertVariantValue(self, valueIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_InsertVariantValue(self, valueIdx, value)

    def LookupValue(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_LookupValue(self, *args)

    def LookupTypedValue(self, *args):
        return _pysvtk.svtkGenericDataArray_unsigned_short_LookupTypedValue(self, *args)

    def ClearLookup(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short_ClearLookup(self)

    def DataChanged(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short_DataChanged(self)

    def FillComponent(self, compIdx, value):
        return _pysvtk.svtkGenericDataArray_unsigned_short_FillComponent(self, compIdx, value)

    def NewIterator(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short_NewIterator(self)
    __swig_destroy__ = _pysvtk.delete_svtkGenericDataArray_unsigned_short

    def __str__(self):
        return _pysvtk.svtkGenericDataArray_unsigned_short___str__(self)

# Register svtkGenericDataArray_unsigned_short in _pysvtk:
_pysvtk.svtkGenericDataArray_unsigned_short_swigregister(svtkGenericDataArray_unsigned_short)
class svtkAOSDataArrayTemplate_char(svtkGenericDataArray_char):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_char_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_char_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_char_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_char_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_char_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_char_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_char_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_char_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_char_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_char_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_char_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_char_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_char_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_char_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_char_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_char_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_char_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_char_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_char_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_char_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_char_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_char_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_char_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_char_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_char_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_char_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_char_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_char_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_char_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_char_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_char_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_char_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_char_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_char_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_char_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_char_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_char_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_char_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_char_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_char_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_char_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_char

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_char___str__(self)

# Register svtkAOSDataArrayTemplate_char in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_char_swigregister(svtkAOSDataArrayTemplate_char)
class svtkAOSDataArrayTemplate_double(svtkGenericDataArray_double):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_double_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_double_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_double_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_double_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_double_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_double_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_double_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_double_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_double_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_double_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_double_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_double_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_double_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_double_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_double_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_double_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_double_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_double_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_double_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_double_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_double_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_double_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_double_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_double_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_double_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_double_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_double_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_double_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_double_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_double_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_double_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_double_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_double_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_double_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_double_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_double_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_double_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_double_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_double_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_double_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_double_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_double

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_double___str__(self)

# Register svtkAOSDataArrayTemplate_double in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_double_swigregister(svtkAOSDataArrayTemplate_double)
class svtkAOSDataArrayTemplate_float(svtkGenericDataArray_float):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_float_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_float_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_float_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_float_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_float_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_float_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_float_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_float_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_float_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_float_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_float_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_float_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_float_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_float_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_float_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_float_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_float_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_float_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_float_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_float_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_float_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_float_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_float_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_float_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_float_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_float_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_float_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_float_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_float_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_float_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_float_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_float_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_float_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_float_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_float_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_float_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_float_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_float_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_float_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_float_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_float_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_float

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_float___str__(self)

# Register svtkAOSDataArrayTemplate_float in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_float_swigregister(svtkAOSDataArrayTemplate_float)
class svtkAOSDataArrayTemplate_int(svtkGenericDataArray_int):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_int_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_int_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_int_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_int_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_int_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_int_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_int_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_int_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_int_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_int_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_int_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_int_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_int_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_int_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_int_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_int_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_int_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_int_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_int_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_int_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_int_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_int_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_int_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_int_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_int_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_int_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_int_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_int_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_int_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_int_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_int_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_int_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_int_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_int_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_int_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_int_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_int_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_int_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_int_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_int_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_int_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_int

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_int___str__(self)

# Register svtkAOSDataArrayTemplate_int in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_int_swigregister(svtkAOSDataArrayTemplate_int)
class svtkAOSDataArrayTemplate_long(svtkGenericDataArray_long):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_long_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_long_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_long_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_long_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_long_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_long_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_long_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_long_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_long_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_long_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_long_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_long_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_long_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_long_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_long_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_long_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_long_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_long_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_long_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_long_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_long_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_long_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_long

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long___str__(self)

# Register svtkAOSDataArrayTemplate_long in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_long_swigregister(svtkAOSDataArrayTemplate_long)
class svtkAOSDataArrayTemplate_long_long(svtkGenericDataArray_long_long):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_long_long_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_long_long_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_long_long_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_long_long_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_long_long

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_long_long___str__(self)

# Register svtkAOSDataArrayTemplate_long_long in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_long_long_swigregister(svtkAOSDataArrayTemplate_long_long)
class svtkAOSDataArrayTemplate_short(svtkGenericDataArray_short):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_short_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_short_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_short_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_short_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_short_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_short_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_short_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_short_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_short_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_short_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_short_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_short_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_short_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_short_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_short_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_short_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_short_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_short_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_short_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_short_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_short_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_short_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_short_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_short_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_short_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_short_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_short_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_short_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_short_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_short_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_short_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_short_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_short_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_short_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_short_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_short_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_short_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_short_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_short_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_short_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_short_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_short

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_short___str__(self)

# Register svtkAOSDataArrayTemplate_short in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_short_swigregister(svtkAOSDataArrayTemplate_short)
class svtkAOSDataArrayTemplate_signed_char(svtkGenericDataArray_signed_char):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_signed_char_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_signed_char_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_signed_char_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_signed_char_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_signed_char

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_signed_char___str__(self)

# Register svtkAOSDataArrayTemplate_signed_char in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_signed_char_swigregister(svtkAOSDataArrayTemplate_signed_char)
class svtkAOSDataArrayTemplate_unsigned_char(svtkGenericDataArray_unsigned_char):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_unsigned_char

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_char___str__(self)

# Register svtkAOSDataArrayTemplate_unsigned_char in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_unsigned_char_swigregister(svtkAOSDataArrayTemplate_unsigned_char)
class svtkAOSDataArrayTemplate_unsigned_int(svtkGenericDataArray_unsigned_int):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_unsigned_int

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_int___str__(self)

# Register svtkAOSDataArrayTemplate_unsigned_int in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_unsigned_int_swigregister(svtkAOSDataArrayTemplate_unsigned_int)
class svtkAOSDataArrayTemplate_unsigned_long(svtkGenericDataArray_unsigned_long):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_unsigned_long

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long___str__(self)

# Register svtkAOSDataArrayTemplate_unsigned_long in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_unsigned_long_swigregister(svtkAOSDataArrayTemplate_unsigned_long)
class svtkAOSDataArrayTemplate_unsigned_long_long(svtkGenericDataArray_unsigned_long_long):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_unsigned_long_long

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long___str__(self)

# Register svtkAOSDataArrayTemplate_unsigned_long_long in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_unsigned_long_long_swigregister(svtkAOSDataArrayTemplate_unsigned_long_long)
class svtkAOSDataArrayTemplate_unsigned_short(svtkGenericDataArray_unsigned_short):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_GetNumberOfGenerationsFromBase(self, type)
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_New()

    def GetValue(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_GetValue(self, valueIdx)

    def SetValue(self, valueIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SetValue(self, valueIdx, value)

    def GetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_GetTypedTuple(self, tupleIdx, tuple)

    def SetTypedTuple(self, tupleIdx, tuple):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SetTypedTuple(self, tupleIdx, tuple)

    def GetTypedComponent(self, tupleIdx, comp):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_GetTypedComponent(self, tupleIdx, comp)

    def SetTypedComponent(self, tupleIdx, comp, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SetTypedComponent(self, tupleIdx, comp, value)

    def FillTypedComponent(self, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_FillTypedComponent(self, compIdx, value)

    def FillValue(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_FillValue(self, value)

    def Fill(self, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_Fill(self, value)

    def WritePointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_WritePointer(self, valueIdx, numValues)

    def WriteVoidPointer(self, valueIdx, numValues):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_WriteVoidPointer(self, valueIdx, numValues)

    def GetPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_GetPointer(self, valueIdx)

    def GetVoidPointer(self, valueIdx):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_GetVoidPointer(self, valueIdx)

    def SetArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SetArrayFreeFunction(self, callback)

    def SetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_InsertTuple(self, *args)

    def InsertComponent(self, tupleIdx, compIdx, value):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_InsertComponent(self, tupleIdx, compIdx, value)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_InsertNextTuple(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_GetTuple(self, *args)

    def DataElementChanged(self, arg2):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_DataElementChanged(self, arg2)

    def Begin(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_Begin(self)

    def End(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_End(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_FastDownCast(source)

    def GetArrayType(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_GetArrayType(self)

    def NewIterator(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_NewIterator(self)

    def HasStandardMemoryLayout(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_HasStandardMemoryLayout(self)

    def ShallowCopy(self, other):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_ShallowCopy(self, other)

    def InsertTuples(self, *args):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short_InsertTuples(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkAOSDataArrayTemplate_unsigned_short

    def __str__(self):
        return _pysvtk.svtkAOSDataArrayTemplate_unsigned_short___str__(self)

# Register svtkAOSDataArrayTemplate_unsigned_short in _pysvtk:
_pysvtk.svtkAOSDataArrayTemplate_unsigned_short_swigregister(svtkAOSDataArrayTemplate_unsigned_short)
class svtkBitArray(svtkDataArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SVTK_DATA_ARRAY_FREE = _pysvtk.svtkBitArray_SVTK_DATA_ARRAY_FREE
    SVTK_DATA_ARRAY_DELETE = _pysvtk.svtkBitArray_SVTK_DATA_ARRAY_DELETE
    SVTK_DATA_ARRAY_ALIGNED_FREE = _pysvtk.svtkBitArray_SVTK_DATA_ARRAY_ALIGNED_FREE
    SVTK_DATA_ARRAY_USER_DEFINED = _pysvtk.svtkBitArray_SVTK_DATA_ARRAY_USER_DEFINED

    @staticmethod
    def New():
        return _pysvtk.svtkBitArray_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkBitArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkBitArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkBitArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkBitArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkBitArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkBitArray_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkBitArray_PrintSelf(self, os, indent)

    def Allocate(self, sz, ext=1000):
        return _pysvtk.svtkBitArray_Allocate(self, sz, ext)

    def Initialize(self):
        return _pysvtk.svtkBitArray_Initialize(self)

    def GetDataType(self):
        return _pysvtk.svtkBitArray_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkBitArray_GetDataTypeSize(self)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkBitArray_SetNumberOfTuples(self, number)

    def InsertTuples(self, *args):
        return _pysvtk.svtkBitArray_InsertTuples(self, *args)

    def GetTuple(self, *args):
        return _pysvtk.svtkBitArray_GetTuple(self, *args)

    def SetTuple(self, *args):
        return _pysvtk.svtkBitArray_SetTuple(self, *args)

    def InsertTuple(self, *args):
        return _pysvtk.svtkBitArray_InsertTuple(self, *args)

    def InsertNextTuple(self, *args):
        return _pysvtk.svtkBitArray_InsertNextTuple(self, *args)

    def RemoveTuple(self, id):
        return _pysvtk.svtkBitArray_RemoveTuple(self, id)

    def RemoveFirstTuple(self):
        return _pysvtk.svtkBitArray_RemoveFirstTuple(self)

    def RemoveLastTuple(self):
        return _pysvtk.svtkBitArray_RemoveLastTuple(self)

    def SetComponent(self, i, j, c):
        return _pysvtk.svtkBitArray_SetComponent(self, i, j, c)

    def Squeeze(self):
        return _pysvtk.svtkBitArray_Squeeze(self)

    def Resize(self, numTuples):
        return _pysvtk.svtkBitArray_Resize(self, numTuples)

    def GetValue(self, id):
        return _pysvtk.svtkBitArray_GetValue(self, id)

    def SetValue(self, id, value):
        return _pysvtk.svtkBitArray_SetValue(self, id, value)

    def InsertValue(self, id, i):
        return _pysvtk.svtkBitArray_InsertValue(self, id, i)

    def SetVariantValue(self, idx, value):
        return _pysvtk.svtkBitArray_SetVariantValue(self, idx, value)

    def InsertVariantValue(self, idx, value):
        return _pysvtk.svtkBitArray_InsertVariantValue(self, idx, value)

    def InsertNextValue(self, i):
        return _pysvtk.svtkBitArray_InsertNextValue(self, i)

    def InsertComponent(self, i, j, c):
        return _pysvtk.svtkBitArray_InsertComponent(self, i, j, c)

    def GetPointer(self, id):
        return _pysvtk.svtkBitArray_GetPointer(self, id)

    def WritePointer(self, id, number):
        return _pysvtk.svtkBitArray_WritePointer(self, id, number)

    def WriteVoidPointer(self, id, number):
        return _pysvtk.svtkBitArray_WriteVoidPointer(self, id, number)

    def GetVoidPointer(self, id):
        return _pysvtk.svtkBitArray_GetVoidPointer(self, id)

    def DeepCopy(self, *args):
        return _pysvtk.svtkBitArray_DeepCopy(self, *args)

    def SetArray(self, *args):
        return _pysvtk.svtkBitArray_SetArray(self, *args)

    def SetVoidArray(self, *args):
        return _pysvtk.svtkBitArray_SetVoidArray(self, *args)

    def SetArrayFreeFunction(self, callback):
        return _pysvtk.svtkBitArray_SetArrayFreeFunction(self, callback)

    def NewIterator(self):
        return _pysvtk.svtkBitArray_NewIterator(self)

    def LookupValue(self, *args):
        return _pysvtk.svtkBitArray_LookupValue(self, *args)

    def DataChanged(self):
        return _pysvtk.svtkBitArray_DataChanged(self)

    def ClearLookup(self):
        return _pysvtk.svtkBitArray_ClearLookup(self)
    __swig_destroy__ = _pysvtk.delete_svtkBitArray

    def __init__(self):
        _pysvtk.svtkBitArray_swiginit(self, _pysvtk.new_svtkBitArray())

    def __str__(self):
        return _pysvtk.svtkBitArray___str__(self)

# Register svtkBitArray in _pysvtk:
_pysvtk.svtkBitArray_swigregister(svtkBitArray)
class svtkCharArray(svtkAOSDataArrayTemplate_char):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkCharArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkCharArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkCharArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkCharArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkCharArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkCharArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkCharArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkCharArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkCharArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkCharArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkCharArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkCharArray

    def __init__(self):
        _pysvtk.svtkCharArray_swiginit(self, _pysvtk.new_svtkCharArray())

    def __str__(self):
        return _pysvtk.svtkCharArray___str__(self)

# Register svtkCharArray in _pysvtk:
_pysvtk.svtkCharArray_swigregister(svtkCharArray)
class svtkShortArray(svtkAOSDataArrayTemplate_short):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkShortArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkShortArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkShortArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkShortArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkShortArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkShortArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkShortArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkShortArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkShortArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkShortArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkShortArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkShortArray

    def __init__(self):
        _pysvtk.svtkShortArray_swiginit(self, _pysvtk.new_svtkShortArray())

    def __str__(self):
        return _pysvtk.svtkShortArray___str__(self)

# Register svtkShortArray in _pysvtk:
_pysvtk.svtkShortArray_swigregister(svtkShortArray)
class svtkIntArray(svtkAOSDataArrayTemplate_int):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkIntArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkIntArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkIntArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkIntArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkIntArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkIntArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkIntArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkIntArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkIntArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkIntArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkIntArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkIntArray

    def __init__(self):
        _pysvtk.svtkIntArray_swiginit(self, _pysvtk.new_svtkIntArray())

    def __str__(self):
        return _pysvtk.svtkIntArray___str__(self)

# Register svtkIntArray in _pysvtk:
_pysvtk.svtkIntArray_swigregister(svtkIntArray)
class svtkLongArray(svtkAOSDataArrayTemplate_long):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkLongArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkLongArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkLongArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkLongArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkLongArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkLongArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkLongArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkLongArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkLongArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkLongArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkLongArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkLongArray

    def __init__(self):
        _pysvtk.svtkLongArray_swiginit(self, _pysvtk.new_svtkLongArray())

    def __str__(self):
        return _pysvtk.svtkLongArray___str__(self)

# Register svtkLongArray in _pysvtk:
_pysvtk.svtkLongArray_swigregister(svtkLongArray)
class svtkLongLongArray(svtkAOSDataArrayTemplate_long_long):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkLongLongArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkLongLongArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkLongLongArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkLongLongArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkLongLongArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkLongLongArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkLongLongArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkLongLongArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkLongLongArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkLongLongArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkLongLongArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkLongLongArray

    def __init__(self):
        _pysvtk.svtkLongLongArray_swiginit(self, _pysvtk.new_svtkLongLongArray())

    def __str__(self):
        return _pysvtk.svtkLongLongArray___str__(self)

# Register svtkLongLongArray in _pysvtk:
_pysvtk.svtkLongLongArray_swigregister(svtkLongLongArray)
class svtkSignedCharArray(svtkAOSDataArrayTemplate_signed_char):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkSignedCharArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkSignedCharArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkSignedCharArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkSignedCharArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkSignedCharArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkSignedCharArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkSignedCharArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkSignedCharArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkSignedCharArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkSignedCharArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkSignedCharArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkSignedCharArray

    def __init__(self):
        _pysvtk.svtkSignedCharArray_swiginit(self, _pysvtk.new_svtkSignedCharArray())

    def __str__(self):
        return _pysvtk.svtkSignedCharArray___str__(self)

# Register svtkSignedCharArray in _pysvtk:
_pysvtk.svtkSignedCharArray_swigregister(svtkSignedCharArray)
class svtkUnsignedCharArray(svtkAOSDataArrayTemplate_unsigned_char):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkUnsignedCharArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkUnsignedCharArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkUnsignedCharArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkUnsignedCharArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkUnsignedCharArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkUnsignedCharArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkUnsignedCharArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkUnsignedCharArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkUnsignedCharArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkUnsignedCharArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkUnsignedCharArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkUnsignedCharArray

    def __init__(self):
        _pysvtk.svtkUnsignedCharArray_swiginit(self, _pysvtk.new_svtkUnsignedCharArray())

    def __str__(self):
        return _pysvtk.svtkUnsignedCharArray___str__(self)

# Register svtkUnsignedCharArray in _pysvtk:
_pysvtk.svtkUnsignedCharArray_swigregister(svtkUnsignedCharArray)
class svtkUnsignedShortArray(svtkAOSDataArrayTemplate_unsigned_short):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkUnsignedShortArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkUnsignedShortArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkUnsignedShortArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkUnsignedShortArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkUnsignedShortArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkUnsignedShortArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkUnsignedShortArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkUnsignedShortArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkUnsignedShortArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkUnsignedShortArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkUnsignedShortArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkUnsignedShortArray

    def __init__(self):
        _pysvtk.svtkUnsignedShortArray_swiginit(self, _pysvtk.new_svtkUnsignedShortArray())

    def __str__(self):
        return _pysvtk.svtkUnsignedShortArray___str__(self)

# Register svtkUnsignedShortArray in _pysvtk:
_pysvtk.svtkUnsignedShortArray_swigregister(svtkUnsignedShortArray)
class svtkUnsignedIntArray(svtkAOSDataArrayTemplate_unsigned_int):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkUnsignedIntArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkUnsignedIntArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkUnsignedIntArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkUnsignedIntArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkUnsignedIntArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkUnsignedIntArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkUnsignedIntArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkUnsignedIntArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkUnsignedIntArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkUnsignedIntArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkUnsignedIntArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkUnsignedIntArray

    def __init__(self):
        _pysvtk.svtkUnsignedIntArray_swiginit(self, _pysvtk.new_svtkUnsignedIntArray())

    def __str__(self):
        return _pysvtk.svtkUnsignedIntArray___str__(self)

# Register svtkUnsignedIntArray in _pysvtk:
_pysvtk.svtkUnsignedIntArray_swigregister(svtkUnsignedIntArray)
class svtkUnsignedLongArray(svtkAOSDataArrayTemplate_unsigned_long):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkUnsignedLongArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkUnsignedLongArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkUnsignedLongArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkUnsignedLongArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkUnsignedLongArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkUnsignedLongArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkUnsignedLongArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkUnsignedLongArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkUnsignedLongArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkUnsignedLongArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkUnsignedLongArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkUnsignedLongArray

    def __init__(self):
        _pysvtk.svtkUnsignedLongArray_swiginit(self, _pysvtk.new_svtkUnsignedLongArray())

    def __str__(self):
        return _pysvtk.svtkUnsignedLongArray___str__(self)

# Register svtkUnsignedLongArray in _pysvtk:
_pysvtk.svtkUnsignedLongArray_swigregister(svtkUnsignedLongArray)
class svtkUnsignedLongLongArray(svtkAOSDataArrayTemplate_unsigned_long_long):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkUnsignedLongLongArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkUnsignedLongLongArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkUnsignedLongLongArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkUnsignedLongLongArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkUnsignedLongLongArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkUnsignedLongLongArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkUnsignedLongLongArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkUnsignedLongLongArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkUnsignedLongLongArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkUnsignedLongLongArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkUnsignedLongLongArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkUnsignedLongLongArray

    def __init__(self):
        _pysvtk.svtkUnsignedLongLongArray_swiginit(self, _pysvtk.new_svtkUnsignedLongLongArray())

    def __str__(self):
        return _pysvtk.svtkUnsignedLongLongArray___str__(self)

# Register svtkUnsignedLongLongArray in _pysvtk:
_pysvtk.svtkUnsignedLongLongArray_swigregister(svtkUnsignedLongLongArray)
class svtkIdTypeArray(svtkAOSDataArrayTemplate_long_long):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkIdTypeArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkIdTypeArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkIdTypeArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkIdTypeArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkIdTypeArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkIdTypeArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkIdTypeArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkIdTypeArray_PrintSelf(self, os, indent)

    def GetDataType(self):
        return _pysvtk.svtkIdTypeArray_GetDataType(self)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkIdTypeArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkIdTypeArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkIdTypeArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkIdTypeArray

    def __init__(self):
        _pysvtk.svtkIdTypeArray_swiginit(self, _pysvtk.new_svtkIdTypeArray())

    def __str__(self):
        return _pysvtk.svtkIdTypeArray___str__(self)

# Register svtkIdTypeArray in _pysvtk:
_pysvtk.svtkIdTypeArray_swigregister(svtkIdTypeArray)
class svtkDoubleArray(svtkAOSDataArrayTemplate_double):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkDoubleArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkDoubleArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkDoubleArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkDoubleArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkDoubleArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkDoubleArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkDoubleArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkDoubleArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkDoubleArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkDoubleArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkDoubleArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkDoubleArray

    def __init__(self):
        _pysvtk.svtkDoubleArray_swiginit(self, _pysvtk.new_svtkDoubleArray())

    def __str__(self):
        return _pysvtk.svtkDoubleArray___str__(self)

# Register svtkDoubleArray in _pysvtk:
_pysvtk.svtkDoubleArray_swigregister(svtkDoubleArray)
class svtkFloatArray(svtkAOSDataArrayTemplate_float):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkFloatArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkFloatArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkFloatArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkFloatArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkFloatArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkFloatArray_GetNumberOfGenerationsFromBase(self, type)

    @staticmethod
    def New():
        return _pysvtk.svtkFloatArray_New()

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkFloatArray_PrintSelf(self, os, indent)

    @staticmethod
    def FastDownCast(source):
        return _pysvtk.svtkFloatArray_FastDownCast(source)

    @staticmethod
    def GetDataTypeValueMin():
        return _pysvtk.svtkFloatArray_GetDataTypeValueMin()

    @staticmethod
    def GetDataTypeValueMax():
        return _pysvtk.svtkFloatArray_GetDataTypeValueMax()
    __swig_destroy__ = _pysvtk.delete_svtkFloatArray

    def __init__(self):
        _pysvtk.svtkFloatArray_swiginit(self, _pysvtk.new_svtkFloatArray())

    def __str__(self):
        return _pysvtk.svtkFloatArray___str__(self)

# Register svtkFloatArray in _pysvtk:
_pysvtk.svtkFloatArray_swigregister(svtkFloatArray)
class svtkArrayIterator(svtkObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkArrayIterator_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkArrayIterator_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkArrayIterator_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkArrayIterator_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkArrayIterator_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkArrayIterator_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkArrayIterator_PrintSelf(self, os, indent)

    def Initialize(self, array):
        return _pysvtk.svtkArrayIterator_Initialize(self, array)

    def GetDataType(self):
        return _pysvtk.svtkArrayIterator_GetDataType(self)
    __swig_destroy__ = _pysvtk.delete_svtkArrayIterator

    def __str__(self):
        return _pysvtk.svtkArrayIterator___str__(self)

# Register svtkArrayIterator in _pysvtk:
_pysvtk.svtkArrayIterator_swigregister(svtkArrayIterator)
class svtkBitArrayIterator(svtkArrayIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkBitArrayIterator_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkBitArrayIterator_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkBitArrayIterator_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkBitArrayIterator_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkBitArrayIterator_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkBitArrayIterator_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkBitArrayIterator_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkBitArrayIterator_PrintSelf(self, os, indent)

    def Initialize(self, array):
        return _pysvtk.svtkBitArrayIterator_Initialize(self, array)

    def GetArray(self):
        return _pysvtk.svtkBitArrayIterator_GetArray(self)

    def GetTuple(self, id):
        return _pysvtk.svtkBitArrayIterator_GetTuple(self, id)

    def GetValue(self, id):
        return _pysvtk.svtkBitArrayIterator_GetValue(self, id)

    def GetNumberOfTuples(self):
        return _pysvtk.svtkBitArrayIterator_GetNumberOfTuples(self)

    def GetNumberOfValues(self):
        return _pysvtk.svtkBitArrayIterator_GetNumberOfValues(self)

    def GetNumberOfComponents(self):
        return _pysvtk.svtkBitArrayIterator_GetNumberOfComponents(self)

    def GetDataType(self):
        return _pysvtk.svtkBitArrayIterator_GetDataType(self)

    def GetDataTypeSize(self):
        return _pysvtk.svtkBitArrayIterator_GetDataTypeSize(self)

    def SetValue(self, id, value):
        return _pysvtk.svtkBitArrayIterator_SetValue(self, id, value)
    __swig_destroy__ = _pysvtk.delete_svtkBitArrayIterator

    def __init__(self):
        _pysvtk.svtkBitArrayIterator_swiginit(self, _pysvtk.new_svtkBitArrayIterator())

    def __str__(self):
        return _pysvtk.svtkBitArrayIterator___str__(self)

# Register svtkBitArrayIterator in _pysvtk:
_pysvtk.svtkBitArrayIterator_swigregister(svtkBitArrayIterator)
class svtkCollectionElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pysvtk.svtkCollectionElement_swiginit(self, _pysvtk.new_svtkCollectionElement())
    Item = property(_pysvtk.svtkCollectionElement_Item_get, _pysvtk.svtkCollectionElement_Item_set)
    Next = property(_pysvtk.svtkCollectionElement_Next_get, _pysvtk.svtkCollectionElement_Next_set)
    __swig_destroy__ = _pysvtk.delete_svtkCollectionElement

# Register svtkCollectionElement in _pysvtk:
_pysvtk.svtkCollectionElement_swigregister(svtkCollectionElement)
class svtkCollection(svtkObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkCollection_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkCollection_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkCollection_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkCollection_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkCollection_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkCollection_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkCollection_PrintSelf(self, os, indent)

    @staticmethod
    def New():
        return _pysvtk.svtkCollection_New()

    def AddItem(self, arg2):
        return _pysvtk.svtkCollection_AddItem(self, arg2)

    def InsertItem(self, i, arg3):
        return _pysvtk.svtkCollection_InsertItem(self, i, arg3)

    def ReplaceItem(self, i, arg3):
        return _pysvtk.svtkCollection_ReplaceItem(self, i, arg3)

    def RemoveItem(self, *args):
        return _pysvtk.svtkCollection_RemoveItem(self, *args)

    def RemoveAllItems(self):
        return _pysvtk.svtkCollection_RemoveAllItems(self)

    def IsItemPresent(self, a):
        return _pysvtk.svtkCollection_IsItemPresent(self, a)

    def GetNumberOfItems(self):
        return _pysvtk.svtkCollection_GetNumberOfItems(self)

    def InitTraversal(self, *args):
        return _pysvtk.svtkCollection_InitTraversal(self, *args)

    def GetItemAsObject(self, i):
        return _pysvtk.svtkCollection_GetItemAsObject(self, i)

    def GetNextItemAsObject(self, *args):
        return _pysvtk.svtkCollection_GetNextItemAsObject(self, *args)

    def NewIterator(self):
        return _pysvtk.svtkCollection_NewIterator(self)

    def Register(self, o):
        return _pysvtk.svtkCollection_Register(self, o)

    def UnRegister(self, o):
        return _pysvtk.svtkCollection_UnRegister(self, o)
    __swig_destroy__ = _pysvtk.delete_svtkCollection

    def __init__(self):
        _pysvtk.svtkCollection_swiginit(self, _pysvtk.new_svtkCollection())

    def __str__(self):
        return _pysvtk.svtkCollection___str__(self)

# Register svtkCollection in _pysvtk:
_pysvtk.svtkCollection_swigregister(svtkCollection)
class svtkCollectionIterator(svtkObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkCollectionIterator_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkCollectionIterator_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkCollectionIterator_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkCollectionIterator_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkCollectionIterator_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkCollectionIterator_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkCollectionIterator_PrintSelf(self, os, indent)

    @staticmethod
    def New():
        return _pysvtk.svtkCollectionIterator_New()

    def SetCollection(self, arg2):
        return _pysvtk.svtkCollectionIterator_SetCollection(self, arg2)

    def GetCollection(self):
        return _pysvtk.svtkCollectionIterator_GetCollection(self)

    def InitTraversal(self):
        return _pysvtk.svtkCollectionIterator_InitTraversal(self)

    def GoToFirstItem(self):
        return _pysvtk.svtkCollectionIterator_GoToFirstItem(self)

    def GoToNextItem(self):
        return _pysvtk.svtkCollectionIterator_GoToNextItem(self)

    def IsDoneWithTraversal(self):
        return _pysvtk.svtkCollectionIterator_IsDoneWithTraversal(self)

    def GetCurrentObject(self):
        return _pysvtk.svtkCollectionIterator_GetCurrentObject(self)
    __swig_destroy__ = _pysvtk.delete_svtkCollectionIterator

    def __init__(self):
        _pysvtk.svtkCollectionIterator_swiginit(self, _pysvtk.new_svtkCollectionIterator())

    def __str__(self):
        return _pysvtk.svtkCollectionIterator___str__(self)

# Register svtkCollectionIterator in _pysvtk:
_pysvtk.svtkCollectionIterator_swigregister(svtkCollectionIterator)
class svtkDataArrayCollection(svtkCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkDataArrayCollection_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkDataArrayCollection_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkDataArrayCollection_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkDataArrayCollection_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkDataArrayCollection_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkDataArrayCollection_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkDataArrayCollection_GetNumberOfGenerationsFromBase(self, type)

    def AddItem(self, ds):
        return _pysvtk.svtkDataArrayCollection_AddItem(self, ds)

    def GetNextItem(self):
        return _pysvtk.svtkDataArrayCollection_GetNextItem(self)

    def GetItem(self, i):
        return _pysvtk.svtkDataArrayCollection_GetItem(self, i)

    def GetNextDataArray(self, cookie):
        return _pysvtk.svtkDataArrayCollection_GetNextDataArray(self, cookie)
    __swig_destroy__ = _pysvtk.delete_svtkDataArrayCollection

    def __init__(self):
        _pysvtk.svtkDataArrayCollection_swiginit(self, _pysvtk.new_svtkDataArrayCollection())

    def __str__(self):
        return _pysvtk.svtkDataArrayCollection___str__(self)

# Register svtkDataArrayCollection in _pysvtk:
_pysvtk.svtkDataArrayCollection_swigregister(svtkDataArrayCollection)
class svtkDataArrayCollectionIterator(svtkCollectionIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkDataArrayCollectionIterator_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkDataArrayCollectionIterator_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkDataArrayCollectionIterator_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkDataArrayCollectionIterator_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkDataArrayCollectionIterator_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkDataArrayCollectionIterator_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkDataArrayCollectionIterator_PrintSelf(self, os, indent)

    @staticmethod
    def New():
        return _pysvtk.svtkDataArrayCollectionIterator_New()

    def SetCollection(self, *args):
        return _pysvtk.svtkDataArrayCollectionIterator_SetCollection(self, *args)

    def GetDataArray(self):
        return _pysvtk.svtkDataArrayCollectionIterator_GetDataArray(self)
    __swig_destroy__ = _pysvtk.delete_svtkDataArrayCollectionIterator

    def __init__(self):
        _pysvtk.svtkDataArrayCollectionIterator_swiginit(self, _pysvtk.new_svtkDataArrayCollectionIterator())

    def __str__(self):
        return _pysvtk.svtkDataArrayCollectionIterator___str__(self)

# Register svtkDataArrayCollectionIterator in _pysvtk:
_pysvtk.svtkDataArrayCollectionIterator_swigregister(svtkDataArrayCollectionIterator)
class svtkPoints(svtkObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New(*args):
        return _pysvtk.svtkPoints_New(*args)

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkPoints_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkPoints_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkPoints_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkPoints_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkPoints_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkPoints_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkPoints_PrintSelf(self, os, indent)

    def Allocate(self, sz, ext=1000):
        return _pysvtk.svtkPoints_Allocate(self, sz, ext)

    def Initialize(self):
        return _pysvtk.svtkPoints_Initialize(self)

    def SetData(self, arg2):
        return _pysvtk.svtkPoints_SetData(self, arg2)

    def GetData(self):
        return _pysvtk.svtkPoints_GetData(self)

    def GetDataType(self):
        return _pysvtk.svtkPoints_GetDataType(self)

    def SetDataType(self, dataType):
        return _pysvtk.svtkPoints_SetDataType(self, dataType)

    def SetDataTypeToBit(self):
        return _pysvtk.svtkPoints_SetDataTypeToBit(self)

    def SetDataTypeToChar(self):
        return _pysvtk.svtkPoints_SetDataTypeToChar(self)

    def SetDataTypeToUnsignedChar(self):
        return _pysvtk.svtkPoints_SetDataTypeToUnsignedChar(self)

    def SetDataTypeToShort(self):
        return _pysvtk.svtkPoints_SetDataTypeToShort(self)

    def SetDataTypeToUnsignedShort(self):
        return _pysvtk.svtkPoints_SetDataTypeToUnsignedShort(self)

    def SetDataTypeToInt(self):
        return _pysvtk.svtkPoints_SetDataTypeToInt(self)

    def SetDataTypeToUnsignedInt(self):
        return _pysvtk.svtkPoints_SetDataTypeToUnsignedInt(self)

    def SetDataTypeToLong(self):
        return _pysvtk.svtkPoints_SetDataTypeToLong(self)

    def SetDataTypeToUnsignedLong(self):
        return _pysvtk.svtkPoints_SetDataTypeToUnsignedLong(self)

    def SetDataTypeToFloat(self):
        return _pysvtk.svtkPoints_SetDataTypeToFloat(self)

    def SetDataTypeToDouble(self):
        return _pysvtk.svtkPoints_SetDataTypeToDouble(self)

    def GetVoidPointer(self, id):
        return _pysvtk.svtkPoints_GetVoidPointer(self, id)

    def Squeeze(self):
        return _pysvtk.svtkPoints_Squeeze(self)

    def Reset(self):
        return _pysvtk.svtkPoints_Reset(self)

    def DeepCopy(self, ad):
        return _pysvtk.svtkPoints_DeepCopy(self, ad)

    def ShallowCopy(self, ad):
        return _pysvtk.svtkPoints_ShallowCopy(self, ad)

    def GetActualMemorySize(self):
        return _pysvtk.svtkPoints_GetActualMemorySize(self)

    def GetNumberOfPoints(self):
        return _pysvtk.svtkPoints_GetNumberOfPoints(self)

    def GetPoint(self, *args):
        return _pysvtk.svtkPoints_GetPoint(self, *args)

    def SetPoint(self, *args):
        return _pysvtk.svtkPoints_SetPoint(self, *args)

    def InsertPoint(self, *args):
        return _pysvtk.svtkPoints_InsertPoint(self, *args)

    def InsertPoints(self, *args):
        return _pysvtk.svtkPoints_InsertPoints(self, *args)

    def InsertNextPoint(self, *args):
        return _pysvtk.svtkPoints_InsertNextPoint(self, *args)

    def SetNumberOfPoints(self, numPoints):
        return _pysvtk.svtkPoints_SetNumberOfPoints(self, numPoints)

    def Resize(self, numPoints):
        return _pysvtk.svtkPoints_Resize(self, numPoints)

    def GetPoints(self, ptId, fp):
        return _pysvtk.svtkPoints_GetPoints(self, ptId, fp)

    def ComputeBounds(self):
        return _pysvtk.svtkPoints_ComputeBounds(self)

    def GetBounds(self, *args):
        return _pysvtk.svtkPoints_GetBounds(self, *args)

    def GetMTime(self):
        return _pysvtk.svtkPoints_GetMTime(self)

    def Modified(self):
        return _pysvtk.svtkPoints_Modified(self)
    __swig_destroy__ = _pysvtk.delete_svtkPoints

    def __init__(self):
        _pysvtk.svtkPoints_swiginit(self, _pysvtk.new_svtkPoints())

    def __str__(self):
        return _pysvtk.svtkPoints___str__(self)

# Register svtkPoints in _pysvtk:
_pysvtk.svtkPoints_swigregister(svtkPoints)
class svtkCellArray(svtkObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkCellArray_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkCellArray_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkCellArray_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkCellArray_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkCellArray_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkCellArray_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkCellArray_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkCellArray_PrintSelf(self, os, indent)

    def PrintDebug(self, os):
        return _pysvtk.svtkCellArray_PrintDebug(self, os)

    def Allocate(self, sz, arg3=1000):
        return _pysvtk.svtkCellArray_Allocate(self, sz, arg3)

    def AllocateEstimate(self, numCells, maxCellSize):
        return _pysvtk.svtkCellArray_AllocateEstimate(self, numCells, maxCellSize)

    def AllocateExact(self, numCells, connectivitySize):
        return _pysvtk.svtkCellArray_AllocateExact(self, numCells, connectivitySize)

    def AllocateCopy(self, other):
        return _pysvtk.svtkCellArray_AllocateCopy(self, other)

    def ResizeExact(self, numCells, connectivitySize):
        return _pysvtk.svtkCellArray_ResizeExact(self, numCells, connectivitySize)

    def Initialize(self):
        return _pysvtk.svtkCellArray_Initialize(self)

    def Reset(self):
        return _pysvtk.svtkCellArray_Reset(self)

    def Squeeze(self):
        return _pysvtk.svtkCellArray_Squeeze(self)

    def IsValid(self):
        return _pysvtk.svtkCellArray_IsValid(self)

    def GetNumberOfCells(self):
        return _pysvtk.svtkCellArray_GetNumberOfCells(self)

    def GetNumberOfOffsets(self):
        return _pysvtk.svtkCellArray_GetNumberOfOffsets(self)

    def GetNumberOfConnectivityIds(self):
        return _pysvtk.svtkCellArray_GetNumberOfConnectivityIds(self)

    def NewIterator(self):
        return _pysvtk.svtkCellArray_NewIterator(self)

    def SetData(self, offsets, connectivity):
        return _pysvtk.svtkCellArray_SetData(self, offsets, connectivity)

    def IsStorage64Bit(self):
        return _pysvtk.svtkCellArray_IsStorage64Bit(self)

    def IsStorageShareable(self):
        return _pysvtk.svtkCellArray_IsStorageShareable(self)

    def Use32BitStorage(self):
        return _pysvtk.svtkCellArray_Use32BitStorage(self)

    def Use64BitStorage(self):
        return _pysvtk.svtkCellArray_Use64BitStorage(self)

    def UseDefaultStorage(self):
        return _pysvtk.svtkCellArray_UseDefaultStorage(self)

    def CanConvertTo32BitStorage(self):
        return _pysvtk.svtkCellArray_CanConvertTo32BitStorage(self)

    def CanConvertTo64BitStorage(self):
        return _pysvtk.svtkCellArray_CanConvertTo64BitStorage(self)

    def CanConvertToDefaultStorage(self):
        return _pysvtk.svtkCellArray_CanConvertToDefaultStorage(self)

    def ConvertTo32BitStorage(self):
        return _pysvtk.svtkCellArray_ConvertTo32BitStorage(self)

    def ConvertTo64BitStorage(self):
        return _pysvtk.svtkCellArray_ConvertTo64BitStorage(self)

    def ConvertToDefaultStorage(self):
        return _pysvtk.svtkCellArray_ConvertToDefaultStorage(self)

    def ConvertToSmallestStorage(self):
        return _pysvtk.svtkCellArray_ConvertToSmallestStorage(self)

    def GetOffsetsArray(self):
        return _pysvtk.svtkCellArray_GetOffsetsArray(self)

    def GetOffsetsArray32(self):
        return _pysvtk.svtkCellArray_GetOffsetsArray32(self)

    def GetOffsetsArray64(self):
        return _pysvtk.svtkCellArray_GetOffsetsArray64(self)

    def GetConnectivityArray(self):
        return _pysvtk.svtkCellArray_GetConnectivityArray(self)

    def GetConnectivityArray32(self):
        return _pysvtk.svtkCellArray_GetConnectivityArray32(self)

    def GetConnectivityArray64(self):
        return _pysvtk.svtkCellArray_GetConnectivityArray64(self)

    def IsHomogeneous(self):
        return _pysvtk.svtkCellArray_IsHomogeneous(self)

    def InitTraversal(self):
        return _pysvtk.svtkCellArray_InitTraversal(self)

    def GetNextCell(self, *args):
        return _pysvtk.svtkCellArray_GetNextCell(self, *args)

    def GetCellAtId(self, *args):
        return _pysvtk.svtkCellArray_GetCellAtId(self, *args)

    def GetCellSize(self, cellId):
        return _pysvtk.svtkCellArray_GetCellSize(self, cellId)

    def InsertNextCell(self, *args):
        return _pysvtk.svtkCellArray_InsertNextCell(self, *args)

    def InsertCellPoint(self, id):
        return _pysvtk.svtkCellArray_InsertCellPoint(self, id)

    def UpdateCellCount(self, npts):
        return _pysvtk.svtkCellArray_UpdateCellCount(self, npts)

    def GetTraversalCellId(self):
        return _pysvtk.svtkCellArray_GetTraversalCellId(self)

    def SetTraversalCellId(self, cellId):
        return _pysvtk.svtkCellArray_SetTraversalCellId(self, cellId)

    def ReverseCellAtId(self, cellId):
        return _pysvtk.svtkCellArray_ReverseCellAtId(self, cellId)

    def ReplaceCellAtId(self, *args):
        return _pysvtk.svtkCellArray_ReplaceCellAtId(self, *args)

    def GetMaxCellSize(self):
        return _pysvtk.svtkCellArray_GetMaxCellSize(self)

    def DeepCopy(self, ca):
        return _pysvtk.svtkCellArray_DeepCopy(self, ca)

    def ShallowCopy(self, ca):
        return _pysvtk.svtkCellArray_ShallowCopy(self, ca)

    def Append(self, src, pointOffset=0):
        return _pysvtk.svtkCellArray_Append(self, src, pointOffset)

    def ExportLegacyFormat(self, data):
        return _pysvtk.svtkCellArray_ExportLegacyFormat(self, data)

    def ImportLegacyFormat(self, *args):
        return _pysvtk.svtkCellArray_ImportLegacyFormat(self, *args)

    def AppendLegacyFormat(self, *args):
        return _pysvtk.svtkCellArray_AppendLegacyFormat(self, *args)

    def GetActualMemorySize(self):
        return _pysvtk.svtkCellArray_GetActualMemorySize(self)

    def SetNumberOfCells(self, arg2):
        return _pysvtk.svtkCellArray_SetNumberOfCells(self, arg2)

    def EstimateSize(self, numCells, maxPtsPerCell):
        return _pysvtk.svtkCellArray_EstimateSize(self, numCells, maxPtsPerCell)

    def GetSize(self):
        return _pysvtk.svtkCellArray_GetSize(self)

    def GetNumberOfConnectivityEntries(self):
        return _pysvtk.svtkCellArray_GetNumberOfConnectivityEntries(self)

    def GetCell(self, *args):
        return _pysvtk.svtkCellArray_GetCell(self, *args)

    def GetInsertLocation(self, npts):
        return _pysvtk.svtkCellArray_GetInsertLocation(self, npts)

    def GetTraversalLocation(self, *args):
        return _pysvtk.svtkCellArray_GetTraversalLocation(self, *args)

    def SetTraversalLocation(self, loc):
        return _pysvtk.svtkCellArray_SetTraversalLocation(self, loc)

    def ReverseCell(self, loc):
        return _pysvtk.svtkCellArray_ReverseCell(self, loc)

    def ReplaceCell(self, loc, npts, pts):
        return _pysvtk.svtkCellArray_ReplaceCell(self, loc, npts, pts)

    def SetCells(self, ncells, cells):
        return _pysvtk.svtkCellArray_SetCells(self, ncells, cells)

    def GetData(self):
        return _pysvtk.svtkCellArray_GetData(self)
    __swig_destroy__ = _pysvtk.delete_svtkCellArray

    def __init__(self):
        _pysvtk.svtkCellArray_swiginit(self, _pysvtk.new_svtkCellArray())

    def __str__(self):
        return _pysvtk.svtkCellArray___str__(self)

# Register svtkCellArray in _pysvtk:
_pysvtk.svtkCellArray_swigregister(svtkCellArray)
class svtkFieldData(svtkObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkFieldData_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkFieldData_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkFieldData_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkFieldData_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkFieldData_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkFieldData_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkFieldData_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkFieldData_PrintSelf(self, os, indent)

    def Initialize(self):
        return _pysvtk.svtkFieldData_Initialize(self)

    def Allocate(self, sz, ext=1000):
        return _pysvtk.svtkFieldData_Allocate(self, sz, ext)

    def CopyStructure(self, arg2):
        return _pysvtk.svtkFieldData_CopyStructure(self, arg2)

    def AllocateArrays(self, num):
        return _pysvtk.svtkFieldData_AllocateArrays(self, num)

    def GetNumberOfArrays(self):
        return _pysvtk.svtkFieldData_GetNumberOfArrays(self)

    def AddArray(self, array):
        return _pysvtk.svtkFieldData_AddArray(self, array)

    def RemoveArray(self, *args):
        return _pysvtk.svtkFieldData_RemoveArray(self, *args)

    def GetArray(self, *args):
        return _pysvtk.svtkFieldData_GetArray(self, *args)

    def GetAbstractArray(self, *args):
        return _pysvtk.svtkFieldData_GetAbstractArray(self, *args)

    def HasArray(self, name):
        return _pysvtk.svtkFieldData_HasArray(self, name)

    def GetArrayName(self, i):
        return _pysvtk.svtkFieldData_GetArrayName(self, i)

    def PassData(self, fd):
        return _pysvtk.svtkFieldData_PassData(self, fd)

    def CopyFieldOn(self, name):
        return _pysvtk.svtkFieldData_CopyFieldOn(self, name)

    def CopyFieldOff(self, name):
        return _pysvtk.svtkFieldData_CopyFieldOff(self, name)

    def CopyAllOn(self, unused=0):
        return _pysvtk.svtkFieldData_CopyAllOn(self, unused)

    def CopyAllOff(self, unused=0):
        return _pysvtk.svtkFieldData_CopyAllOff(self, unused)

    def DeepCopy(self, da):
        return _pysvtk.svtkFieldData_DeepCopy(self, da)

    def ShallowCopy(self, da):
        return _pysvtk.svtkFieldData_ShallowCopy(self, da)

    def Squeeze(self):
        return _pysvtk.svtkFieldData_Squeeze(self)

    def Reset(self):
        return _pysvtk.svtkFieldData_Reset(self)

    def GetActualMemorySize(self):
        return _pysvtk.svtkFieldData_GetActualMemorySize(self)

    def GetMTime(self):
        return _pysvtk.svtkFieldData_GetMTime(self)

    def GetField(self, ptId, f):
        return _pysvtk.svtkFieldData_GetField(self, ptId, f)

    def GetArrayContainingComponent(self, i, arrayComp):
        return _pysvtk.svtkFieldData_GetArrayContainingComponent(self, i, arrayComp)

    def GetNumberOfComponents(self):
        return _pysvtk.svtkFieldData_GetNumberOfComponents(self)

    def GetNumberOfTuples(self):
        return _pysvtk.svtkFieldData_GetNumberOfTuples(self)

    def SetNumberOfTuples(self, number):
        return _pysvtk.svtkFieldData_SetNumberOfTuples(self, number)

    def SetTuple(self, i, j, source):
        return _pysvtk.svtkFieldData_SetTuple(self, i, j, source)

    def InsertTuple(self, i, j, source):
        return _pysvtk.svtkFieldData_InsertTuple(self, i, j, source)

    def InsertNextTuple(self, j, source):
        return _pysvtk.svtkFieldData_InsertNextTuple(self, j, source)
    __swig_destroy__ = _pysvtk.delete_svtkFieldData

    def __init__(self):
        _pysvtk.svtkFieldData_swiginit(self, _pysvtk.new_svtkFieldData())

    def __str__(self):
        return _pysvtk.svtkFieldData___str__(self)

# Register svtkFieldData in _pysvtk:
_pysvtk.svtkFieldData_swigregister(svtkFieldData)
class svtkCellTypes(svtkObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkCellTypes_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkCellTypes_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkCellTypes_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkCellTypes_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkCellTypes_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkCellTypes_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkCellTypes_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkCellTypes_PrintSelf(self, os, indent)

    def Allocate(self, sz=512, ext=1000):
        return _pysvtk.svtkCellTypes_Allocate(self, sz, ext)

    def InsertCell(self, id, type, loc):
        return _pysvtk.svtkCellTypes_InsertCell(self, id, type, loc)

    def InsertNextCell(self, type, loc):
        return _pysvtk.svtkCellTypes_InsertNextCell(self, type, loc)

    def SetCellTypes(self, *args):
        return _pysvtk.svtkCellTypes_SetCellTypes(self, *args)

    def GetCellLocation(self, cellId):
        return _pysvtk.svtkCellTypes_GetCellLocation(self, cellId)

    def DeleteCell(self, cellId):
        return _pysvtk.svtkCellTypes_DeleteCell(self, cellId)

    def GetNumberOfTypes(self):
        return _pysvtk.svtkCellTypes_GetNumberOfTypes(self)

    def IsType(self, type):
        return _pysvtk.svtkCellTypes_IsType(self, type)

    def InsertNextType(self, type):
        return _pysvtk.svtkCellTypes_InsertNextType(self, type)

    def GetCellType(self, cellId):
        return _pysvtk.svtkCellTypes_GetCellType(self, cellId)

    def Squeeze(self):
        return _pysvtk.svtkCellTypes_Squeeze(self)

    def Reset(self):
        return _pysvtk.svtkCellTypes_Reset(self)

    def GetActualMemorySize(self):
        return _pysvtk.svtkCellTypes_GetActualMemorySize(self)

    def DeepCopy(self, src):
        return _pysvtk.svtkCellTypes_DeepCopy(self, src)

    @staticmethod
    def GetClassNameFromTypeId(typeId):
        return _pysvtk.svtkCellTypes_GetClassNameFromTypeId(typeId)

    @staticmethod
    def GetTypeIdFromClassName(classname):
        return _pysvtk.svtkCellTypes_GetTypeIdFromClassName(classname)

    @staticmethod
    def IsLinear(type):
        return _pysvtk.svtkCellTypes_IsLinear(type)

    def GetCellTypesArray(self):
        return _pysvtk.svtkCellTypes_GetCellTypesArray(self)

    def GetCellLocationsArray(self):
        return _pysvtk.svtkCellTypes_GetCellLocationsArray(self)
    __swig_destroy__ = _pysvtk.delete_svtkCellTypes

    def __init__(self):
        _pysvtk.svtkCellTypes_swiginit(self, _pysvtk.new_svtkCellTypes())

    def __str__(self):
        return _pysvtk.svtkCellTypes___str__(self)

# Register svtkCellTypes in _pysvtk:
_pysvtk.svtkCellTypes_swigregister(svtkCellTypes)
class svtkDataSetAttributes(svtkFieldData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkDataSetAttributes_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkDataSetAttributes_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkDataSetAttributes_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkDataSetAttributes_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkDataSetAttributes_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkDataSetAttributes_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkDataSetAttributes_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkDataSetAttributes_PrintSelf(self, os, indent)

    def Initialize(self):
        return _pysvtk.svtkDataSetAttributes_Initialize(self)

    def Update(self):
        return _pysvtk.svtkDataSetAttributes_Update(self)

    def DeepCopy(self, pd):
        return _pysvtk.svtkDataSetAttributes_DeepCopy(self, pd)

    def ShallowCopy(self, pd):
        return _pysvtk.svtkDataSetAttributes_ShallowCopy(self, pd)
    SCALARS = _pysvtk.svtkDataSetAttributes_SCALARS
    VECTORS = _pysvtk.svtkDataSetAttributes_VECTORS
    NORMALS = _pysvtk.svtkDataSetAttributes_NORMALS
    TCOORDS = _pysvtk.svtkDataSetAttributes_TCOORDS
    TENSORS = _pysvtk.svtkDataSetAttributes_TENSORS
    GLOBALIDS = _pysvtk.svtkDataSetAttributes_GLOBALIDS
    PEDIGREEIDS = _pysvtk.svtkDataSetAttributes_PEDIGREEIDS
    EDGEFLAG = _pysvtk.svtkDataSetAttributes_EDGEFLAG
    TANGENTS = _pysvtk.svtkDataSetAttributes_TANGENTS
    RATIONALWEIGHTS = _pysvtk.svtkDataSetAttributes_RATIONALWEIGHTS
    HIGHERORDERDEGREES = _pysvtk.svtkDataSetAttributes_HIGHERORDERDEGREES
    NUM_ATTRIBUTES = _pysvtk.svtkDataSetAttributes_NUM_ATTRIBUTES
    MAX = _pysvtk.svtkDataSetAttributes_MAX
    EXACT = _pysvtk.svtkDataSetAttributes_EXACT
    NOLIMIT = _pysvtk.svtkDataSetAttributes_NOLIMIT
    DUPLICATECELL = _pysvtk.svtkDataSetAttributes_DUPLICATECELL
    HIGHCONNECTIVITYCELL = _pysvtk.svtkDataSetAttributes_HIGHCONNECTIVITYCELL
    LOWCONNECTIVITYCELL = _pysvtk.svtkDataSetAttributes_LOWCONNECTIVITYCELL
    REFINEDCELL = _pysvtk.svtkDataSetAttributes_REFINEDCELL
    EXTERIORCELL = _pysvtk.svtkDataSetAttributes_EXTERIORCELL
    HIDDENCELL = _pysvtk.svtkDataSetAttributes_HIDDENCELL
    DUPLICATEPOINT = _pysvtk.svtkDataSetAttributes_DUPLICATEPOINT
    HIDDENPOINT = _pysvtk.svtkDataSetAttributes_HIDDENPOINT

    @staticmethod
    def GhostArrayName():
        return _pysvtk.svtkDataSetAttributes_GhostArrayName()

    def SetScalars(self, da):
        return _pysvtk.svtkDataSetAttributes_SetScalars(self, da)

    def SetActiveScalars(self, name):
        return _pysvtk.svtkDataSetAttributes_SetActiveScalars(self, name)

    def SetVectors(self, da):
        return _pysvtk.svtkDataSetAttributes_SetVectors(self, da)

    def SetActiveVectors(self, name):
        return _pysvtk.svtkDataSetAttributes_SetActiveVectors(self, name)

    def SetNormals(self, da):
        return _pysvtk.svtkDataSetAttributes_SetNormals(self, da)

    def SetActiveNormals(self, name):
        return _pysvtk.svtkDataSetAttributes_SetActiveNormals(self, name)

    def SetTangents(self, da):
        return _pysvtk.svtkDataSetAttributes_SetTangents(self, da)

    def SetActiveTangents(self, name):
        return _pysvtk.svtkDataSetAttributes_SetActiveTangents(self, name)

    def SetTCoords(self, da):
        return _pysvtk.svtkDataSetAttributes_SetTCoords(self, da)

    def SetActiveTCoords(self, name):
        return _pysvtk.svtkDataSetAttributes_SetActiveTCoords(self, name)

    def SetTensors(self, da):
        return _pysvtk.svtkDataSetAttributes_SetTensors(self, da)

    def SetActiveTensors(self, name):
        return _pysvtk.svtkDataSetAttributes_SetActiveTensors(self, name)

    def SetGlobalIds(self, da):
        return _pysvtk.svtkDataSetAttributes_SetGlobalIds(self, da)

    def SetActiveGlobalIds(self, name):
        return _pysvtk.svtkDataSetAttributes_SetActiveGlobalIds(self, name)

    def SetPedigreeIds(self, da):
        return _pysvtk.svtkDataSetAttributes_SetPedigreeIds(self, da)

    def SetActivePedigreeIds(self, name):
        return _pysvtk.svtkDataSetAttributes_SetActivePedigreeIds(self, name)

    def SetRationalWeights(self, da):
        return _pysvtk.svtkDataSetAttributes_SetRationalWeights(self, da)

    def SetActiveRationalWeights(self, name):
        return _pysvtk.svtkDataSetAttributes_SetActiveRationalWeights(self, name)

    def SetHigherOrderDegrees(self, da):
        return _pysvtk.svtkDataSetAttributes_SetHigherOrderDegrees(self, da)

    def SetActiveHigherOrderDegrees(self, name):
        return _pysvtk.svtkDataSetAttributes_SetActiveHigherOrderDegrees(self, name)

    def GetScalars(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetScalars(self, *args)

    def GetVectors(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetVectors(self, *args)

    def GetNormals(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetNormals(self, *args)

    def GetTangents(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetTangents(self, *args)

    def GetTCoords(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetTCoords(self, *args)

    def GetTensors(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetTensors(self, *args)

    def GetGlobalIds(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetGlobalIds(self, *args)

    def GetPedigreeIds(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetPedigreeIds(self, *args)

    def GetRationalWeights(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetRationalWeights(self, *args)

    def GetHigherOrderDegrees(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetHigherOrderDegrees(self, *args)

    def SetActiveAttribute(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetActiveAttribute(self, *args)

    def GetAttributeIndices(self, indexArray):
        return _pysvtk.svtkDataSetAttributes_GetAttributeIndices(self, indexArray)

    def IsArrayAnAttribute(self, idx):
        return _pysvtk.svtkDataSetAttributes_IsArrayAnAttribute(self, idx)

    def SetAttribute(self, aa, attributeType):
        return _pysvtk.svtkDataSetAttributes_SetAttribute(self, aa, attributeType)

    def GetAttribute(self, attributeType):
        return _pysvtk.svtkDataSetAttributes_GetAttribute(self, attributeType)

    def GetAbstractAttribute(self, attributeType):
        return _pysvtk.svtkDataSetAttributes_GetAbstractAttribute(self, attributeType)

    def RemoveArray(self, *args):
        return _pysvtk.svtkDataSetAttributes_RemoveArray(self, *args)

    @staticmethod
    def GetAttributeTypeAsString(attributeType):
        return _pysvtk.svtkDataSetAttributes_GetAttributeTypeAsString(attributeType)

    @staticmethod
    def GetLongAttributeTypeAsString(attributeType):
        return _pysvtk.svtkDataSetAttributes_GetLongAttributeTypeAsString(attributeType)
    COPYTUPLE = _pysvtk.svtkDataSetAttributes_COPYTUPLE
    INTERPOLATE = _pysvtk.svtkDataSetAttributes_INTERPOLATE
    PASSDATA = _pysvtk.svtkDataSetAttributes_PASSDATA
    ALLCOPY = _pysvtk.svtkDataSetAttributes_ALLCOPY

    def SetCopyAttribute(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyAttribute(self, *args)

    def GetCopyAttribute(self, index, ctype):
        return _pysvtk.svtkDataSetAttributes_GetCopyAttribute(self, index, ctype)

    def SetCopyScalars(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyScalars(self, *args)

    def GetCopyScalars(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetCopyScalars(self, *args)

    def CopyScalarsOn(self):
        return _pysvtk.svtkDataSetAttributes_CopyScalarsOn(self)

    def CopyScalarsOff(self):
        return _pysvtk.svtkDataSetAttributes_CopyScalarsOff(self)

    def SetCopyVectors(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyVectors(self, *args)

    def GetCopyVectors(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetCopyVectors(self, *args)

    def CopyVectorsOn(self):
        return _pysvtk.svtkDataSetAttributes_CopyVectorsOn(self)

    def CopyVectorsOff(self):
        return _pysvtk.svtkDataSetAttributes_CopyVectorsOff(self)

    def SetCopyNormals(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyNormals(self, *args)

    def GetCopyNormals(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetCopyNormals(self, *args)

    def CopyNormalsOn(self):
        return _pysvtk.svtkDataSetAttributes_CopyNormalsOn(self)

    def CopyNormalsOff(self):
        return _pysvtk.svtkDataSetAttributes_CopyNormalsOff(self)

    def SetCopyTangents(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyTangents(self, *args)

    def GetCopyTangents(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetCopyTangents(self, *args)

    def CopyTangentsOn(self):
        return _pysvtk.svtkDataSetAttributes_CopyTangentsOn(self)

    def CopyTangentsOff(self):
        return _pysvtk.svtkDataSetAttributes_CopyTangentsOff(self)

    def SetCopyTCoords(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyTCoords(self, *args)

    def GetCopyTCoords(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetCopyTCoords(self, *args)

    def CopyTCoordsOn(self):
        return _pysvtk.svtkDataSetAttributes_CopyTCoordsOn(self)

    def CopyTCoordsOff(self):
        return _pysvtk.svtkDataSetAttributes_CopyTCoordsOff(self)

    def SetCopyTensors(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyTensors(self, *args)

    def GetCopyTensors(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetCopyTensors(self, *args)

    def CopyTensorsOn(self):
        return _pysvtk.svtkDataSetAttributes_CopyTensorsOn(self)

    def CopyTensorsOff(self):
        return _pysvtk.svtkDataSetAttributes_CopyTensorsOff(self)

    def SetCopyGlobalIds(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyGlobalIds(self, *args)

    def GetCopyGlobalIds(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetCopyGlobalIds(self, *args)

    def CopyGlobalIdsOn(self):
        return _pysvtk.svtkDataSetAttributes_CopyGlobalIdsOn(self)

    def CopyGlobalIdsOff(self):
        return _pysvtk.svtkDataSetAttributes_CopyGlobalIdsOff(self)

    def SetCopyPedigreeIds(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyPedigreeIds(self, *args)

    def GetCopyPedigreeIds(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetCopyPedigreeIds(self, *args)

    def CopyPedigreeIdsOn(self):
        return _pysvtk.svtkDataSetAttributes_CopyPedigreeIdsOn(self)

    def CopyPedigreeIdsOff(self):
        return _pysvtk.svtkDataSetAttributes_CopyPedigreeIdsOff(self)

    def SetCopyRationalWeights(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyRationalWeights(self, *args)

    def GetCopyRationalWeights(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetCopyRationalWeights(self, *args)

    def CopyRationalWeightsOn(self):
        return _pysvtk.svtkDataSetAttributes_CopyRationalWeightsOn(self)

    def CopyRationalWeightsOff(self):
        return _pysvtk.svtkDataSetAttributes_CopyRationalWeightsOff(self)

    def SetCopyHigherOrderDegrees(self, *args):
        return _pysvtk.svtkDataSetAttributes_SetCopyHigherOrderDegrees(self, *args)

    def GetCopyHigherOrderDegrees(self, *args):
        return _pysvtk.svtkDataSetAttributes_GetCopyHigherOrderDegrees(self, *args)

    def CopyHigherOrderDegreesOn(self):
        return _pysvtk.svtkDataSetAttributes_CopyHigherOrderDegreesOn(self)

    def CopyHigherOrderDegreesOff(self):
        return _pysvtk.svtkDataSetAttributes_CopyHigherOrderDegreesOff(self)

    def CopyAllOn(self, *args):
        return _pysvtk.svtkDataSetAttributes_CopyAllOn(self, *args)

    def CopyAllOff(self, *args):
        return _pysvtk.svtkDataSetAttributes_CopyAllOff(self, *args)

    def PassData(self, fd):
        return _pysvtk.svtkDataSetAttributes_PassData(self, fd)

    def SetupForCopy(self, pd):
        return _pysvtk.svtkDataSetAttributes_SetupForCopy(self, pd)

    def CopyStructuredData(self, inDsa, inExt, outExt, setSize=True):
        return _pysvtk.svtkDataSetAttributes_CopyStructuredData(self, inDsa, inExt, outExt, setSize)

    def CopyTuple(self, fromData, toData, fromId, toId):
        return _pysvtk.svtkDataSetAttributes_CopyTuple(self, fromData, toData, fromId, toId)

    def CopyTuples(self, *args):
        return _pysvtk.svtkDataSetAttributes_CopyTuples(self, *args)

    def InterpolateEdge(self, fromPd, toId, p1, p2, t):
        return _pysvtk.svtkDataSetAttributes_InterpolateEdge(self, fromPd, toId, p1, p2, t)

    def InterpolateTime(self, from1, from2, id, t):
        return _pysvtk.svtkDataSetAttributes_InterpolateTime(self, from1, from2, id, t)

    def CopyAllocate(self, *args):
        return _pysvtk.svtkDataSetAttributes_CopyAllocate(self, *args)

    def CopyData(self, *args):
        return _pysvtk.svtkDataSetAttributes_CopyData(self, *args)

    def InterpolateAllocate(self, *args):
        return _pysvtk.svtkDataSetAttributes_InterpolateAllocate(self, *args)

    def InterpolatePoint(self, *args):
        return _pysvtk.svtkDataSetAttributes_InterpolatePoint(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkDataSetAttributes

    def __init__(self):
        _pysvtk.svtkDataSetAttributes_swiginit(self, _pysvtk.new_svtkDataSetAttributes())

    def __str__(self):
        return _pysvtk.svtkDataSetAttributes___str__(self)

# Register svtkDataSetAttributes in _pysvtk:
_pysvtk.svtkDataSetAttributes_swigregister(svtkDataSetAttributes)
class svtkCellData(svtkDataSetAttributes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkCellData_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkCellData_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkCellData_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkCellData_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkCellData_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkCellData_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkCellData_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkCellData_PrintSelf(self, os, indent)
    __swig_destroy__ = _pysvtk.delete_svtkCellData

    def __init__(self):
        _pysvtk.svtkCellData_swiginit(self, _pysvtk.new_svtkCellData())

    def __str__(self):
        return _pysvtk.svtkCellData___str__(self)

# Register svtkCellData in _pysvtk:
_pysvtk.svtkCellData_swigregister(svtkCellData)
class svtkPointData(svtkDataSetAttributes):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkPointData_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkPointData_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkPointData_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkPointData_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkPointData_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkPointData_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkPointData_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkPointData_PrintSelf(self, os, indent)

    def NullPoint(self, ptId):
        return _pysvtk.svtkPointData_NullPoint(self, ptId)
    __swig_destroy__ = _pysvtk.delete_svtkPointData

    def __init__(self):
        _pysvtk.svtkPointData_swiginit(self, _pysvtk.new_svtkPointData())

    def __str__(self):
        return _pysvtk.svtkPointData___str__(self)

# Register svtkPointData in _pysvtk:
_pysvtk.svtkPointData_swigregister(svtkPointData)
SVTK_PIECES_EXTENT = _pysvtk.SVTK_PIECES_EXTENT
SVTK_3D_EXTENT = _pysvtk.SVTK_3D_EXTENT
SVTK_TIME_EXTENT = _pysvtk.SVTK_TIME_EXTENT
class svtkDataObject(svtkObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkDataObject_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkDataObject_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkDataObject_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkDataObject_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkDataObject_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkDataObject_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkDataObject_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkDataObject_PrintSelf(self, os, indent)

    def GetInformation(self):
        return _pysvtk.svtkDataObject_GetInformation(self)

    def SetInformation(self, arg2):
        return _pysvtk.svtkDataObject_SetInformation(self, arg2)

    def GetMTime(self):
        return _pysvtk.svtkDataObject_GetMTime(self)

    def Initialize(self):
        return _pysvtk.svtkDataObject_Initialize(self)

    def ReleaseData(self):
        return _pysvtk.svtkDataObject_ReleaseData(self)

    def GetDataReleased(self):
        return _pysvtk.svtkDataObject_GetDataReleased(self)

    @staticmethod
    def SetGlobalReleaseDataFlag(val):
        return _pysvtk.svtkDataObject_SetGlobalReleaseDataFlag(val)

    def GlobalReleaseDataFlagOn(self):
        return _pysvtk.svtkDataObject_GlobalReleaseDataFlagOn(self)

    def GlobalReleaseDataFlagOff(self):
        return _pysvtk.svtkDataObject_GlobalReleaseDataFlagOff(self)

    @staticmethod
    def GetGlobalReleaseDataFlag():
        return _pysvtk.svtkDataObject_GetGlobalReleaseDataFlag()

    def SetFieldData(self, arg2):
        return _pysvtk.svtkDataObject_SetFieldData(self, arg2)

    def GetFieldData(self):
        return _pysvtk.svtkDataObject_GetFieldData(self)

    def GetDataObjectType(self):
        return _pysvtk.svtkDataObject_GetDataObjectType(self)

    def GetUpdateTime(self):
        return _pysvtk.svtkDataObject_GetUpdateTime(self)

    def GetActualMemorySize(self):
        return _pysvtk.svtkDataObject_GetActualMemorySize(self)

    def CopyInformationFromPipeline(self, arg2):
        return _pysvtk.svtkDataObject_CopyInformationFromPipeline(self, arg2)

    def CopyInformationToPipeline(self, arg2):
        return _pysvtk.svtkDataObject_CopyInformationToPipeline(self, arg2)

    @staticmethod
    def GetActiveFieldInformation(info, fieldAssociation, attributeType):
        return _pysvtk.svtkDataObject_GetActiveFieldInformation(info, fieldAssociation, attributeType)

    @staticmethod
    def GetNamedFieldInformation(info, fieldAssociation, name):
        return _pysvtk.svtkDataObject_GetNamedFieldInformation(info, fieldAssociation, name)

    @staticmethod
    def RemoveNamedFieldInformation(info, fieldAssociation, name):
        return _pysvtk.svtkDataObject_RemoveNamedFieldInformation(info, fieldAssociation, name)

    @staticmethod
    def SetActiveAttribute(info, fieldAssociation, attributeName, attributeType):
        return _pysvtk.svtkDataObject_SetActiveAttribute(info, fieldAssociation, attributeName, attributeType)

    @staticmethod
    def SetActiveAttributeInfo(info, fieldAssociation, attributeType, name, arrayType, numComponents, numTuples):
        return _pysvtk.svtkDataObject_SetActiveAttributeInfo(info, fieldAssociation, attributeType, name, arrayType, numComponents, numTuples)

    @staticmethod
    def SetPointDataActiveScalarInfo(info, arrayType, numComponents):
        return _pysvtk.svtkDataObject_SetPointDataActiveScalarInfo(info, arrayType, numComponents)

    def DataHasBeenGenerated(self):
        return _pysvtk.svtkDataObject_DataHasBeenGenerated(self)

    def PrepareForNewData(self):
        return _pysvtk.svtkDataObject_PrepareForNewData(self)

    def ShallowCopy(self, src):
        return _pysvtk.svtkDataObject_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkDataObject_DeepCopy(self, src)

    def GetExtentType(self):
        return _pysvtk.svtkDataObject_GetExtentType(self)

    def Crop(self, updateExtent):
        return _pysvtk.svtkDataObject_Crop(self, updateExtent)
    FIELD_ASSOCIATION_POINTS = _pysvtk.svtkDataObject_FIELD_ASSOCIATION_POINTS
    FIELD_ASSOCIATION_CELLS = _pysvtk.svtkDataObject_FIELD_ASSOCIATION_CELLS
    FIELD_ASSOCIATION_NONE = _pysvtk.svtkDataObject_FIELD_ASSOCIATION_NONE
    FIELD_ASSOCIATION_POINTS_THEN_CELLS = _pysvtk.svtkDataObject_FIELD_ASSOCIATION_POINTS_THEN_CELLS
    FIELD_ASSOCIATION_VERTICES = _pysvtk.svtkDataObject_FIELD_ASSOCIATION_VERTICES
    FIELD_ASSOCIATION_EDGES = _pysvtk.svtkDataObject_FIELD_ASSOCIATION_EDGES
    FIELD_ASSOCIATION_ROWS = _pysvtk.svtkDataObject_FIELD_ASSOCIATION_ROWS
    NUMBER_OF_ASSOCIATIONS = _pysvtk.svtkDataObject_NUMBER_OF_ASSOCIATIONS
    POINT = _pysvtk.svtkDataObject_POINT
    CELL = _pysvtk.svtkDataObject_CELL
    FIELD = _pysvtk.svtkDataObject_FIELD
    POINT_THEN_CELL = _pysvtk.svtkDataObject_POINT_THEN_CELL
    VERTEX = _pysvtk.svtkDataObject_VERTEX
    EDGE = _pysvtk.svtkDataObject_EDGE
    ROW = _pysvtk.svtkDataObject_ROW
    NUMBER_OF_ATTRIBUTE_TYPES = _pysvtk.svtkDataObject_NUMBER_OF_ATTRIBUTE_TYPES

    def GetAttributes(self, type):
        return _pysvtk.svtkDataObject_GetAttributes(self, type)

    def GetGhostArray(self, type):
        return _pysvtk.svtkDataObject_GetGhostArray(self, type)

    def GetAttributesAsFieldData(self, type):
        return _pysvtk.svtkDataObject_GetAttributesAsFieldData(self, type)

    def GetAttributeTypeForArray(self, arr):
        return _pysvtk.svtkDataObject_GetAttributeTypeForArray(self, arr)

    def GetNumberOfElements(self, type):
        return _pysvtk.svtkDataObject_GetNumberOfElements(self, type)
    FIELD_OPERATION_PRESERVED = _pysvtk.svtkDataObject_FIELD_OPERATION_PRESERVED
    FIELD_OPERATION_REINTERPOLATED = _pysvtk.svtkDataObject_FIELD_OPERATION_REINTERPOLATED
    FIELD_OPERATION_MODIFIED = _pysvtk.svtkDataObject_FIELD_OPERATION_MODIFIED
    FIELD_OPERATION_REMOVED = _pysvtk.svtkDataObject_FIELD_OPERATION_REMOVED

    @staticmethod
    def GetAssociationTypeAsString(associationType):
        return _pysvtk.svtkDataObject_GetAssociationTypeAsString(associationType)

    @staticmethod
    def GetAssociationTypeFromString(associationType):
        return _pysvtk.svtkDataObject_GetAssociationTypeFromString(associationType)

    @staticmethod
    def DATA_TYPE_NAME():
        return _pysvtk.svtkDataObject_DATA_TYPE_NAME()

    @staticmethod
    def DATA_OBJECT():
        return _pysvtk.svtkDataObject_DATA_OBJECT()

    @staticmethod
    def DATA_EXTENT_TYPE():
        return _pysvtk.svtkDataObject_DATA_EXTENT_TYPE()

    @staticmethod
    def DATA_EXTENT():
        return _pysvtk.svtkDataObject_DATA_EXTENT()

    @staticmethod
    def ALL_PIECES_EXTENT():
        return _pysvtk.svtkDataObject_ALL_PIECES_EXTENT()

    @staticmethod
    def DATA_PIECE_NUMBER():
        return _pysvtk.svtkDataObject_DATA_PIECE_NUMBER()

    @staticmethod
    def DATA_NUMBER_OF_PIECES():
        return _pysvtk.svtkDataObject_DATA_NUMBER_OF_PIECES()

    @staticmethod
    def DATA_NUMBER_OF_GHOST_LEVELS():
        return _pysvtk.svtkDataObject_DATA_NUMBER_OF_GHOST_LEVELS()

    @staticmethod
    def DATA_TIME_STEP():
        return _pysvtk.svtkDataObject_DATA_TIME_STEP()

    @staticmethod
    def POINT_DATA_VECTOR():
        return _pysvtk.svtkDataObject_POINT_DATA_VECTOR()

    @staticmethod
    def CELL_DATA_VECTOR():
        return _pysvtk.svtkDataObject_CELL_DATA_VECTOR()

    @staticmethod
    def VERTEX_DATA_VECTOR():
        return _pysvtk.svtkDataObject_VERTEX_DATA_VECTOR()

    @staticmethod
    def EDGE_DATA_VECTOR():
        return _pysvtk.svtkDataObject_EDGE_DATA_VECTOR()

    @staticmethod
    def FIELD_ARRAY_TYPE():
        return _pysvtk.svtkDataObject_FIELD_ARRAY_TYPE()

    @staticmethod
    def FIELD_ASSOCIATION():
        return _pysvtk.svtkDataObject_FIELD_ASSOCIATION()

    @staticmethod
    def FIELD_ATTRIBUTE_TYPE():
        return _pysvtk.svtkDataObject_FIELD_ATTRIBUTE_TYPE()

    @staticmethod
    def FIELD_ACTIVE_ATTRIBUTE():
        return _pysvtk.svtkDataObject_FIELD_ACTIVE_ATTRIBUTE()

    @staticmethod
    def FIELD_NUMBER_OF_COMPONENTS():
        return _pysvtk.svtkDataObject_FIELD_NUMBER_OF_COMPONENTS()

    @staticmethod
    def FIELD_NUMBER_OF_TUPLES():
        return _pysvtk.svtkDataObject_FIELD_NUMBER_OF_TUPLES()

    @staticmethod
    def FIELD_OPERATION():
        return _pysvtk.svtkDataObject_FIELD_OPERATION()

    @staticmethod
    def FIELD_RANGE():
        return _pysvtk.svtkDataObject_FIELD_RANGE()

    @staticmethod
    def PIECE_EXTENT():
        return _pysvtk.svtkDataObject_PIECE_EXTENT()

    @staticmethod
    def FIELD_NAME():
        return _pysvtk.svtkDataObject_FIELD_NAME()

    @staticmethod
    def ORIGIN():
        return _pysvtk.svtkDataObject_ORIGIN()

    @staticmethod
    def SPACING():
        return _pysvtk.svtkDataObject_SPACING()

    @staticmethod
    def DIRECTION():
        return _pysvtk.svtkDataObject_DIRECTION()

    @staticmethod
    def BOUNDING_BOX():
        return _pysvtk.svtkDataObject_BOUNDING_BOX()

    @staticmethod
    def SIL():
        return _pysvtk.svtkDataObject_SIL()

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkDataObject_GetData(*args)
    __swig_destroy__ = _pysvtk.delete_svtkDataObject

    def __init__(self):
        _pysvtk.svtkDataObject_swiginit(self, _pysvtk.new_svtkDataObject())

    def __str__(self):
        return _pysvtk.svtkDataObject___str__(self)

# Register svtkDataObject in _pysvtk:
_pysvtk.svtkDataObject_swigregister(svtkDataObject)
class svtkDataSet(svtkDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkDataSet_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkDataSet_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkDataSet_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkDataSet_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkDataSet_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkDataSet_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkDataSet_PrintSelf(self, os, indent)

    def CopyStructure(self, ds):
        return _pysvtk.svtkDataSet_CopyStructure(self, ds)

    def CopyAttributes(self, ds):
        return _pysvtk.svtkDataSet_CopyAttributes(self, ds)

    def GetNumberOfPoints(self):
        return _pysvtk.svtkDataSet_GetNumberOfPoints(self)

    def GetNumberOfCells(self):
        return _pysvtk.svtkDataSet_GetNumberOfCells(self)

    def GetPoint(self, *args):
        return _pysvtk.svtkDataSet_GetPoint(self, *args)

    def NewCellIterator(self):
        return _pysvtk.svtkDataSet_NewCellIterator(self)

    def SetCellOrderAndRationalWeights(self, cellId, cell):
        return _pysvtk.svtkDataSet_SetCellOrderAndRationalWeights(self, cellId, cell)

    def GetCell(self, *args):
        return _pysvtk.svtkDataSet_GetCell(self, *args)

    def GetCellBounds(self, cellId, bounds):
        return _pysvtk.svtkDataSet_GetCellBounds(self, cellId, bounds)

    def GetCellType(self, cellId):
        return _pysvtk.svtkDataSet_GetCellType(self, cellId)

    def GetCellTypes(self, types):
        return _pysvtk.svtkDataSet_GetCellTypes(self, types)

    def GetCellPoints(self, cellId, ptIds):
        return _pysvtk.svtkDataSet_GetCellPoints(self, cellId, ptIds)

    def GetPointCells(self, ptId, cellIds):
        return _pysvtk.svtkDataSet_GetPointCells(self, ptId, cellIds)

    def GetCellNeighbors(self, cellId, ptIds, cellIds):
        return _pysvtk.svtkDataSet_GetCellNeighbors(self, cellId, ptIds, cellIds)

    def FindPoint(self, *args):
        return _pysvtk.svtkDataSet_FindPoint(self, *args)

    def FindCell(self, *args):
        return _pysvtk.svtkDataSet_FindCell(self, *args)

    def FindAndGetCell(self, x, cell, cellId, tol2, subId, pcoords, weights):
        return _pysvtk.svtkDataSet_FindAndGetCell(self, x, cell, cellId, tol2, subId, pcoords, weights)

    def GetMTime(self):
        return _pysvtk.svtkDataSet_GetMTime(self)

    def GetCellData(self):
        return _pysvtk.svtkDataSet_GetCellData(self)

    def GetPointData(self):
        return _pysvtk.svtkDataSet_GetPointData(self)

    def Squeeze(self):
        return _pysvtk.svtkDataSet_Squeeze(self)

    def ComputeBounds(self):
        return _pysvtk.svtkDataSet_ComputeBounds(self)

    def GetBounds(self, *args):
        return _pysvtk.svtkDataSet_GetBounds(self, *args)

    def GetCenter(self, *args):
        return _pysvtk.svtkDataSet_GetCenter(self, *args)

    def GetLength(self):
        return _pysvtk.svtkDataSet_GetLength(self)

    def Initialize(self):
        return _pysvtk.svtkDataSet_Initialize(self)

    def GetScalarRange(self, *args):
        return _pysvtk.svtkDataSet_GetScalarRange(self, *args)

    def GetMaxCellSize(self):
        return _pysvtk.svtkDataSet_GetMaxCellSize(self)

    def GetActualMemorySize(self):
        return _pysvtk.svtkDataSet_GetActualMemorySize(self)

    def GetDataObjectType(self):
        return _pysvtk.svtkDataSet_GetDataObjectType(self)

    def ShallowCopy(self, src):
        return _pysvtk.svtkDataSet_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkDataSet_DeepCopy(self, src)
    DATA_OBJECT_FIELD = _pysvtk.svtkDataSet_DATA_OBJECT_FIELD
    POINT_DATA_FIELD = _pysvtk.svtkDataSet_POINT_DATA_FIELD
    CELL_DATA_FIELD = _pysvtk.svtkDataSet_CELL_DATA_FIELD

    def CheckAttributes(self):
        return _pysvtk.svtkDataSet_CheckAttributes(self)

    def GenerateGhostArray(self, *args):
        return _pysvtk.svtkDataSet_GenerateGhostArray(self, *args)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkDataSet_GetData(*args)

    def GetAttributesAsFieldData(self, type):
        return _pysvtk.svtkDataSet_GetAttributesAsFieldData(self, type)

    def GetNumberOfElements(self, type):
        return _pysvtk.svtkDataSet_GetNumberOfElements(self, type)

    def HasAnyGhostCells(self):
        return _pysvtk.svtkDataSet_HasAnyGhostCells(self)

    def HasAnyGhostPoints(self):
        return _pysvtk.svtkDataSet_HasAnyGhostPoints(self)

    def HasAnyBlankCells(self):
        return _pysvtk.svtkDataSet_HasAnyBlankCells(self)

    def HasAnyBlankPoints(self):
        return _pysvtk.svtkDataSet_HasAnyBlankPoints(self)

    def GetPointGhostArray(self):
        return _pysvtk.svtkDataSet_GetPointGhostArray(self)

    def UpdatePointGhostArrayCache(self):
        return _pysvtk.svtkDataSet_UpdatePointGhostArrayCache(self)

    def AllocatePointGhostArray(self):
        return _pysvtk.svtkDataSet_AllocatePointGhostArray(self)

    def GetCellGhostArray(self):
        return _pysvtk.svtkDataSet_GetCellGhostArray(self)

    def UpdateCellGhostArrayCache(self):
        return _pysvtk.svtkDataSet_UpdateCellGhostArrayCache(self)

    def AllocateCellGhostArray(self):
        return _pysvtk.svtkDataSet_AllocateCellGhostArray(self)
    __swig_destroy__ = _pysvtk.delete_svtkDataSet

    def __str__(self):
        return _pysvtk.svtkDataSet___str__(self)

# Register svtkDataSet in _pysvtk:
_pysvtk.svtkDataSet_swigregister(svtkDataSet)
class svtkTable(svtkDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkTable_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkTable_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkTable_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkTable_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkTable_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkTable_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkTable_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkTable_PrintSelf(self, os, indent)

    def Dump(self, colWidth=16, rowLimit=-1):
        return _pysvtk.svtkTable_Dump(self, colWidth, rowLimit)

    def GetDataObjectType(self):
        return _pysvtk.svtkTable_GetDataObjectType(self)

    def GetActualMemorySize(self):
        return _pysvtk.svtkTable_GetActualMemorySize(self)

    def GetRowData(self):
        return _pysvtk.svtkTable_GetRowData(self)

    def SetRowData(self, data):
        return _pysvtk.svtkTable_SetRowData(self, data)

    def GetNumberOfRows(self):
        return _pysvtk.svtkTable_GetNumberOfRows(self)

    def SetNumberOfRows(self, arg2):
        return _pysvtk.svtkTable_SetNumberOfRows(self, arg2)

    def GetRow(self, *args):
        return _pysvtk.svtkTable_GetRow(self, *args)

    def SetRow(self, row, values):
        return _pysvtk.svtkTable_SetRow(self, row, values)

    def InsertNextBlankRow(self, default_num_val=0.0):
        return _pysvtk.svtkTable_InsertNextBlankRow(self, default_num_val)

    def InsertNextRow(self, arr):
        return _pysvtk.svtkTable_InsertNextRow(self, arr)

    def RemoveRow(self, row):
        return _pysvtk.svtkTable_RemoveRow(self, row)

    def GetNumberOfColumns(self):
        return _pysvtk.svtkTable_GetNumberOfColumns(self)

    def GetColumnName(self, col):
        return _pysvtk.svtkTable_GetColumnName(self, col)

    def GetColumnByName(self, name):
        return _pysvtk.svtkTable_GetColumnByName(self, name)

    def GetColumn(self, col):
        return _pysvtk.svtkTable_GetColumn(self, col)

    def AddColumn(self, arr):
        return _pysvtk.svtkTable_AddColumn(self, arr)

    def RemoveColumnByName(self, name):
        return _pysvtk.svtkTable_RemoveColumnByName(self, name)

    def RemoveColumn(self, col):
        return _pysvtk.svtkTable_RemoveColumn(self, col)

    def GetValue(self, row, col):
        return _pysvtk.svtkTable_GetValue(self, row, col)

    def GetValueByName(self, row, col):
        return _pysvtk.svtkTable_GetValueByName(self, row, col)

    def SetValue(self, row, col, value):
        return _pysvtk.svtkTable_SetValue(self, row, col, value)

    def SetValueByName(self, row, col, value):
        return _pysvtk.svtkTable_SetValueByName(self, row, col, value)

    def Initialize(self):
        return _pysvtk.svtkTable_Initialize(self)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkTable_GetData(*args)

    def ShallowCopy(self, src):
        return _pysvtk.svtkTable_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkTable_DeepCopy(self, src)

    def GetAttributesAsFieldData(self, type):
        return _pysvtk.svtkTable_GetAttributesAsFieldData(self, type)

    def GetNumberOfElements(self, type):
        return _pysvtk.svtkTable_GetNumberOfElements(self, type)
    __swig_destroy__ = _pysvtk.delete_svtkTable

    def __init__(self):
        _pysvtk.svtkTable_swiginit(self, _pysvtk.new_svtkTable())

    def __str__(self):
        return _pysvtk.svtkTable___str__(self)

# Register svtkTable in _pysvtk:
_pysvtk.svtkTable_swigregister(svtkTable)
class svtkPointSet(svtkDataSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkPointSet_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkPointSet_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkPointSet_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkPointSet_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkPointSet_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkPointSet_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkPointSet_PrintSelf(self, os, indent)

    def SetEditable(self, _arg):
        return _pysvtk.svtkPointSet_SetEditable(self, _arg)

    def GetEditable(self):
        return _pysvtk.svtkPointSet_GetEditable(self)

    def EditableOn(self):
        return _pysvtk.svtkPointSet_EditableOn(self)

    def EditableOff(self):
        return _pysvtk.svtkPointSet_EditableOff(self)

    def Initialize(self):
        return _pysvtk.svtkPointSet_Initialize(self)

    def CopyStructure(self, pd):
        return _pysvtk.svtkPointSet_CopyStructure(self, pd)

    def GetNumberOfPoints(self):
        return _pysvtk.svtkPointSet_GetNumberOfPoints(self)

    def FindPoint(self, *args):
        return _pysvtk.svtkPointSet_FindPoint(self, *args)

    def FindCell(self, *args):
        return _pysvtk.svtkPointSet_FindCell(self, *args)

    def GetPoint(self, *args):
        return _pysvtk.svtkPointSet_GetPoint(self, *args)

    def NewCellIterator(self):
        return _pysvtk.svtkPointSet_NewCellIterator(self)

    def BuildPointLocator(self):
        return _pysvtk.svtkPointSet_BuildPointLocator(self)

    def BuildLocator(self):
        return _pysvtk.svtkPointSet_BuildLocator(self)

    def BuildCellLocator(self):
        return _pysvtk.svtkPointSet_BuildCellLocator(self)

    def SetPointLocator(self, arg2):
        return _pysvtk.svtkPointSet_SetPointLocator(self, arg2)

    def GetPointLocator(self):
        return _pysvtk.svtkPointSet_GetPointLocator(self)

    def SetCellLocator(self, arg2):
        return _pysvtk.svtkPointSet_SetCellLocator(self, arg2)

    def GetCellLocator(self):
        return _pysvtk.svtkPointSet_GetCellLocator(self)

    def GetMTime(self):
        return _pysvtk.svtkPointSet_GetMTime(self)

    def ComputeBounds(self):
        return _pysvtk.svtkPointSet_ComputeBounds(self)

    def Squeeze(self):
        return _pysvtk.svtkPointSet_Squeeze(self)

    def SetPoints(self, arg2):
        return _pysvtk.svtkPointSet_SetPoints(self, arg2)

    def GetPoints(self):
        return _pysvtk.svtkPointSet_GetPoints(self)

    def GetActualMemorySize(self):
        return _pysvtk.svtkPointSet_GetActualMemorySize(self)

    def ShallowCopy(self, src):
        return _pysvtk.svtkPointSet_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkPointSet_DeepCopy(self, src)

    def Register(self, o):
        return _pysvtk.svtkPointSet_Register(self, o)

    def UnRegister(self, o):
        return _pysvtk.svtkPointSet_UnRegister(self, o)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkPointSet_GetData(*args)
    __swig_destroy__ = _pysvtk.delete_svtkPointSet

    def __str__(self):
        return _pysvtk.svtkPointSet___str__(self)

# Register svtkPointSet in _pysvtk:
_pysvtk.svtkPointSet_swigregister(svtkPointSet)
class svtkImageData(svtkDataSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkImageData_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkImageData_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkImageData_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkImageData_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkImageData_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkImageData_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkImageData_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkImageData_PrintSelf(self, os, indent)

    def CopyStructure(self, ds):
        return _pysvtk.svtkImageData_CopyStructure(self, ds)

    def GetDataObjectType(self):
        return _pysvtk.svtkImageData_GetDataObjectType(self)

    def GetNumberOfCells(self):
        return _pysvtk.svtkImageData_GetNumberOfCells(self)

    def GetNumberOfPoints(self):
        return _pysvtk.svtkImageData_GetNumberOfPoints(self)

    def GetPoint(self, *args):
        return _pysvtk.svtkImageData_GetPoint(self, *args)

    def GetCell(self, *args):
        return _pysvtk.svtkImageData_GetCell(self, *args)

    def GetCellBounds(self, cellId, bounds):
        return _pysvtk.svtkImageData_GetCellBounds(self, cellId, bounds)

    def FindPoint(self, *args):
        return _pysvtk.svtkImageData_FindPoint(self, *args)

    def FindCell(self, *args):
        return _pysvtk.svtkImageData_FindCell(self, *args)

    def FindAndGetCell(self, x, cell, cellId, tol2, subId, pcoords, weights):
        return _pysvtk.svtkImageData_FindAndGetCell(self, x, cell, cellId, tol2, subId, pcoords, weights)

    def GetCellType(self, cellId):
        return _pysvtk.svtkImageData_GetCellType(self, cellId)

    def GetCellPoints(self, cellId, ptIds):
        return _pysvtk.svtkImageData_GetCellPoints(self, cellId, ptIds)

    def GetPointCells(self, ptId, cellIds):
        return _pysvtk.svtkImageData_GetPointCells(self, ptId, cellIds)

    def ComputeBounds(self):
        return _pysvtk.svtkImageData_ComputeBounds(self)

    def GetMaxCellSize(self):
        return _pysvtk.svtkImageData_GetMaxCellSize(self)

    def Initialize(self):
        return _pysvtk.svtkImageData_Initialize(self)

    def SetDimensions(self, *args):
        return _pysvtk.svtkImageData_SetDimensions(self, *args)

    def GetDimensions(self, *args):
        return _pysvtk.svtkImageData_GetDimensions(self, *args)

    def ComputeStructuredCoordinates(self, x, ijk, pcoords):
        return _pysvtk.svtkImageData_ComputeStructuredCoordinates(self, x, ijk, pcoords)

    def GetVoxelGradient(self, i, j, k, s, g):
        return _pysvtk.svtkImageData_GetVoxelGradient(self, i, j, k, s, g)

    def GetPointGradient(self, i, j, k, s, g):
        return _pysvtk.svtkImageData_GetPointGradient(self, i, j, k, s, g)

    def GetDataDimension(self):
        return _pysvtk.svtkImageData_GetDataDimension(self)

    def ComputePointId(self, ijk):
        return _pysvtk.svtkImageData_ComputePointId(self, ijk)

    def ComputeCellId(self, ijk):
        return _pysvtk.svtkImageData_ComputeCellId(self, ijk)

    def SetAxisUpdateExtent(self, axis, min, max, updateExtent, axisUpdateExtent):
        return _pysvtk.svtkImageData_SetAxisUpdateExtent(self, axis, min, max, updateExtent, axisUpdateExtent)

    def GetAxisUpdateExtent(self, axis, min, max, updateExtent):
        return _pysvtk.svtkImageData_GetAxisUpdateExtent(self, axis, min, max, updateExtent)

    def SetExtent(self, *args):
        return _pysvtk.svtkImageData_SetExtent(self, *args)

    def GetExtent(self, *args):
        return _pysvtk.svtkImageData_GetExtent(self, *args)

    def GetScalarTypeMin(self, *args):
        return _pysvtk.svtkImageData_GetScalarTypeMin(self, *args)

    def GetScalarTypeMax(self, *args):
        return _pysvtk.svtkImageData_GetScalarTypeMax(self, *args)

    def GetScalarSize(self, *args):
        return _pysvtk.svtkImageData_GetScalarSize(self, *args)

    def GetIncrements(self, *args):
        return _pysvtk.svtkImageData_GetIncrements(self, *args)

    def GetContinuousIncrements(self, *args):
        return _pysvtk.svtkImageData_GetContinuousIncrements(self, *args)

    def GetScalarPointerForExtent(self, extent):
        return _pysvtk.svtkImageData_GetScalarPointerForExtent(self, extent)

    def GetScalarPointer(self, *args):
        return _pysvtk.svtkImageData_GetScalarPointer(self, *args)

    def GetScalarComponentAsFloat(self, x, y, z, component):
        return _pysvtk.svtkImageData_GetScalarComponentAsFloat(self, x, y, z, component)

    def SetScalarComponentFromFloat(self, x, y, z, component, v):
        return _pysvtk.svtkImageData_SetScalarComponentFromFloat(self, x, y, z, component, v)

    def GetScalarComponentAsDouble(self, x, y, z, component):
        return _pysvtk.svtkImageData_GetScalarComponentAsDouble(self, x, y, z, component)

    def SetScalarComponentFromDouble(self, x, y, z, component, v):
        return _pysvtk.svtkImageData_SetScalarComponentFromDouble(self, x, y, z, component, v)

    def AllocateScalars(self, *args):
        return _pysvtk.svtkImageData_AllocateScalars(self, *args)

    def CopyAndCastFrom(self, *args):
        return _pysvtk.svtkImageData_CopyAndCastFrom(self, *args)

    def Crop(self, updateExtent):
        return _pysvtk.svtkImageData_Crop(self, updateExtent)

    def GetActualMemorySize(self):
        return _pysvtk.svtkImageData_GetActualMemorySize(self)

    def GetSpacing(self, *args):
        return _pysvtk.svtkImageData_GetSpacing(self, *args)

    def SetSpacing(self, *args):
        return _pysvtk.svtkImageData_SetSpacing(self, *args)

    def GetOrigin(self, *args):
        return _pysvtk.svtkImageData_GetOrigin(self, *args)

    def SetOrigin(self, *args):
        return _pysvtk.svtkImageData_SetOrigin(self, *args)

    def GetDirectionMatrix(self):
        return _pysvtk.svtkImageData_GetDirectionMatrix(self)

    def SetDirectionMatrix(self, *args):
        return _pysvtk.svtkImageData_SetDirectionMatrix(self, *args)

    def GetIndexToPhysicalMatrix(self):
        return _pysvtk.svtkImageData_GetIndexToPhysicalMatrix(self)

    def TransformIndexToPhysicalPoint(self, *args):
        return _pysvtk.svtkImageData_TransformIndexToPhysicalPoint(self, *args)

    @staticmethod
    def TransformContinuousIndexToPhysicalPoint(*args):
        return _pysvtk.svtkImageData_TransformContinuousIndexToPhysicalPoint(*args)

    def GetPhysicalToIndexMatrix(self):
        return _pysvtk.svtkImageData_GetPhysicalToIndexMatrix(self)

    def TransformPhysicalPointToContinuousIndex(self, *args):
        return _pysvtk.svtkImageData_TransformPhysicalPointToContinuousIndex(self, *args)

    @staticmethod
    def ComputeIndexToPhysicalMatrix(origin, spacing, direction, result):
        return _pysvtk.svtkImageData_ComputeIndexToPhysicalMatrix(origin, spacing, direction, result)

    def TransformPhysicalNormalToContinuousIndex(self, xyz, ijk):
        return _pysvtk.svtkImageData_TransformPhysicalNormalToContinuousIndex(self, xyz, ijk)

    def TransformPhysicalPlaneToContinuousIndex(self, pplane, iplane):
        return _pysvtk.svtkImageData_TransformPhysicalPlaneToContinuousIndex(self, pplane, iplane)

    @staticmethod
    def SetScalarType(arg1, meta_data):
        return _pysvtk.svtkImageData_SetScalarType(arg1, meta_data)

    @staticmethod
    def HasScalarType(meta_data):
        return _pysvtk.svtkImageData_HasScalarType(meta_data)

    def GetScalarType(self, *args):
        return _pysvtk.svtkImageData_GetScalarType(self, *args)

    def GetScalarTypeAsString(self):
        return _pysvtk.svtkImageData_GetScalarTypeAsString(self)

    @staticmethod
    def SetNumberOfScalarComponents(n, meta_data):
        return _pysvtk.svtkImageData_SetNumberOfScalarComponents(n, meta_data)

    @staticmethod
    def HasNumberOfScalarComponents(meta_data):
        return _pysvtk.svtkImageData_HasNumberOfScalarComponents(meta_data)

    def GetNumberOfScalarComponents(self, *args):
        return _pysvtk.svtkImageData_GetNumberOfScalarComponents(self, *args)

    def CopyInformationFromPipeline(self, information):
        return _pysvtk.svtkImageData_CopyInformationFromPipeline(self, information)

    def CopyInformationToPipeline(self, information):
        return _pysvtk.svtkImageData_CopyInformationToPipeline(self, information)

    def PrepareForNewData(self):
        return _pysvtk.svtkImageData_PrepareForNewData(self)

    def ShallowCopy(self, src):
        return _pysvtk.svtkImageData_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkImageData_DeepCopy(self, src)

    def GetArrayPointerForExtent(self, array, extent):
        return _pysvtk.svtkImageData_GetArrayPointerForExtent(self, array, extent)

    def GetArrayPointer(self, array, coordinates):
        return _pysvtk.svtkImageData_GetArrayPointer(self, array, coordinates)

    def GetArrayIncrements(self, array, increments):
        return _pysvtk.svtkImageData_GetArrayIncrements(self, array, increments)

    def ComputeInternalExtent(self, intExt, tgtExt, bnds):
        return _pysvtk.svtkImageData_ComputeInternalExtent(self, intExt, tgtExt, bnds)

    def GetExtentType(self):
        return _pysvtk.svtkImageData_GetExtentType(self)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkImageData_GetData(*args)
    __swig_destroy__ = _pysvtk.delete_svtkImageData

    def __init__(self):
        _pysvtk.svtkImageData_swiginit(self, _pysvtk.new_svtkImageData())

    def __str__(self):
        return _pysvtk.svtkImageData___str__(self)

# Register svtkImageData in _pysvtk:
_pysvtk.svtkImageData_swigregister(svtkImageData)
class svtkUniformGrid(svtkImageData):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkUniformGrid_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkUniformGrid_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkUniformGrid_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkUniformGrid_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkUniformGrid_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkUniformGrid_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkUniformGrid_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkUniformGrid_PrintSelf(self, os, indent)

    def CopyStructure(self, ds):
        return _pysvtk.svtkUniformGrid_CopyStructure(self, ds)

    def GetDataObjectType(self):
        return _pysvtk.svtkUniformGrid_GetDataObjectType(self)

    def GetCell(self, *args):
        return _pysvtk.svtkUniformGrid_GetCell(self, *args)

    def FindCell(self, *args):
        return _pysvtk.svtkUniformGrid_FindCell(self, *args)

    def FindAndGetCell(self, x, cell, cellId, tol2, subId, pcoords, weights):
        return _pysvtk.svtkUniformGrid_FindAndGetCell(self, x, cell, cellId, tol2, subId, pcoords, weights)

    def GetCellType(self, cellId):
        return _pysvtk.svtkUniformGrid_GetCellType(self, cellId)

    def GetCellPoints(self, cellId, ptIds):
        return _pysvtk.svtkUniformGrid_GetCellPoints(self, cellId, ptIds)

    def GetPointCells(self, ptId, cellIds):
        return _pysvtk.svtkUniformGrid_GetPointCells(self, ptId, cellIds)

    def GetMaxCellSize(self):
        return _pysvtk.svtkUniformGrid_GetMaxCellSize(self)

    def GetGridDescription(self):
        return _pysvtk.svtkUniformGrid_GetGridDescription(self)

    def Initialize(self, *args):
        return _pysvtk.svtkUniformGrid_Initialize(self, *args)

    def BlankPoint(self, *args):
        return _pysvtk.svtkUniformGrid_BlankPoint(self, *args)

    def UnBlankPoint(self, *args):
        return _pysvtk.svtkUniformGrid_UnBlankPoint(self, *args)

    def BlankCell(self, *args):
        return _pysvtk.svtkUniformGrid_BlankCell(self, *args)

    def UnBlankCell(self, *args):
        return _pysvtk.svtkUniformGrid_UnBlankCell(self, *args)

    def HasAnyBlankCells(self):
        return _pysvtk.svtkUniformGrid_HasAnyBlankCells(self)

    def HasAnyBlankPoints(self):
        return _pysvtk.svtkUniformGrid_HasAnyBlankPoints(self)

    def IsPointVisible(self, ptId):
        return _pysvtk.svtkUniformGrid_IsPointVisible(self, ptId)

    def IsCellVisible(self, cellId):
        return _pysvtk.svtkUniformGrid_IsCellVisible(self, cellId)

    def NewImageDataCopy(self):
        return _pysvtk.svtkUniformGrid_NewImageDataCopy(self)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkUniformGrid_GetData(*args)
    __swig_destroy__ = _pysvtk.delete_svtkUniformGrid

    def __init__(self):
        _pysvtk.svtkUniformGrid_swiginit(self, _pysvtk.new_svtkUniformGrid())

    def __str__(self):
        return _pysvtk.svtkUniformGrid___str__(self)

# Register svtkUniformGrid in _pysvtk:
_pysvtk.svtkUniformGrid_swigregister(svtkUniformGrid)
class svtkRectilinearGrid(svtkDataSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkRectilinearGrid_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkRectilinearGrid_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkRectilinearGrid_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkRectilinearGrid_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkRectilinearGrid_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkRectilinearGrid_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkRectilinearGrid_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkRectilinearGrid_PrintSelf(self, os, indent)

    def GetDataObjectType(self):
        return _pysvtk.svtkRectilinearGrid_GetDataObjectType(self)

    def CopyStructure(self, ds):
        return _pysvtk.svtkRectilinearGrid_CopyStructure(self, ds)

    def Initialize(self):
        return _pysvtk.svtkRectilinearGrid_Initialize(self)

    def GetNumberOfCells(self):
        return _pysvtk.svtkRectilinearGrid_GetNumberOfCells(self)

    def GetNumberOfPoints(self):
        return _pysvtk.svtkRectilinearGrid_GetNumberOfPoints(self)

    def GetCell(self, *args):
        return _pysvtk.svtkRectilinearGrid_GetCell(self, *args)

    def GetCellBounds(self, cellId, bounds):
        return _pysvtk.svtkRectilinearGrid_GetCellBounds(self, cellId, bounds)

    def FindPoint(self, *args):
        return _pysvtk.svtkRectilinearGrid_FindPoint(self, *args)

    def FindCell(self, *args):
        return _pysvtk.svtkRectilinearGrid_FindCell(self, *args)

    def FindAndGetCell(self, x, cell, cellId, tol2, subId, pcoords, weights):
        return _pysvtk.svtkRectilinearGrid_FindAndGetCell(self, x, cell, cellId, tol2, subId, pcoords, weights)

    def GetCellType(self, cellId):
        return _pysvtk.svtkRectilinearGrid_GetCellType(self, cellId)

    def GetCellPoints(self, cellId, ptIds):
        return _pysvtk.svtkRectilinearGrid_GetCellPoints(self, cellId, ptIds)

    def GetPointCells(self, ptId, cellIds):
        return _pysvtk.svtkRectilinearGrid_GetPointCells(self, ptId, cellIds)

    def ComputeBounds(self):
        return _pysvtk.svtkRectilinearGrid_ComputeBounds(self)

    def GetMaxCellSize(self):
        return _pysvtk.svtkRectilinearGrid_GetMaxCellSize(self)

    def GetCellNeighbors(self, cellId, ptIds, cellIds):
        return _pysvtk.svtkRectilinearGrid_GetCellNeighbors(self, cellId, ptIds, cellIds)

    def GetPoints(self, pnts):
        return _pysvtk.svtkRectilinearGrid_GetPoints(self, pnts)

    def SetDimensions(self, *args):
        return _pysvtk.svtkRectilinearGrid_SetDimensions(self, *args)

    def GetDimensions(self, *args):
        return _pysvtk.svtkRectilinearGrid_GetDimensions(self, *args)

    def GetDataDimension(self):
        return _pysvtk.svtkRectilinearGrid_GetDataDimension(self)

    def ComputeStructuredCoordinates(self, x, ijk, pcoords):
        return _pysvtk.svtkRectilinearGrid_ComputeStructuredCoordinates(self, x, ijk, pcoords)

    def ComputePointId(self, ijk):
        return _pysvtk.svtkRectilinearGrid_ComputePointId(self, ijk)

    def ComputeCellId(self, ijk):
        return _pysvtk.svtkRectilinearGrid_ComputeCellId(self, ijk)

    def GetPoint(self, *args):
        return _pysvtk.svtkRectilinearGrid_GetPoint(self, *args)

    def SetXCoordinates(self, arg2):
        return _pysvtk.svtkRectilinearGrid_SetXCoordinates(self, arg2)

    def GetXCoordinates(self):
        return _pysvtk.svtkRectilinearGrid_GetXCoordinates(self)

    def SetYCoordinates(self, arg2):
        return _pysvtk.svtkRectilinearGrid_SetYCoordinates(self, arg2)

    def GetYCoordinates(self):
        return _pysvtk.svtkRectilinearGrid_GetYCoordinates(self)

    def SetZCoordinates(self, arg2):
        return _pysvtk.svtkRectilinearGrid_SetZCoordinates(self, arg2)

    def GetZCoordinates(self):
        return _pysvtk.svtkRectilinearGrid_GetZCoordinates(self)

    def SetExtent(self, *args):
        return _pysvtk.svtkRectilinearGrid_SetExtent(self, *args)

    def GetExtent(self, *args):
        return _pysvtk.svtkRectilinearGrid_GetExtent(self, *args)

    def GetActualMemorySize(self):
        return _pysvtk.svtkRectilinearGrid_GetActualMemorySize(self)

    def ShallowCopy(self, src):
        return _pysvtk.svtkRectilinearGrid_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkRectilinearGrid_DeepCopy(self, src)

    def GetExtentType(self):
        return _pysvtk.svtkRectilinearGrid_GetExtentType(self)

    def Crop(self, updateExtent):
        return _pysvtk.svtkRectilinearGrid_Crop(self, updateExtent)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkRectilinearGrid_GetData(*args)
    __swig_destroy__ = _pysvtk.delete_svtkRectilinearGrid

    def __init__(self):
        _pysvtk.svtkRectilinearGrid_swiginit(self, _pysvtk.new_svtkRectilinearGrid())

    def __str__(self):
        return _pysvtk.svtkRectilinearGrid___str__(self)

# Register svtkRectilinearGrid in _pysvtk:
_pysvtk.svtkRectilinearGrid_swigregister(svtkRectilinearGrid)
class svtkStructuredGrid(svtkPointSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkStructuredGrid_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkStructuredGrid_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkStructuredGrid_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkStructuredGrid_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkStructuredGrid_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkStructuredGrid_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkStructuredGrid_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkStructuredGrid_PrintSelf(self, os, indent)

    def GetDataObjectType(self):
        return _pysvtk.svtkStructuredGrid_GetDataObjectType(self)

    def CopyStructure(self, ds):
        return _pysvtk.svtkStructuredGrid_CopyStructure(self, ds)

    def GetNumberOfPoints(self):
        return _pysvtk.svtkStructuredGrid_GetNumberOfPoints(self)

    def GetCell(self, *args):
        return _pysvtk.svtkStructuredGrid_GetCell(self, *args)

    def GetCellBounds(self, cellId, bounds):
        return _pysvtk.svtkStructuredGrid_GetCellBounds(self, cellId, bounds)

    def GetCellType(self, cellId):
        return _pysvtk.svtkStructuredGrid_GetCellType(self, cellId)

    def GetNumberOfCells(self):
        return _pysvtk.svtkStructuredGrid_GetNumberOfCells(self)

    def GetCellPoints(self, cellId, ptIds):
        return _pysvtk.svtkStructuredGrid_GetCellPoints(self, cellId, ptIds)

    def GetPointCells(self, ptId, cellIds):
        return _pysvtk.svtkStructuredGrid_GetPointCells(self, ptId, cellIds)

    def Initialize(self):
        return _pysvtk.svtkStructuredGrid_Initialize(self)

    def GetMaxCellSize(self):
        return _pysvtk.svtkStructuredGrid_GetMaxCellSize(self)

    def GetCellNeighbors(self, *args):
        return _pysvtk.svtkStructuredGrid_GetCellNeighbors(self, *args)

    def SetDimensions(self, *args):
        return _pysvtk.svtkStructuredGrid_SetDimensions(self, *args)

    def GetDimensions(self, *args):
        return _pysvtk.svtkStructuredGrid_GetDimensions(self, *args)

    def GetDataDimension(self):
        return _pysvtk.svtkStructuredGrid_GetDataDimension(self)

    def SetExtent(self, *args):
        return _pysvtk.svtkStructuredGrid_SetExtent(self, *args)

    def GetExtent(self, *args):
        return _pysvtk.svtkStructuredGrid_GetExtent(self, *args)

    def GetActualMemorySize(self):
        return _pysvtk.svtkStructuredGrid_GetActualMemorySize(self)

    def ShallowCopy(self, src):
        return _pysvtk.svtkStructuredGrid_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkStructuredGrid_DeepCopy(self, src)

    def GetExtentType(self):
        return _pysvtk.svtkStructuredGrid_GetExtentType(self)

    def BlankPoint(self, ptId):
        return _pysvtk.svtkStructuredGrid_BlankPoint(self, ptId)

    def UnBlankPoint(self, ptId):
        return _pysvtk.svtkStructuredGrid_UnBlankPoint(self, ptId)

    def BlankCell(self, ptId):
        return _pysvtk.svtkStructuredGrid_BlankCell(self, ptId)

    def UnBlankCell(self, ptId):
        return _pysvtk.svtkStructuredGrid_UnBlankCell(self, ptId)

    def IsPointVisible(self, ptId):
        return _pysvtk.svtkStructuredGrid_IsPointVisible(self, ptId)

    def IsCellVisible(self, cellId):
        return _pysvtk.svtkStructuredGrid_IsCellVisible(self, cellId)

    def HasAnyBlankPoints(self):
        return _pysvtk.svtkStructuredGrid_HasAnyBlankPoints(self)

    def HasAnyBlankCells(self):
        return _pysvtk.svtkStructuredGrid_HasAnyBlankCells(self)

    def GetCellDims(self, cellDims):
        return _pysvtk.svtkStructuredGrid_GetCellDims(self, cellDims)

    def Crop(self, updateExtent):
        return _pysvtk.svtkStructuredGrid_Crop(self, updateExtent)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkStructuredGrid_GetData(*args)

    def GetPoint(self, *args):
        return _pysvtk.svtkStructuredGrid_GetPoint(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkStructuredGrid

    def __init__(self):
        _pysvtk.svtkStructuredGrid_swiginit(self, _pysvtk.new_svtkStructuredGrid())

    def __str__(self):
        return _pysvtk.svtkStructuredGrid___str__(self)

# Register svtkStructuredGrid in _pysvtk:
_pysvtk.svtkStructuredGrid_swigregister(svtkStructuredGrid)
class svtkPolyData(svtkPointSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkPolyData_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkPolyData_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkPolyData_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkPolyData_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkPolyData_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkPolyData_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkPolyData_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkPolyData_PrintSelf(self, os, indent)

    def GetDataObjectType(self):
        return _pysvtk.svtkPolyData_GetDataObjectType(self)

    def CopyStructure(self, ds):
        return _pysvtk.svtkPolyData_CopyStructure(self, ds)

    def GetNumberOfCells(self):
        return _pysvtk.svtkPolyData_GetNumberOfCells(self)

    def GetCellType(self, cellId):
        return _pysvtk.svtkPolyData_GetCellType(self, cellId)

    def GetCellBounds(self, cellId, bounds):
        return _pysvtk.svtkPolyData_GetCellBounds(self, cellId, bounds)

    def GetCellNeighbors(self, cellId, ptIds, cellIds):
        return _pysvtk.svtkPolyData_GetCellNeighbors(self, cellId, ptIds, cellIds)

    def CopyCells(self, pd, idList, locator=None):
        return _pysvtk.svtkPolyData_CopyCells(self, pd, idList, locator)

    def ComputeBounds(self):
        return _pysvtk.svtkPolyData_ComputeBounds(self)

    def Squeeze(self):
        return _pysvtk.svtkPolyData_Squeeze(self)

    def GetMaxCellSize(self):
        return _pysvtk.svtkPolyData_GetMaxCellSize(self)

    def SetVerts(self, v):
        return _pysvtk.svtkPolyData_SetVerts(self, v)

    def GetVerts(self):
        return _pysvtk.svtkPolyData_GetVerts(self)

    def SetLines(self, l):
        return _pysvtk.svtkPolyData_SetLines(self, l)

    def GetLines(self):
        return _pysvtk.svtkPolyData_GetLines(self)

    def SetPolys(self, p):
        return _pysvtk.svtkPolyData_SetPolys(self, p)

    def GetPolys(self):
        return _pysvtk.svtkPolyData_GetPolys(self)

    def SetStrips(self, s):
        return _pysvtk.svtkPolyData_SetStrips(self, s)

    def GetStrips(self):
        return _pysvtk.svtkPolyData_GetStrips(self)

    def GetNumberOfVerts(self):
        return _pysvtk.svtkPolyData_GetNumberOfVerts(self)

    def GetNumberOfLines(self):
        return _pysvtk.svtkPolyData_GetNumberOfLines(self)

    def GetNumberOfPolys(self):
        return _pysvtk.svtkPolyData_GetNumberOfPolys(self)

    def GetNumberOfStrips(self):
        return _pysvtk.svtkPolyData_GetNumberOfStrips(self)

    def AllocateEstimate(self, *args):
        return _pysvtk.svtkPolyData_AllocateEstimate(self, *args)

    def AllocateExact(self, *args):
        return _pysvtk.svtkPolyData_AllocateExact(self, *args)

    def AllocateCopy(self, pd):
        return _pysvtk.svtkPolyData_AllocateCopy(self, pd)

    def AllocateProportional(self, pd, ratio):
        return _pysvtk.svtkPolyData_AllocateProportional(self, pd, ratio)

    def Allocate(self, *args):
        return _pysvtk.svtkPolyData_Allocate(self, *args)

    def InsertNextCell(self, *args):
        return _pysvtk.svtkPolyData_InsertNextCell(self, *args)

    def Reset(self):
        return _pysvtk.svtkPolyData_Reset(self)

    def BuildCells(self):
        return _pysvtk.svtkPolyData_BuildCells(self)

    def NeedToBuildCells(self):
        return _pysvtk.svtkPolyData_NeedToBuildCells(self)

    def BuildLinks(self, initialSize=0):
        return _pysvtk.svtkPolyData_BuildLinks(self, initialSize)

    def DeleteCells(self):
        return _pysvtk.svtkPolyData_DeleteCells(self)

    def DeleteLinks(self):
        return _pysvtk.svtkPolyData_DeleteLinks(self)

    def GetPointCells(self, *args):
        return _pysvtk.svtkPolyData_GetPointCells(self, *args)

    def GetCellEdgeNeighbors(self, cellId, p1, p2, cellIds):
        return _pysvtk.svtkPolyData_GetCellEdgeNeighbors(self, cellId, p1, p2, cellIds)

    def GetCellPoints(self, *args):
        return _pysvtk.svtkPolyData_GetCellPoints(self, *args)

    def IsTriangle(self, v1, v2, v3):
        return _pysvtk.svtkPolyData_IsTriangle(self, v1, v2, v3)

    def IsEdge(self, p1, p2):
        return _pysvtk.svtkPolyData_IsEdge(self, p1, p2)

    def IsPointUsedByCell(self, ptId, cellId):
        return _pysvtk.svtkPolyData_IsPointUsedByCell(self, ptId, cellId)

    def ReplaceCell(self, *args):
        return _pysvtk.svtkPolyData_ReplaceCell(self, *args)

    def ReplaceCellPoint(self, cellId, oldPtId, newPtId):
        return _pysvtk.svtkPolyData_ReplaceCellPoint(self, cellId, oldPtId, newPtId)

    def ReverseCell(self, cellId):
        return _pysvtk.svtkPolyData_ReverseCell(self, cellId)

    def DeletePoint(self, ptId):
        return _pysvtk.svtkPolyData_DeletePoint(self, ptId)

    def DeleteCell(self, cellId):
        return _pysvtk.svtkPolyData_DeleteCell(self, cellId)

    def RemoveDeletedCells(self):
        return _pysvtk.svtkPolyData_RemoveDeletedCells(self)

    def InsertNextLinkedPoint(self, *args):
        return _pysvtk.svtkPolyData_InsertNextLinkedPoint(self, *args)

    def InsertNextLinkedCell(self, type, npts, pts):
        return _pysvtk.svtkPolyData_InsertNextLinkedCell(self, type, npts, pts)

    def ReplaceLinkedCell(self, cellId, npts, pts):
        return _pysvtk.svtkPolyData_ReplaceLinkedCell(self, cellId, npts, pts)

    def RemoveCellReference(self, cellId):
        return _pysvtk.svtkPolyData_RemoveCellReference(self, cellId)

    def AddCellReference(self, cellId):
        return _pysvtk.svtkPolyData_AddCellReference(self, cellId)

    def RemoveReferenceToCell(self, ptId, cellId):
        return _pysvtk.svtkPolyData_RemoveReferenceToCell(self, ptId, cellId)

    def AddReferenceToCell(self, ptId, cellId):
        return _pysvtk.svtkPolyData_AddReferenceToCell(self, ptId, cellId)

    def ResizeCellList(self, ptId, size):
        return _pysvtk.svtkPolyData_ResizeCellList(self, ptId, size)

    def Initialize(self):
        return _pysvtk.svtkPolyData_Initialize(self)

    def GetPiece(self):
        return _pysvtk.svtkPolyData_GetPiece(self)

    def GetNumberOfPieces(self):
        return _pysvtk.svtkPolyData_GetNumberOfPieces(self)

    def GetGhostLevel(self):
        return _pysvtk.svtkPolyData_GetGhostLevel(self)

    def GetActualMemorySize(self):
        return _pysvtk.svtkPolyData_GetActualMemorySize(self)

    def ShallowCopy(self, src):
        return _pysvtk.svtkPolyData_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkPolyData_DeepCopy(self, src)

    def RemoveGhostCells(self):
        return _pysvtk.svtkPolyData_RemoveGhostCells(self)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkPolyData_GetData(*args)
    ERR_NO_SUCH_FIELD = _pysvtk.svtkPolyData_ERR_NO_SUCH_FIELD
    ERR_INCORRECT_FIELD = _pysvtk.svtkPolyData_ERR_INCORRECT_FIELD
    ERR_NON_MANIFOLD_STAR = _pysvtk.svtkPolyData_ERR_NON_MANIFOLD_STAR
    REGULAR_POINT = _pysvtk.svtkPolyData_REGULAR_POINT
    MINIMUM = _pysvtk.svtkPolyData_MINIMUM
    SADDLE = _pysvtk.svtkPolyData_SADDLE
    MAXIMUM = _pysvtk.svtkPolyData_MAXIMUM

    def GetScalarFieldCriticalIndex(self, *args):
        return _pysvtk.svtkPolyData_GetScalarFieldCriticalIndex(self, *args)

    def GetMeshMTime(self):
        return _pysvtk.svtkPolyData_GetMeshMTime(self)

    def GetMTime(self):
        return _pysvtk.svtkPolyData_GetMTime(self)

    def GetCell(self, *args):
        return _pysvtk.svtkPolyData_GetCell(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkPolyData

    def __init__(self):
        _pysvtk.svtkPolyData_swiginit(self, _pysvtk.new_svtkPolyData())

    def __str__(self):
        return _pysvtk.svtkPolyData___str__(self)

# Register svtkPolyData in _pysvtk:
_pysvtk.svtkPolyData_swigregister(svtkPolyData)
class svtkUnstructuredGridBase(svtkPointSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkUnstructuredGridBase_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkUnstructuredGridBase_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkUnstructuredGridBase_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkUnstructuredGridBase_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkUnstructuredGridBase_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkUnstructuredGridBase_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkUnstructuredGridBase_PrintSelf(self, os, indent)

    def GetDataObjectType(self):
        return _pysvtk.svtkUnstructuredGridBase_GetDataObjectType(self)

    def Allocate(self, numCells=1000, extSize=1000):
        return _pysvtk.svtkUnstructuredGridBase_Allocate(self, numCells, extSize)

    def DeepCopy(self, src):
        return _pysvtk.svtkUnstructuredGridBase_DeepCopy(self, src)

    def InsertNextCell(self, *args):
        return _pysvtk.svtkUnstructuredGridBase_InsertNextCell(self, *args)

    def ReplaceCell(self, cellId, npts, pts):
        return _pysvtk.svtkUnstructuredGridBase_ReplaceCell(self, cellId, npts, pts)

    def GetIdsOfCellsOfType(self, type, array):
        return _pysvtk.svtkUnstructuredGridBase_GetIdsOfCellsOfType(self, type, array)

    def IsHomogeneous(self):
        return _pysvtk.svtkUnstructuredGridBase_IsHomogeneous(self)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkUnstructuredGridBase_GetData(*args)
    __swig_destroy__ = _pysvtk.delete_svtkUnstructuredGridBase

    def __str__(self):
        return _pysvtk.svtkUnstructuredGridBase___str__(self)

# Register svtkUnstructuredGridBase in _pysvtk:
_pysvtk.svtkUnstructuredGridBase_swigregister(svtkUnstructuredGridBase)
class svtkUnstructuredGrid(svtkUnstructuredGridBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkUnstructuredGrid_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkUnstructuredGrid_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkUnstructuredGrid_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkUnstructuredGrid_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkUnstructuredGrid_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkUnstructuredGrid_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkUnstructuredGrid_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkUnstructuredGrid_PrintSelf(self, os, indent)

    def GetDataObjectType(self):
        return _pysvtk.svtkUnstructuredGrid_GetDataObjectType(self)

    def AllocateEstimate(self, numCells, maxCellSize):
        return _pysvtk.svtkUnstructuredGrid_AllocateEstimate(self, numCells, maxCellSize)

    def AllocateExact(self, numCells, connectivitySize):
        return _pysvtk.svtkUnstructuredGrid_AllocateExact(self, numCells, connectivitySize)

    def Allocate(self, numCells=1000, arg3=1000):
        return _pysvtk.svtkUnstructuredGrid_Allocate(self, numCells, arg3)

    def Reset(self):
        return _pysvtk.svtkUnstructuredGrid_Reset(self)

    def CopyStructure(self, ds):
        return _pysvtk.svtkUnstructuredGrid_CopyStructure(self, ds)

    def GetNumberOfCells(self):
        return _pysvtk.svtkUnstructuredGrid_GetNumberOfCells(self)

    def GetCell(self, *args):
        return _pysvtk.svtkUnstructuredGrid_GetCell(self, *args)

    def GetCellBounds(self, cellId, bounds):
        return _pysvtk.svtkUnstructuredGrid_GetCellBounds(self, cellId, bounds)

    def NewCellIterator(self):
        return _pysvtk.svtkUnstructuredGrid_NewCellIterator(self)

    def GetCellType(self, cellId):
        return _pysvtk.svtkUnstructuredGrid_GetCellType(self, cellId)

    def GetCellTypes(self, types):
        return _pysvtk.svtkUnstructuredGrid_GetCellTypes(self, types)

    def GetCellPoints(self, *args):
        return _pysvtk.svtkUnstructuredGrid_GetCellPoints(self, *args)

    def GetPointCells(self, *args):
        return _pysvtk.svtkUnstructuredGrid_GetPointCells(self, *args)

    def GetCellTypesArray(self):
        return _pysvtk.svtkUnstructuredGrid_GetCellTypesArray(self)

    def Squeeze(self):
        return _pysvtk.svtkUnstructuredGrid_Squeeze(self)

    def Initialize(self):
        return _pysvtk.svtkUnstructuredGrid_Initialize(self)

    def GetMaxCellSize(self):
        return _pysvtk.svtkUnstructuredGrid_GetMaxCellSize(self)

    def BuildLinks(self):
        return _pysvtk.svtkUnstructuredGrid_BuildLinks(self)

    def GetCellLinks(self):
        return _pysvtk.svtkUnstructuredGrid_GetCellLinks(self)

    def GetFaceStream(self, *args):
        return _pysvtk.svtkUnstructuredGrid_GetFaceStream(self, *args)

    def GetCells(self):
        return _pysvtk.svtkUnstructuredGrid_GetCells(self)

    def GetCellNeighbors(self, cellId, ptIds, cellIds):
        return _pysvtk.svtkUnstructuredGrid_GetCellNeighbors(self, cellId, ptIds, cellIds)

    def InsertNextLinkedCell(self, type, npts, pts):
        return _pysvtk.svtkUnstructuredGrid_InsertNextLinkedCell(self, type, npts, pts)

    def RemoveReferenceToCell(self, ptId, cellId):
        return _pysvtk.svtkUnstructuredGrid_RemoveReferenceToCell(self, ptId, cellId)

    def AddReferenceToCell(self, ptId, cellId):
        return _pysvtk.svtkUnstructuredGrid_AddReferenceToCell(self, ptId, cellId)

    def ResizeCellList(self, ptId, size):
        return _pysvtk.svtkUnstructuredGrid_ResizeCellList(self, ptId, size)

    def GetPiece(self):
        return _pysvtk.svtkUnstructuredGrid_GetPiece(self)

    def GetNumberOfPieces(self):
        return _pysvtk.svtkUnstructuredGrid_GetNumberOfPieces(self)

    def GetGhostLevel(self):
        return _pysvtk.svtkUnstructuredGrid_GetGhostLevel(self)

    def GetActualMemorySize(self):
        return _pysvtk.svtkUnstructuredGrid_GetActualMemorySize(self)

    def ShallowCopy(self, src):
        return _pysvtk.svtkUnstructuredGrid_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkUnstructuredGrid_DeepCopy(self, src)

    def GetIdsOfCellsOfType(self, type, array):
        return _pysvtk.svtkUnstructuredGrid_GetIdsOfCellsOfType(self, type, array)

    def IsHomogeneous(self):
        return _pysvtk.svtkUnstructuredGrid_IsHomogeneous(self)

    def RemoveGhostCells(self):
        return _pysvtk.svtkUnstructuredGrid_RemoveGhostCells(self)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkUnstructuredGrid_GetData(*args)

    def GetFaces(self, *args):
        return _pysvtk.svtkUnstructuredGrid_GetFaces(self, *args)

    def GetFaceLocations(self):
        return _pysvtk.svtkUnstructuredGrid_GetFaceLocations(self)

    def InitializeFacesRepresentation(self, numPrevCells):
        return _pysvtk.svtkUnstructuredGrid_InitializeFacesRepresentation(self, numPrevCells)

    def GetMeshMTime(self):
        return _pysvtk.svtkUnstructuredGrid_GetMeshMTime(self)

    @staticmethod
    def DecomposeAPolyhedronCell(*args):
        return _pysvtk.svtkUnstructuredGrid_DecomposeAPolyhedronCell(*args)

    @staticmethod
    def ConvertFaceStreamPointIds(*args):
        return _pysvtk.svtkUnstructuredGrid_ConvertFaceStreamPointIds(*args)

    def GetCellLocationsArray(self):
        return _pysvtk.svtkUnstructuredGrid_GetCellLocationsArray(self)

    def SetCells(self, *args):
        return _pysvtk.svtkUnstructuredGrid_SetCells(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkUnstructuredGrid

    def __init__(self):
        _pysvtk.svtkUnstructuredGrid_swiginit(self, _pysvtk.new_svtkUnstructuredGrid())

    def __str__(self):
        return _pysvtk.svtkUnstructuredGrid___str__(self)

# Register svtkUnstructuredGrid in _pysvtk:
_pysvtk.svtkUnstructuredGrid_swigregister(svtkUnstructuredGrid)
class svtkCompositeDataIterator(svtkObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkCompositeDataIterator_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkCompositeDataIterator_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkCompositeDataIterator_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkCompositeDataIterator_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkCompositeDataIterator_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkCompositeDataIterator_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkCompositeDataIterator_PrintSelf(self, os, indent)

    def SetDataSet(self, ds):
        return _pysvtk.svtkCompositeDataIterator_SetDataSet(self, ds)

    def GetDataSet(self):
        return _pysvtk.svtkCompositeDataIterator_GetDataSet(self)

    def InitTraversal(self):
        return _pysvtk.svtkCompositeDataIterator_InitTraversal(self)

    def InitReverseTraversal(self):
        return _pysvtk.svtkCompositeDataIterator_InitReverseTraversal(self)

    def GoToFirstItem(self):
        return _pysvtk.svtkCompositeDataIterator_GoToFirstItem(self)

    def GoToNextItem(self):
        return _pysvtk.svtkCompositeDataIterator_GoToNextItem(self)

    def IsDoneWithTraversal(self):
        return _pysvtk.svtkCompositeDataIterator_IsDoneWithTraversal(self)

    def GetCurrentDataObject(self):
        return _pysvtk.svtkCompositeDataIterator_GetCurrentDataObject(self)

    def GetCurrentMetaData(self):
        return _pysvtk.svtkCompositeDataIterator_GetCurrentMetaData(self)

    def HasCurrentMetaData(self):
        return _pysvtk.svtkCompositeDataIterator_HasCurrentMetaData(self)

    def SetSkipEmptyNodes(self, _arg):
        return _pysvtk.svtkCompositeDataIterator_SetSkipEmptyNodes(self, _arg)

    def GetSkipEmptyNodes(self):
        return _pysvtk.svtkCompositeDataIterator_GetSkipEmptyNodes(self)

    def SkipEmptyNodesOn(self):
        return _pysvtk.svtkCompositeDataIterator_SkipEmptyNodesOn(self)

    def SkipEmptyNodesOff(self):
        return _pysvtk.svtkCompositeDataIterator_SkipEmptyNodesOff(self)

    def GetCurrentFlatIndex(self):
        return _pysvtk.svtkCompositeDataIterator_GetCurrentFlatIndex(self)

    def GetReverse(self):
        return _pysvtk.svtkCompositeDataIterator_GetReverse(self)
    __swig_destroy__ = _pysvtk.delete_svtkCompositeDataIterator

    def __str__(self):
        return _pysvtk.svtkCompositeDataIterator___str__(self)

# Register svtkCompositeDataIterator in _pysvtk:
_pysvtk.svtkCompositeDataIterator_swigregister(svtkCompositeDataIterator)
class svtkDataObjectTreeIterator(svtkCompositeDataIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkDataObjectTreeIterator_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkDataObjectTreeIterator_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkDataObjectTreeIterator_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkDataObjectTreeIterator_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkDataObjectTreeIterator_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkDataObjectTreeIterator_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkDataObjectTreeIterator_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkDataObjectTreeIterator_PrintSelf(self, os, indent)

    def GoToFirstItem(self):
        return _pysvtk.svtkDataObjectTreeIterator_GoToFirstItem(self)

    def GoToNextItem(self):
        return _pysvtk.svtkDataObjectTreeIterator_GoToNextItem(self)

    def IsDoneWithTraversal(self):
        return _pysvtk.svtkDataObjectTreeIterator_IsDoneWithTraversal(self)

    def GetCurrentDataObject(self):
        return _pysvtk.svtkDataObjectTreeIterator_GetCurrentDataObject(self)

    def GetCurrentMetaData(self):
        return _pysvtk.svtkDataObjectTreeIterator_GetCurrentMetaData(self)

    def HasCurrentMetaData(self):
        return _pysvtk.svtkDataObjectTreeIterator_HasCurrentMetaData(self)

    def GetCurrentFlatIndex(self):
        return _pysvtk.svtkDataObjectTreeIterator_GetCurrentFlatIndex(self)

    def SetVisitOnlyLeaves(self, _arg):
        return _pysvtk.svtkDataObjectTreeIterator_SetVisitOnlyLeaves(self, _arg)

    def GetVisitOnlyLeaves(self):
        return _pysvtk.svtkDataObjectTreeIterator_GetVisitOnlyLeaves(self)

    def VisitOnlyLeavesOn(self):
        return _pysvtk.svtkDataObjectTreeIterator_VisitOnlyLeavesOn(self)

    def VisitOnlyLeavesOff(self):
        return _pysvtk.svtkDataObjectTreeIterator_VisitOnlyLeavesOff(self)

    def SetTraverseSubTree(self, _arg):
        return _pysvtk.svtkDataObjectTreeIterator_SetTraverseSubTree(self, _arg)

    def GetTraverseSubTree(self):
        return _pysvtk.svtkDataObjectTreeIterator_GetTraverseSubTree(self)

    def TraverseSubTreeOn(self):
        return _pysvtk.svtkDataObjectTreeIterator_TraverseSubTreeOn(self)

    def TraverseSubTreeOff(self):
        return _pysvtk.svtkDataObjectTreeIterator_TraverseSubTreeOff(self)
    __swig_destroy__ = _pysvtk.delete_svtkDataObjectTreeIterator

    def __init__(self):
        _pysvtk.svtkDataObjectTreeIterator_swiginit(self, _pysvtk.new_svtkDataObjectTreeIterator())

    def __str__(self):
        return _pysvtk.svtkDataObjectTreeIterator___str__(self)

# Register svtkDataObjectTreeIterator in _pysvtk:
_pysvtk.svtkDataObjectTreeIterator_swigregister(svtkDataObjectTreeIterator)
class svtkUniformGridAMRDataIterator(svtkCompositeDataIterator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkUniformGridAMRDataIterator_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkUniformGridAMRDataIterator_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkUniformGridAMRDataIterator_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkUniformGridAMRDataIterator_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkUniformGridAMRDataIterator_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkUniformGridAMRDataIterator_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkUniformGridAMRDataIterator_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkUniformGridAMRDataIterator_PrintSelf(self, os, indent)

    def GetCurrentMetaData(self):
        return _pysvtk.svtkUniformGridAMRDataIterator_GetCurrentMetaData(self)

    def HasCurrentMetaData(self):
        return _pysvtk.svtkUniformGridAMRDataIterator_HasCurrentMetaData(self)

    def GetCurrentDataObject(self):
        return _pysvtk.svtkUniformGridAMRDataIterator_GetCurrentDataObject(self)

    def GetCurrentFlatIndex(self):
        return _pysvtk.svtkUniformGridAMRDataIterator_GetCurrentFlatIndex(self)

    def GetCurrentLevel(self):
        return _pysvtk.svtkUniformGridAMRDataIterator_GetCurrentLevel(self)

    def GetCurrentIndex(self):
        return _pysvtk.svtkUniformGridAMRDataIterator_GetCurrentIndex(self)

    def GoToFirstItem(self):
        return _pysvtk.svtkUniformGridAMRDataIterator_GoToFirstItem(self)

    def GoToNextItem(self):
        return _pysvtk.svtkUniformGridAMRDataIterator_GoToNextItem(self)

    def IsDoneWithTraversal(self):
        return _pysvtk.svtkUniformGridAMRDataIterator_IsDoneWithTraversal(self)
    __swig_destroy__ = _pysvtk.delete_svtkUniformGridAMRDataIterator

    def __init__(self):
        _pysvtk.svtkUniformGridAMRDataIterator_swiginit(self, _pysvtk.new_svtkUniformGridAMRDataIterator())

    def __str__(self):
        return _pysvtk.svtkUniformGridAMRDataIterator___str__(self)

# Register svtkUniformGridAMRDataIterator in _pysvtk:
_pysvtk.svtkUniformGridAMRDataIterator_swigregister(svtkUniformGridAMRDataIterator)
class svtkCompositeDataSet(svtkDataObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkCompositeDataSet_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkCompositeDataSet_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkCompositeDataSet_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkCompositeDataSet_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkCompositeDataSet_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkCompositeDataSet_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkCompositeDataSet_PrintSelf(self, os, indent)

    def NewIterator(self):
        return _pysvtk.svtkCompositeDataSet_NewIterator(self)

    def GetDataObjectType(self):
        return _pysvtk.svtkCompositeDataSet_GetDataObjectType(self)

    def CopyStructure(self, input):
        return _pysvtk.svtkCompositeDataSet_CopyStructure(self, input)

    def SetDataSet(self, iter, dataObj):
        return _pysvtk.svtkCompositeDataSet_SetDataSet(self, iter, dataObj)

    def GetDataSet(self, iter):
        return _pysvtk.svtkCompositeDataSet_GetDataSet(self, iter)

    def GetActualMemorySize(self):
        return _pysvtk.svtkCompositeDataSet_GetActualMemorySize(self)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkCompositeDataSet_GetData(*args)

    def Initialize(self):
        return _pysvtk.svtkCompositeDataSet_Initialize(self)

    def ShallowCopy(self, src):
        return _pysvtk.svtkCompositeDataSet_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkCompositeDataSet_DeepCopy(self, src)

    def GetNumberOfPoints(self):
        return _pysvtk.svtkCompositeDataSet_GetNumberOfPoints(self)

    def GetNumberOfCells(self):
        return _pysvtk.svtkCompositeDataSet_GetNumberOfCells(self)

    def GetNumberOfElements(self, type):
        return _pysvtk.svtkCompositeDataSet_GetNumberOfElements(self, type)

    def GetBounds(self, bounds):
        return _pysvtk.svtkCompositeDataSet_GetBounds(self, bounds)

    @staticmethod
    def NAME():
        return _pysvtk.svtkCompositeDataSet_NAME()

    @staticmethod
    def CURRENT_PROCESS_CAN_LOAD_BLOCK():
        return _pysvtk.svtkCompositeDataSet_CURRENT_PROCESS_CAN_LOAD_BLOCK()
    __swig_destroy__ = _pysvtk.delete_svtkCompositeDataSet

    def __str__(self):
        return _pysvtk.svtkCompositeDataSet___str__(self)

# Register svtkCompositeDataSet in _pysvtk:
_pysvtk.svtkCompositeDataSet_swigregister(svtkCompositeDataSet)
class svtkDataObjectTree(svtkCompositeDataSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkDataObjectTree_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkDataObjectTree_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkDataObjectTree_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkDataObjectTree_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkDataObjectTree_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkDataObjectTree_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkDataObjectTree_PrintSelf(self, os, indent)

    def NewTreeIterator(self):
        return _pysvtk.svtkDataObjectTree_NewTreeIterator(self)

    def NewIterator(self):
        return _pysvtk.svtkDataObjectTree_NewIterator(self)

    def CopyStructure(self, input):
        return _pysvtk.svtkDataObjectTree_CopyStructure(self, input)

    def SetDataSet(self, iter, dataObj):
        return _pysvtk.svtkDataObjectTree_SetDataSet(self, iter, dataObj)

    def SetDataSetFrom(self, iter, dataObj):
        return _pysvtk.svtkDataObjectTree_SetDataSetFrom(self, iter, dataObj)

    def GetDataSet(self, iter):
        return _pysvtk.svtkDataObjectTree_GetDataSet(self, iter)

    def GetMetaData(self, iter):
        return _pysvtk.svtkDataObjectTree_GetMetaData(self, iter)

    def HasMetaData(self, iter):
        return _pysvtk.svtkDataObjectTree_HasMetaData(self, iter)

    def GetActualMemorySize(self):
        return _pysvtk.svtkDataObjectTree_GetActualMemorySize(self)

    def Initialize(self):
        return _pysvtk.svtkDataObjectTree_Initialize(self)

    def ShallowCopy(self, src):
        return _pysvtk.svtkDataObjectTree_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkDataObjectTree_DeepCopy(self, src)

    def GetNumberOfPoints(self):
        return _pysvtk.svtkDataObjectTree_GetNumberOfPoints(self)

    def GetNumberOfCells(self):
        return _pysvtk.svtkDataObjectTree_GetNumberOfCells(self)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkDataObjectTree_GetData(*args)
    __swig_destroy__ = _pysvtk.delete_svtkDataObjectTree

    def __init__(self):
        _pysvtk.svtkDataObjectTree_swiginit(self, _pysvtk.new_svtkDataObjectTree())

    def __str__(self):
        return _pysvtk.svtkDataObjectTree___str__(self)

# Register svtkDataObjectTree in _pysvtk:
_pysvtk.svtkDataObjectTree_swigregister(svtkDataObjectTree)
class svtkMultiBlockDataSet(svtkDataObjectTree):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkMultiBlockDataSet_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkMultiBlockDataSet_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkMultiBlockDataSet_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkMultiBlockDataSet_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkMultiBlockDataSet_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkMultiBlockDataSet_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkMultiBlockDataSet_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkMultiBlockDataSet_PrintSelf(self, os, indent)

    def GetDataObjectType(self):
        return _pysvtk.svtkMultiBlockDataSet_GetDataObjectType(self)

    def SetNumberOfBlocks(self, numBlocks):
        return _pysvtk.svtkMultiBlockDataSet_SetNumberOfBlocks(self, numBlocks)

    def GetNumberOfBlocks(self):
        return _pysvtk.svtkMultiBlockDataSet_GetNumberOfBlocks(self)

    def GetBlock(self, blockno):
        return _pysvtk.svtkMultiBlockDataSet_GetBlock(self, blockno)

    def SetBlock(self, blockno, block):
        return _pysvtk.svtkMultiBlockDataSet_SetBlock(self, blockno, block)

    def RemoveBlock(self, blockno):
        return _pysvtk.svtkMultiBlockDataSet_RemoveBlock(self, blockno)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkMultiBlockDataSet_GetData(*args)

    def GetMetaData(self, *args):
        return _pysvtk.svtkMultiBlockDataSet_GetMetaData(self, *args)

    def HasMetaData(self, *args):
        return _pysvtk.svtkMultiBlockDataSet_HasMetaData(self, *args)
    __swig_destroy__ = _pysvtk.delete_svtkMultiBlockDataSet

    def __init__(self):
        _pysvtk.svtkMultiBlockDataSet_swiginit(self, _pysvtk.new_svtkMultiBlockDataSet())

    def __str__(self):
        return _pysvtk.svtkMultiBlockDataSet___str__(self)

# Register svtkMultiBlockDataSet in _pysvtk:
_pysvtk.svtkMultiBlockDataSet_swigregister(svtkMultiBlockDataSet)
class svtkUniformGridAMR(svtkCompositeDataSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkUniformGridAMR_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkUniformGridAMR_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkUniformGridAMR_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkUniformGridAMR_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkUniformGridAMR_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkUniformGridAMR_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkUniformGridAMR_GetNumberOfGenerationsFromBase(self, type)

    def NewIterator(self):
        return _pysvtk.svtkUniformGridAMR_NewIterator(self)

    def GetDataObjectType(self):
        return _pysvtk.svtkUniformGridAMR_GetDataObjectType(self)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkUniformGridAMR_PrintSelf(self, os, indent)

    def Initialize(self, *args):
        return _pysvtk.svtkUniformGridAMR_Initialize(self, *args)

    def SetGridDescription(self, gridDescription):
        return _pysvtk.svtkUniformGridAMR_SetGridDescription(self, gridDescription)

    def GetGridDescription(self):
        return _pysvtk.svtkUniformGridAMR_GetGridDescription(self)

    def GetNumberOfLevels(self):
        return _pysvtk.svtkUniformGridAMR_GetNumberOfLevels(self)

    def GetTotalNumberOfBlocks(self):
        return _pysvtk.svtkUniformGridAMR_GetTotalNumberOfBlocks(self)

    def GetNumberOfDataSets(self, level):
        return _pysvtk.svtkUniformGridAMR_GetNumberOfDataSets(self, level)

    def GetBounds(self, *args):
        return _pysvtk.svtkUniformGridAMR_GetBounds(self, *args)

    def GetMin(self, min):
        return _pysvtk.svtkUniformGridAMR_GetMin(self, min)

    def GetMax(self, max):
        return _pysvtk.svtkUniformGridAMR_GetMax(self, max)

    def SetDataSet(self, *args):
        return _pysvtk.svtkUniformGridAMR_SetDataSet(self, *args)

    def GetDataSet(self, *args):
        return _pysvtk.svtkUniformGridAMR_GetDataSet(self, *args)

    def GetCompositeIndex(self, level, index):
        return _pysvtk.svtkUniformGridAMR_GetCompositeIndex(self, level, index)

    def GetLevelAndIndex(self, compositeIdx, level, idx):
        return _pysvtk.svtkUniformGridAMR_GetLevelAndIndex(self, compositeIdx, level, idx)

    def ShallowCopy(self, src):
        return _pysvtk.svtkUniformGridAMR_ShallowCopy(self, src)

    def DeepCopy(self, src):
        return _pysvtk.svtkUniformGridAMR_DeepCopy(self, src)

    def CopyStructure(self, src):
        return _pysvtk.svtkUniformGridAMR_CopyStructure(self, src)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkUniformGridAMR_GetData(*args)
    __swig_destroy__ = _pysvtk.delete_svtkUniformGridAMR

    def __init__(self):
        _pysvtk.svtkUniformGridAMR_swiginit(self, _pysvtk.new_svtkUniformGridAMR())

    def __str__(self):
        return _pysvtk.svtkUniformGridAMR___str__(self)

# Register svtkUniformGridAMR in _pysvtk:
_pysvtk.svtkUniformGridAMR_swigregister(svtkUniformGridAMR)
class svtkOverlappingAMR(svtkUniformGridAMR):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkOverlappingAMR_New()

    def GetDataObjectType(self):
        return _pysvtk.svtkOverlappingAMR_GetDataObjectType(self)

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkOverlappingAMR_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkOverlappingAMR_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkOverlappingAMR_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkOverlappingAMR_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkOverlappingAMR_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkOverlappingAMR_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkOverlappingAMR_PrintSelf(self, os, indent)

    def NewIterator(self):
        return _pysvtk.svtkOverlappingAMR_NewIterator(self)

    def SetOrigin(self, origin):
        return _pysvtk.svtkOverlappingAMR_SetOrigin(self, origin)

    def SetSpacing(self, level, spacing):
        return _pysvtk.svtkOverlappingAMR_SetSpacing(self, level, spacing)

    def GetSpacing(self, level, spacing):
        return _pysvtk.svtkOverlappingAMR_GetSpacing(self, level, spacing)

    def SetAMRBox(self, level, id, box):
        return _pysvtk.svtkOverlappingAMR_SetAMRBox(self, level, id, box)

    def GetAMRBox(self, level, id):
        return _pysvtk.svtkOverlappingAMR_GetAMRBox(self, level, id)

    def GetOrigin(self, *args):
        return _pysvtk.svtkOverlappingAMR_GetOrigin(self, *args)

    @staticmethod
    def NUMBER_OF_BLANKED_POINTS():
        return _pysvtk.svtkOverlappingAMR_NUMBER_OF_BLANKED_POINTS()

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkOverlappingAMR_GetData(*args)

    def SetRefinementRatio(self, level, refRatio):
        return _pysvtk.svtkOverlappingAMR_SetRefinementRatio(self, level, refRatio)

    def SetAMRBlockSourceIndex(self, level, id, sourceId):
        return _pysvtk.svtkOverlappingAMR_SetAMRBlockSourceIndex(self, level, id, sourceId)

    def GetAMRBlockSourceIndex(self, level, id):
        return _pysvtk.svtkOverlappingAMR_GetAMRBlockSourceIndex(self, level, id)

    def GetRefinementRatio(self, *args):
        return _pysvtk.svtkOverlappingAMR_GetRefinementRatio(self, *args)

    def HasChildrenInformation(self):
        return _pysvtk.svtkOverlappingAMR_HasChildrenInformation(self)

    def GenerateParentChildInformation(self):
        return _pysvtk.svtkOverlappingAMR_GenerateParentChildInformation(self)

    def GetParents(self, level, index, numParents):
        return _pysvtk.svtkOverlappingAMR_GetParents(self, level, index, numParents)

    def GetChildren(self, level, index, numChildren):
        return _pysvtk.svtkOverlappingAMR_GetChildren(self, level, index, numChildren)

    def PrintParentChildInfo(self, level, index):
        return _pysvtk.svtkOverlappingAMR_PrintParentChildInfo(self, level, index)

    def GetBounds(self, *args):
        return _pysvtk.svtkOverlappingAMR_GetBounds(self, *args)

    def FindGrid(self, q, level, gridId):
        return _pysvtk.svtkOverlappingAMR_FindGrid(self, q, level, gridId)

    def GetAMRInfo(self):
        return _pysvtk.svtkOverlappingAMR_GetAMRInfo(self)

    def SetAMRInfo(self, info):
        return _pysvtk.svtkOverlappingAMR_SetAMRInfo(self, info)

    def Audit(self):
        return _pysvtk.svtkOverlappingAMR_Audit(self)
    __swig_destroy__ = _pysvtk.delete_svtkOverlappingAMR

    def __init__(self):
        _pysvtk.svtkOverlappingAMR_swiginit(self, _pysvtk.new_svtkOverlappingAMR())

    def __str__(self):
        return _pysvtk.svtkOverlappingAMR___str__(self)

# Register svtkOverlappingAMR in _pysvtk:
_pysvtk.svtkOverlappingAMR_swigregister(svtkOverlappingAMR)
class svtkNonOverlappingAMR(svtkUniformGridAMR):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        return _pysvtk.svtkNonOverlappingAMR_New()

    @staticmethod
    def IsTypeOf(type):
        return _pysvtk.svtkNonOverlappingAMR_IsTypeOf(type)

    def IsA(self, type):
        return _pysvtk.svtkNonOverlappingAMR_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        return _pysvtk.svtkNonOverlappingAMR_SafeDownCast(o)

    def NewInstance(self):
        return _pysvtk.svtkNonOverlappingAMR_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        return _pysvtk.svtkNonOverlappingAMR_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        return _pysvtk.svtkNonOverlappingAMR_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        return _pysvtk.svtkNonOverlappingAMR_PrintSelf(self, os, indent)

    def GetDataObjectType(self):
        return _pysvtk.svtkNonOverlappingAMR_GetDataObjectType(self)

    @staticmethod
    def GetData(*args):
        return _pysvtk.svtkNonOverlappingAMR_GetData(*args)
    __swig_destroy__ = _pysvtk.delete_svtkNonOverlappingAMR

    def __init__(self):
        _pysvtk.svtkNonOverlappingAMR_swiginit(self, _pysvtk.new_svtkNonOverlappingAMR())

    def __str__(self):
        return _pysvtk.svtkNonOverlappingAMR___str__(self)

# Register svtkNonOverlappingAMR in _pysvtk:
_pysvtk.svtkNonOverlappingAMR_swigregister(svtkNonOverlappingAMR)

def as_void_ptr(pval):
    return _pysvtk.as_void_ptr(pval)

def as_integer(ptr):
    return _pysvtk.as_integer(ptr)

