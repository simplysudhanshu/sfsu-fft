# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""
SENSEI PythonAnalysis. Provides a minimal sensei wrapping to
code up analysis adaptors in a Python script.
"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PythonAnalysis
else:
    import _PythonAnalysis

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import svtk
class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PythonAnalysis.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _PythonAnalysis.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _PythonAnalysis.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _PythonAnalysis.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PythonAnalysis.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PythonAnalysis.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _PythonAnalysis.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _PythonAnalysis.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _PythonAnalysis.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _PythonAnalysis.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PythonAnalysis.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PythonAnalysis.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PythonAnalysis.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PythonAnalysis.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PythonAnalysis.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _PythonAnalysis.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _PythonAnalysis.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PythonAnalysis:
_PythonAnalysis.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _PythonAnalysis.SHARED_PTR_DISOWN

class array_int_2(object):
    r"""Proxy of C++ std::array< int,2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(array_int_2 self) -> SwigPyIterator"""
        return _PythonAnalysis.array_int_2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(array_int_2 self) -> bool"""
        return _PythonAnalysis.array_int_2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(array_int_2 self) -> bool"""
        return _PythonAnalysis.array_int_2___bool__(self)

    def __len__(self):
        r"""__len__(array_int_2 self) -> std::array< int,2 >::size_type"""
        return _PythonAnalysis.array_int_2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(array_int_2 self, std::array< int,2 >::difference_type i, std::array< int,2 >::difference_type j) -> array_int_2

        Parameters
        ----------
        i: std::array< int,2 >::difference_type
        j: std::array< int,2 >::difference_type

        """
        return _PythonAnalysis.array_int_2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(array_int_2 self, std::array< int,2 >::difference_type i, std::array< int,2 >::difference_type j)

        Parameters
        ----------
        i: std::array< int,2 >::difference_type
        j: std::array< int,2 >::difference_type

        __setslice__(array_int_2 self, std::array< int,2 >::difference_type i, std::array< int,2 >::difference_type j, array_int_2 v)

        Parameters
        ----------
        i: std::array< int,2 >::difference_type
        j: std::array< int,2 >::difference_type
        v: std::array< int,2 > const &

        """
        return _PythonAnalysis.array_int_2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(array_int_2 self, std::array< int,2 >::difference_type i, std::array< int,2 >::difference_type j)

        Parameters
        ----------
        i: std::array< int,2 >::difference_type
        j: std::array< int,2 >::difference_type

        """
        return _PythonAnalysis.array_int_2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(array_int_2 self, std::array< int,2 >::difference_type i)

        Parameters
        ----------
        i: std::array< int,2 >::difference_type

        __delitem__(array_int_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.array_int_2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(array_int_2 self, SWIGPY_SLICEOBJECT * slice) -> array_int_2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(array_int_2 self, std::array< int,2 >::difference_type i) -> std::array< int,2 >::value_type const &

        Parameters
        ----------
        i: std::array< int,2 >::difference_type

        """
        return _PythonAnalysis.array_int_2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(array_int_2 self, SWIGPY_SLICEOBJECT * slice, array_int_2 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::array< int,2 > const &

        __setitem__(array_int_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(array_int_2 self, std::array< int,2 >::difference_type i, std::array< int,2 >::value_type const & x)

        Parameters
        ----------
        i: std::array< int,2 >::difference_type
        x: std::array< int,2 >::value_type const &

        """
        return _PythonAnalysis.array_int_2___setitem__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(array_int_2 self) -> array_int_2
        __init__(array_int_2 self, array_int_2 other) -> array_int_2

        Parameters
        ----------
        other: std::array< int,2 > const &

        """
        _PythonAnalysis.array_int_2_swiginit(self, _PythonAnalysis.new_array_int_2(*args))

    def empty(self):
        r"""empty(array_int_2 self) -> bool"""
        return _PythonAnalysis.array_int_2_empty(self)

    def size(self):
        r"""size(array_int_2 self) -> std::array< int,2 >::size_type"""
        return _PythonAnalysis.array_int_2_size(self)

    def swap(self, v):
        r"""
        swap(array_int_2 self, array_int_2 v)

        Parameters
        ----------
        v: std::array< int,2 > &

        """
        return _PythonAnalysis.array_int_2_swap(self, v)

    def begin(self):
        r"""begin(array_int_2 self) -> std::array< int,2 >::iterator"""
        return _PythonAnalysis.array_int_2_begin(self)

    def end(self):
        r"""end(array_int_2 self) -> std::array< int,2 >::iterator"""
        return _PythonAnalysis.array_int_2_end(self)

    def rbegin(self):
        r"""rbegin(array_int_2 self) -> std::array< int,2 >::reverse_iterator"""
        return _PythonAnalysis.array_int_2_rbegin(self)

    def rend(self):
        r"""rend(array_int_2 self) -> std::array< int,2 >::reverse_iterator"""
        return _PythonAnalysis.array_int_2_rend(self)

    def front(self):
        r"""front(array_int_2 self) -> std::array< int,2 >::value_type const &"""
        return _PythonAnalysis.array_int_2_front(self)

    def back(self):
        r"""back(array_int_2 self) -> std::array< int,2 >::value_type const &"""
        return _PythonAnalysis.array_int_2_back(self)

    def fill(self, u):
        r"""
        fill(array_int_2 self, std::array< int,2 >::value_type const & u)

        Parameters
        ----------
        u: std::array< int,2 >::value_type const &

        """
        return _PythonAnalysis.array_int_2_fill(self, u)
    __swig_destroy__ = _PythonAnalysis.delete_array_int_2

# Register array_int_2 in _PythonAnalysis:
_PythonAnalysis.array_int_2_swigregister(array_int_2)
class array_int_3(object):
    r"""Proxy of C++ std::array< int,3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(array_int_3 self) -> SwigPyIterator"""
        return _PythonAnalysis.array_int_3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(array_int_3 self) -> bool"""
        return _PythonAnalysis.array_int_3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(array_int_3 self) -> bool"""
        return _PythonAnalysis.array_int_3___bool__(self)

    def __len__(self):
        r"""__len__(array_int_3 self) -> std::array< int,3 >::size_type"""
        return _PythonAnalysis.array_int_3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(array_int_3 self, std::array< int,3 >::difference_type i, std::array< int,3 >::difference_type j) -> array_int_3

        Parameters
        ----------
        i: std::array< int,3 >::difference_type
        j: std::array< int,3 >::difference_type

        """
        return _PythonAnalysis.array_int_3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(array_int_3 self, std::array< int,3 >::difference_type i, std::array< int,3 >::difference_type j)

        Parameters
        ----------
        i: std::array< int,3 >::difference_type
        j: std::array< int,3 >::difference_type

        __setslice__(array_int_3 self, std::array< int,3 >::difference_type i, std::array< int,3 >::difference_type j, array_int_3 v)

        Parameters
        ----------
        i: std::array< int,3 >::difference_type
        j: std::array< int,3 >::difference_type
        v: std::array< int,3 > const &

        """
        return _PythonAnalysis.array_int_3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(array_int_3 self, std::array< int,3 >::difference_type i, std::array< int,3 >::difference_type j)

        Parameters
        ----------
        i: std::array< int,3 >::difference_type
        j: std::array< int,3 >::difference_type

        """
        return _PythonAnalysis.array_int_3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(array_int_3 self, std::array< int,3 >::difference_type i)

        Parameters
        ----------
        i: std::array< int,3 >::difference_type

        __delitem__(array_int_3 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.array_int_3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(array_int_3 self, SWIGPY_SLICEOBJECT * slice) -> array_int_3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(array_int_3 self, std::array< int,3 >::difference_type i) -> std::array< int,3 >::value_type const &

        Parameters
        ----------
        i: std::array< int,3 >::difference_type

        """
        return _PythonAnalysis.array_int_3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(array_int_3 self, SWIGPY_SLICEOBJECT * slice, array_int_3 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::array< int,3 > const &

        __setitem__(array_int_3 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(array_int_3 self, std::array< int,3 >::difference_type i, std::array< int,3 >::value_type const & x)

        Parameters
        ----------
        i: std::array< int,3 >::difference_type
        x: std::array< int,3 >::value_type const &

        """
        return _PythonAnalysis.array_int_3___setitem__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(array_int_3 self) -> array_int_3
        __init__(array_int_3 self, array_int_3 other) -> array_int_3

        Parameters
        ----------
        other: std::array< int,3 > const &

        """
        _PythonAnalysis.array_int_3_swiginit(self, _PythonAnalysis.new_array_int_3(*args))

    def empty(self):
        r"""empty(array_int_3 self) -> bool"""
        return _PythonAnalysis.array_int_3_empty(self)

    def size(self):
        r"""size(array_int_3 self) -> std::array< int,3 >::size_type"""
        return _PythonAnalysis.array_int_3_size(self)

    def swap(self, v):
        r"""
        swap(array_int_3 self, array_int_3 v)

        Parameters
        ----------
        v: std::array< int,3 > &

        """
        return _PythonAnalysis.array_int_3_swap(self, v)

    def begin(self):
        r"""begin(array_int_3 self) -> std::array< int,3 >::iterator"""
        return _PythonAnalysis.array_int_3_begin(self)

    def end(self):
        r"""end(array_int_3 self) -> std::array< int,3 >::iterator"""
        return _PythonAnalysis.array_int_3_end(self)

    def rbegin(self):
        r"""rbegin(array_int_3 self) -> std::array< int,3 >::reverse_iterator"""
        return _PythonAnalysis.array_int_3_rbegin(self)

    def rend(self):
        r"""rend(array_int_3 self) -> std::array< int,3 >::reverse_iterator"""
        return _PythonAnalysis.array_int_3_rend(self)

    def front(self):
        r"""front(array_int_3 self) -> std::array< int,3 >::value_type const &"""
        return _PythonAnalysis.array_int_3_front(self)

    def back(self):
        r"""back(array_int_3 self) -> std::array< int,3 >::value_type const &"""
        return _PythonAnalysis.array_int_3_back(self)

    def fill(self, u):
        r"""
        fill(array_int_3 self, std::array< int,3 >::value_type const & u)

        Parameters
        ----------
        u: std::array< int,3 >::value_type const &

        """
        return _PythonAnalysis.array_int_3_fill(self, u)
    __swig_destroy__ = _PythonAnalysis.delete_array_int_3

# Register array_int_3 in _PythonAnalysis:
_PythonAnalysis.array_int_3_swigregister(array_int_3)
class array_int_6(object):
    r"""Proxy of C++ std::array< int,6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(array_int_6 self) -> SwigPyIterator"""
        return _PythonAnalysis.array_int_6_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(array_int_6 self) -> bool"""
        return _PythonAnalysis.array_int_6___nonzero__(self)

    def __bool__(self):
        r"""__bool__(array_int_6 self) -> bool"""
        return _PythonAnalysis.array_int_6___bool__(self)

    def __len__(self):
        r"""__len__(array_int_6 self) -> std::array< int,6 >::size_type"""
        return _PythonAnalysis.array_int_6___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(array_int_6 self, std::array< int,6 >::difference_type i, std::array< int,6 >::difference_type j) -> array_int_6

        Parameters
        ----------
        i: std::array< int,6 >::difference_type
        j: std::array< int,6 >::difference_type

        """
        return _PythonAnalysis.array_int_6___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(array_int_6 self, std::array< int,6 >::difference_type i, std::array< int,6 >::difference_type j)

        Parameters
        ----------
        i: std::array< int,6 >::difference_type
        j: std::array< int,6 >::difference_type

        __setslice__(array_int_6 self, std::array< int,6 >::difference_type i, std::array< int,6 >::difference_type j, array_int_6 v)

        Parameters
        ----------
        i: std::array< int,6 >::difference_type
        j: std::array< int,6 >::difference_type
        v: std::array< int,6 > const &

        """
        return _PythonAnalysis.array_int_6___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(array_int_6 self, std::array< int,6 >::difference_type i, std::array< int,6 >::difference_type j)

        Parameters
        ----------
        i: std::array< int,6 >::difference_type
        j: std::array< int,6 >::difference_type

        """
        return _PythonAnalysis.array_int_6___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(array_int_6 self, std::array< int,6 >::difference_type i)

        Parameters
        ----------
        i: std::array< int,6 >::difference_type

        __delitem__(array_int_6 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.array_int_6___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(array_int_6 self, SWIGPY_SLICEOBJECT * slice) -> array_int_6

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(array_int_6 self, std::array< int,6 >::difference_type i) -> std::array< int,6 >::value_type const &

        Parameters
        ----------
        i: std::array< int,6 >::difference_type

        """
        return _PythonAnalysis.array_int_6___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(array_int_6 self, SWIGPY_SLICEOBJECT * slice, array_int_6 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::array< int,6 > const &

        __setitem__(array_int_6 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(array_int_6 self, std::array< int,6 >::difference_type i, std::array< int,6 >::value_type const & x)

        Parameters
        ----------
        i: std::array< int,6 >::difference_type
        x: std::array< int,6 >::value_type const &

        """
        return _PythonAnalysis.array_int_6___setitem__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(array_int_6 self) -> array_int_6
        __init__(array_int_6 self, array_int_6 other) -> array_int_6

        Parameters
        ----------
        other: std::array< int,6 > const &

        """
        _PythonAnalysis.array_int_6_swiginit(self, _PythonAnalysis.new_array_int_6(*args))

    def empty(self):
        r"""empty(array_int_6 self) -> bool"""
        return _PythonAnalysis.array_int_6_empty(self)

    def size(self):
        r"""size(array_int_6 self) -> std::array< int,6 >::size_type"""
        return _PythonAnalysis.array_int_6_size(self)

    def swap(self, v):
        r"""
        swap(array_int_6 self, array_int_6 v)

        Parameters
        ----------
        v: std::array< int,6 > &

        """
        return _PythonAnalysis.array_int_6_swap(self, v)

    def begin(self):
        r"""begin(array_int_6 self) -> std::array< int,6 >::iterator"""
        return _PythonAnalysis.array_int_6_begin(self)

    def end(self):
        r"""end(array_int_6 self) -> std::array< int,6 >::iterator"""
        return _PythonAnalysis.array_int_6_end(self)

    def rbegin(self):
        r"""rbegin(array_int_6 self) -> std::array< int,6 >::reverse_iterator"""
        return _PythonAnalysis.array_int_6_rbegin(self)

    def rend(self):
        r"""rend(array_int_6 self) -> std::array< int,6 >::reverse_iterator"""
        return _PythonAnalysis.array_int_6_rend(self)

    def front(self):
        r"""front(array_int_6 self) -> std::array< int,6 >::value_type const &"""
        return _PythonAnalysis.array_int_6_front(self)

    def back(self):
        r"""back(array_int_6 self) -> std::array< int,6 >::value_type const &"""
        return _PythonAnalysis.array_int_6_back(self)

    def fill(self, u):
        r"""
        fill(array_int_6 self, std::array< int,6 >::value_type const & u)

        Parameters
        ----------
        u: std::array< int,6 >::value_type const &

        """
        return _PythonAnalysis.array_int_6_fill(self, u)
    __swig_destroy__ = _PythonAnalysis.delete_array_int_6

# Register array_int_6 in _PythonAnalysis:
_PythonAnalysis.array_int_6_swigregister(array_int_6)
class array_double_2(object):
    r"""Proxy of C++ std::array< double,2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(array_double_2 self) -> SwigPyIterator"""
        return _PythonAnalysis.array_double_2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(array_double_2 self) -> bool"""
        return _PythonAnalysis.array_double_2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(array_double_2 self) -> bool"""
        return _PythonAnalysis.array_double_2___bool__(self)

    def __len__(self):
        r"""__len__(array_double_2 self) -> std::array< double,2 >::size_type"""
        return _PythonAnalysis.array_double_2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(array_double_2 self, std::array< double,2 >::difference_type i, std::array< double,2 >::difference_type j) -> array_double_2

        Parameters
        ----------
        i: std::array< double,2 >::difference_type
        j: std::array< double,2 >::difference_type

        """
        return _PythonAnalysis.array_double_2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(array_double_2 self, std::array< double,2 >::difference_type i, std::array< double,2 >::difference_type j)

        Parameters
        ----------
        i: std::array< double,2 >::difference_type
        j: std::array< double,2 >::difference_type

        __setslice__(array_double_2 self, std::array< double,2 >::difference_type i, std::array< double,2 >::difference_type j, array_double_2 v)

        Parameters
        ----------
        i: std::array< double,2 >::difference_type
        j: std::array< double,2 >::difference_type
        v: std::array< double,2 > const &

        """
        return _PythonAnalysis.array_double_2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(array_double_2 self, std::array< double,2 >::difference_type i, std::array< double,2 >::difference_type j)

        Parameters
        ----------
        i: std::array< double,2 >::difference_type
        j: std::array< double,2 >::difference_type

        """
        return _PythonAnalysis.array_double_2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(array_double_2 self, std::array< double,2 >::difference_type i)

        Parameters
        ----------
        i: std::array< double,2 >::difference_type

        __delitem__(array_double_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.array_double_2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(array_double_2 self, SWIGPY_SLICEOBJECT * slice) -> array_double_2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(array_double_2 self, std::array< double,2 >::difference_type i) -> std::array< double,2 >::value_type const &

        Parameters
        ----------
        i: std::array< double,2 >::difference_type

        """
        return _PythonAnalysis.array_double_2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(array_double_2 self, SWIGPY_SLICEOBJECT * slice, array_double_2 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::array< double,2 > const &

        __setitem__(array_double_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(array_double_2 self, std::array< double,2 >::difference_type i, std::array< double,2 >::value_type const & x)

        Parameters
        ----------
        i: std::array< double,2 >::difference_type
        x: std::array< double,2 >::value_type const &

        """
        return _PythonAnalysis.array_double_2___setitem__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(array_double_2 self) -> array_double_2
        __init__(array_double_2 self, array_double_2 other) -> array_double_2

        Parameters
        ----------
        other: std::array< double,2 > const &

        """
        _PythonAnalysis.array_double_2_swiginit(self, _PythonAnalysis.new_array_double_2(*args))

    def empty(self):
        r"""empty(array_double_2 self) -> bool"""
        return _PythonAnalysis.array_double_2_empty(self)

    def size(self):
        r"""size(array_double_2 self) -> std::array< double,2 >::size_type"""
        return _PythonAnalysis.array_double_2_size(self)

    def swap(self, v):
        r"""
        swap(array_double_2 self, array_double_2 v)

        Parameters
        ----------
        v: std::array< double,2 > &

        """
        return _PythonAnalysis.array_double_2_swap(self, v)

    def begin(self):
        r"""begin(array_double_2 self) -> std::array< double,2 >::iterator"""
        return _PythonAnalysis.array_double_2_begin(self)

    def end(self):
        r"""end(array_double_2 self) -> std::array< double,2 >::iterator"""
        return _PythonAnalysis.array_double_2_end(self)

    def rbegin(self):
        r"""rbegin(array_double_2 self) -> std::array< double,2 >::reverse_iterator"""
        return _PythonAnalysis.array_double_2_rbegin(self)

    def rend(self):
        r"""rend(array_double_2 self) -> std::array< double,2 >::reverse_iterator"""
        return _PythonAnalysis.array_double_2_rend(self)

    def front(self):
        r"""front(array_double_2 self) -> std::array< double,2 >::value_type const &"""
        return _PythonAnalysis.array_double_2_front(self)

    def back(self):
        r"""back(array_double_2 self) -> std::array< double,2 >::value_type const &"""
        return _PythonAnalysis.array_double_2_back(self)

    def fill(self, u):
        r"""
        fill(array_double_2 self, std::array< double,2 >::value_type const & u)

        Parameters
        ----------
        u: std::array< double,2 >::value_type const &

        """
        return _PythonAnalysis.array_double_2_fill(self, u)
    __swig_destroy__ = _PythonAnalysis.delete_array_double_2

# Register array_double_2 in _PythonAnalysis:
_PythonAnalysis.array_double_2_swigregister(array_double_2)
class array_double_3(object):
    r"""Proxy of C++ std::array< double,3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(array_double_3 self) -> SwigPyIterator"""
        return _PythonAnalysis.array_double_3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(array_double_3 self) -> bool"""
        return _PythonAnalysis.array_double_3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(array_double_3 self) -> bool"""
        return _PythonAnalysis.array_double_3___bool__(self)

    def __len__(self):
        r"""__len__(array_double_3 self) -> std::array< double,3 >::size_type"""
        return _PythonAnalysis.array_double_3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(array_double_3 self, std::array< double,3 >::difference_type i, std::array< double,3 >::difference_type j) -> array_double_3

        Parameters
        ----------
        i: std::array< double,3 >::difference_type
        j: std::array< double,3 >::difference_type

        """
        return _PythonAnalysis.array_double_3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(array_double_3 self, std::array< double,3 >::difference_type i, std::array< double,3 >::difference_type j)

        Parameters
        ----------
        i: std::array< double,3 >::difference_type
        j: std::array< double,3 >::difference_type

        __setslice__(array_double_3 self, std::array< double,3 >::difference_type i, std::array< double,3 >::difference_type j, array_double_3 v)

        Parameters
        ----------
        i: std::array< double,3 >::difference_type
        j: std::array< double,3 >::difference_type
        v: std::array< double,3 > const &

        """
        return _PythonAnalysis.array_double_3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(array_double_3 self, std::array< double,3 >::difference_type i, std::array< double,3 >::difference_type j)

        Parameters
        ----------
        i: std::array< double,3 >::difference_type
        j: std::array< double,3 >::difference_type

        """
        return _PythonAnalysis.array_double_3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(array_double_3 self, std::array< double,3 >::difference_type i)

        Parameters
        ----------
        i: std::array< double,3 >::difference_type

        __delitem__(array_double_3 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.array_double_3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(array_double_3 self, SWIGPY_SLICEOBJECT * slice) -> array_double_3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(array_double_3 self, std::array< double,3 >::difference_type i) -> std::array< double,3 >::value_type const &

        Parameters
        ----------
        i: std::array< double,3 >::difference_type

        """
        return _PythonAnalysis.array_double_3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(array_double_3 self, SWIGPY_SLICEOBJECT * slice, array_double_3 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::array< double,3 > const &

        __setitem__(array_double_3 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(array_double_3 self, std::array< double,3 >::difference_type i, std::array< double,3 >::value_type const & x)

        Parameters
        ----------
        i: std::array< double,3 >::difference_type
        x: std::array< double,3 >::value_type const &

        """
        return _PythonAnalysis.array_double_3___setitem__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(array_double_3 self) -> array_double_3
        __init__(array_double_3 self, array_double_3 other) -> array_double_3

        Parameters
        ----------
        other: std::array< double,3 > const &

        """
        _PythonAnalysis.array_double_3_swiginit(self, _PythonAnalysis.new_array_double_3(*args))

    def empty(self):
        r"""empty(array_double_3 self) -> bool"""
        return _PythonAnalysis.array_double_3_empty(self)

    def size(self):
        r"""size(array_double_3 self) -> std::array< double,3 >::size_type"""
        return _PythonAnalysis.array_double_3_size(self)

    def swap(self, v):
        r"""
        swap(array_double_3 self, array_double_3 v)

        Parameters
        ----------
        v: std::array< double,3 > &

        """
        return _PythonAnalysis.array_double_3_swap(self, v)

    def begin(self):
        r"""begin(array_double_3 self) -> std::array< double,3 >::iterator"""
        return _PythonAnalysis.array_double_3_begin(self)

    def end(self):
        r"""end(array_double_3 self) -> std::array< double,3 >::iterator"""
        return _PythonAnalysis.array_double_3_end(self)

    def rbegin(self):
        r"""rbegin(array_double_3 self) -> std::array< double,3 >::reverse_iterator"""
        return _PythonAnalysis.array_double_3_rbegin(self)

    def rend(self):
        r"""rend(array_double_3 self) -> std::array< double,3 >::reverse_iterator"""
        return _PythonAnalysis.array_double_3_rend(self)

    def front(self):
        r"""front(array_double_3 self) -> std::array< double,3 >::value_type const &"""
        return _PythonAnalysis.array_double_3_front(self)

    def back(self):
        r"""back(array_double_3 self) -> std::array< double,3 >::value_type const &"""
        return _PythonAnalysis.array_double_3_back(self)

    def fill(self, u):
        r"""
        fill(array_double_3 self, std::array< double,3 >::value_type const & u)

        Parameters
        ----------
        u: std::array< double,3 >::value_type const &

        """
        return _PythonAnalysis.array_double_3_fill(self, u)
    __swig_destroy__ = _PythonAnalysis.delete_array_double_3

# Register array_double_3 in _PythonAnalysis:
_PythonAnalysis.array_double_3_swigregister(array_double_3)
class array_double_6(object):
    r"""Proxy of C++ std::array< double,6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(array_double_6 self) -> SwigPyIterator"""
        return _PythonAnalysis.array_double_6_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(array_double_6 self) -> bool"""
        return _PythonAnalysis.array_double_6___nonzero__(self)

    def __bool__(self):
        r"""__bool__(array_double_6 self) -> bool"""
        return _PythonAnalysis.array_double_6___bool__(self)

    def __len__(self):
        r"""__len__(array_double_6 self) -> std::array< double,6 >::size_type"""
        return _PythonAnalysis.array_double_6___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(array_double_6 self, std::array< double,6 >::difference_type i, std::array< double,6 >::difference_type j) -> array_double_6

        Parameters
        ----------
        i: std::array< double,6 >::difference_type
        j: std::array< double,6 >::difference_type

        """
        return _PythonAnalysis.array_double_6___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(array_double_6 self, std::array< double,6 >::difference_type i, std::array< double,6 >::difference_type j)

        Parameters
        ----------
        i: std::array< double,6 >::difference_type
        j: std::array< double,6 >::difference_type

        __setslice__(array_double_6 self, std::array< double,6 >::difference_type i, std::array< double,6 >::difference_type j, array_double_6 v)

        Parameters
        ----------
        i: std::array< double,6 >::difference_type
        j: std::array< double,6 >::difference_type
        v: std::array< double,6 > const &

        """
        return _PythonAnalysis.array_double_6___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(array_double_6 self, std::array< double,6 >::difference_type i, std::array< double,6 >::difference_type j)

        Parameters
        ----------
        i: std::array< double,6 >::difference_type
        j: std::array< double,6 >::difference_type

        """
        return _PythonAnalysis.array_double_6___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(array_double_6 self, std::array< double,6 >::difference_type i)

        Parameters
        ----------
        i: std::array< double,6 >::difference_type

        __delitem__(array_double_6 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.array_double_6___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(array_double_6 self, SWIGPY_SLICEOBJECT * slice) -> array_double_6

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(array_double_6 self, std::array< double,6 >::difference_type i) -> std::array< double,6 >::value_type const &

        Parameters
        ----------
        i: std::array< double,6 >::difference_type

        """
        return _PythonAnalysis.array_double_6___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(array_double_6 self, SWIGPY_SLICEOBJECT * slice, array_double_6 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::array< double,6 > const &

        __setitem__(array_double_6 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(array_double_6 self, std::array< double,6 >::difference_type i, std::array< double,6 >::value_type const & x)

        Parameters
        ----------
        i: std::array< double,6 >::difference_type
        x: std::array< double,6 >::value_type const &

        """
        return _PythonAnalysis.array_double_6___setitem__(self, *args)

    def __init__(self, *args):
        r"""
        __init__(array_double_6 self) -> array_double_6
        __init__(array_double_6 self, array_double_6 other) -> array_double_6

        Parameters
        ----------
        other: std::array< double,6 > const &

        """
        _PythonAnalysis.array_double_6_swiginit(self, _PythonAnalysis.new_array_double_6(*args))

    def empty(self):
        r"""empty(array_double_6 self) -> bool"""
        return _PythonAnalysis.array_double_6_empty(self)

    def size(self):
        r"""size(array_double_6 self) -> std::array< double,6 >::size_type"""
        return _PythonAnalysis.array_double_6_size(self)

    def swap(self, v):
        r"""
        swap(array_double_6 self, array_double_6 v)

        Parameters
        ----------
        v: std::array< double,6 > &

        """
        return _PythonAnalysis.array_double_6_swap(self, v)

    def begin(self):
        r"""begin(array_double_6 self) -> std::array< double,6 >::iterator"""
        return _PythonAnalysis.array_double_6_begin(self)

    def end(self):
        r"""end(array_double_6 self) -> std::array< double,6 >::iterator"""
        return _PythonAnalysis.array_double_6_end(self)

    def rbegin(self):
        r"""rbegin(array_double_6 self) -> std::array< double,6 >::reverse_iterator"""
        return _PythonAnalysis.array_double_6_rbegin(self)

    def rend(self):
        r"""rend(array_double_6 self) -> std::array< double,6 >::reverse_iterator"""
        return _PythonAnalysis.array_double_6_rend(self)

    def front(self):
        r"""front(array_double_6 self) -> std::array< double,6 >::value_type const &"""
        return _PythonAnalysis.array_double_6_front(self)

    def back(self):
        r"""back(array_double_6 self) -> std::array< double,6 >::value_type const &"""
        return _PythonAnalysis.array_double_6_back(self)

    def fill(self, u):
        r"""
        fill(array_double_6 self, std::array< double,6 >::value_type const & u)

        Parameters
        ----------
        u: std::array< double,6 >::value_type const &

        """
        return _PythonAnalysis.array_double_6_fill(self, u)
    __swig_destroy__ = _PythonAnalysis.delete_array_double_6

# Register array_double_6 in _PythonAnalysis:
_PythonAnalysis.array_double_6_swigregister(array_double_6)
class vector_string(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_string self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_string self) -> bool"""
        return _PythonAnalysis.vector_string___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_string self) -> bool"""
        return _PythonAnalysis.vector_string___bool__(self)

    def __len__(self):
        r"""__len__(vector_string self) -> std::vector< std::string >::size_type"""
        return _PythonAnalysis.vector_string___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vector_string

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _PythonAnalysis.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vector_string v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _PythonAnalysis.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _PythonAnalysis.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_string self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(vector_string self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_string self, SWIGPY_SLICEOBJECT * slice) -> vector_string

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_string self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _PythonAnalysis.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_string self, SWIGPY_SLICEOBJECT * slice, vector_string v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(vector_string self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _PythonAnalysis.vector_string___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_string self) -> std::vector< std::string >::value_type"""
        return _PythonAnalysis.vector_string_pop(self)

    def append(self, x):
        r"""
        append(vector_string self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _PythonAnalysis.vector_string_append(self, x)

    def empty(self):
        r"""empty(vector_string self) -> bool"""
        return _PythonAnalysis.vector_string_empty(self)

    def size(self):
        r"""size(vector_string self) -> std::vector< std::string >::size_type"""
        return _PythonAnalysis.vector_string_size(self)

    def swap(self, v):
        r"""
        swap(vector_string self, vector_string v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _PythonAnalysis.vector_string_swap(self, v)

    def begin(self):
        r"""begin(vector_string self) -> std::vector< std::string >::iterator"""
        return _PythonAnalysis.vector_string_begin(self)

    def end(self):
        r"""end(vector_string self) -> std::vector< std::string >::iterator"""
        return _PythonAnalysis.vector_string_end(self)

    def rbegin(self):
        r"""rbegin(vector_string self) -> std::vector< std::string >::reverse_iterator"""
        return _PythonAnalysis.vector_string_rbegin(self)

    def rend(self):
        r"""rend(vector_string self) -> std::vector< std::string >::reverse_iterator"""
        return _PythonAnalysis.vector_string_rend(self)

    def clear(self):
        r"""clear(vector_string self)"""
        return _PythonAnalysis.vector_string_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_string self) -> std::vector< std::string >::allocator_type"""
        return _PythonAnalysis.vector_string_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_string self)"""
        return _PythonAnalysis.vector_string_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_string self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(vector_string self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _PythonAnalysis.vector_string_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_string self) -> vector_string
        __init__(vector_string self, vector_string other) -> vector_string

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(vector_string self, std::vector< std::string >::size_type size) -> vector_string

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(vector_string self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_string

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _PythonAnalysis.vector_string_swiginit(self, _PythonAnalysis.new_vector_string(*args))

    def push_back(self, x):
        r"""
        push_back(vector_string self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _PythonAnalysis.vector_string_push_back(self, x)

    def front(self):
        r"""front(vector_string self) -> std::vector< std::string >::value_type const &"""
        return _PythonAnalysis.vector_string_front(self)

    def back(self):
        r"""back(vector_string self) -> std::vector< std::string >::value_type const &"""
        return _PythonAnalysis.vector_string_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_string self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _PythonAnalysis.vector_string_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_string self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(vector_string self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _PythonAnalysis.vector_string_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_string self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(vector_string self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _PythonAnalysis.vector_string_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_string self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _PythonAnalysis.vector_string_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_string self) -> std::vector< std::string >::size_type"""
        return _PythonAnalysis.vector_string_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_string

# Register vector_string in _PythonAnalysis:
_PythonAnalysis.vector_string_swigregister(vector_string)
class vector_char(object):
    r"""Proxy of C++ std::vector< char > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_char self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_char_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_char self) -> bool"""
        return _PythonAnalysis.vector_char___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_char self) -> bool"""
        return _PythonAnalysis.vector_char___bool__(self)

    def __len__(self):
        r"""__len__(vector_char self) -> std::vector< char >::size_type"""
        return _PythonAnalysis.vector_char___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j) -> vector_char

        Parameters
        ----------
        i: std::vector< char >::difference_type
        j: std::vector< char >::difference_type

        """
        return _PythonAnalysis.vector_char___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j)

        Parameters
        ----------
        i: std::vector< char >::difference_type
        j: std::vector< char >::difference_type

        __setslice__(vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j, vector_char v)

        Parameters
        ----------
        i: std::vector< char >::difference_type
        j: std::vector< char >::difference_type
        v: std::vector< char,std::allocator< char > > const &

        """
        return _PythonAnalysis.vector_char___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j)

        Parameters
        ----------
        i: std::vector< char >::difference_type
        j: std::vector< char >::difference_type

        """
        return _PythonAnalysis.vector_char___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_char self, std::vector< char >::difference_type i)

        Parameters
        ----------
        i: std::vector< char >::difference_type

        __delitem__(vector_char self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_char___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_char self, SWIGPY_SLICEOBJECT * slice) -> vector_char

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_char self, std::vector< char >::difference_type i) -> std::vector< char >::value_type const &

        Parameters
        ----------
        i: std::vector< char >::difference_type

        """
        return _PythonAnalysis.vector_char___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_char self, SWIGPY_SLICEOBJECT * slice, vector_char v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< char,std::allocator< char > > const &

        __setitem__(vector_char self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_char self, std::vector< char >::difference_type i, std::vector< char >::value_type const & x)

        Parameters
        ----------
        i: std::vector< char >::difference_type
        x: std::vector< char >::value_type const &

        """
        return _PythonAnalysis.vector_char___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_char self) -> std::vector< char >::value_type"""
        return _PythonAnalysis.vector_char_pop(self)

    def append(self, x):
        r"""
        append(vector_char self, std::vector< char >::value_type const & x)

        Parameters
        ----------
        x: std::vector< char >::value_type const &

        """
        return _PythonAnalysis.vector_char_append(self, x)

    def empty(self):
        r"""empty(vector_char self) -> bool"""
        return _PythonAnalysis.vector_char_empty(self)

    def size(self):
        r"""size(vector_char self) -> std::vector< char >::size_type"""
        return _PythonAnalysis.vector_char_size(self)

    def swap(self, v):
        r"""
        swap(vector_char self, vector_char v)

        Parameters
        ----------
        v: std::vector< char > &

        """
        return _PythonAnalysis.vector_char_swap(self, v)

    def begin(self):
        r"""begin(vector_char self) -> std::vector< char >::iterator"""
        return _PythonAnalysis.vector_char_begin(self)

    def end(self):
        r"""end(vector_char self) -> std::vector< char >::iterator"""
        return _PythonAnalysis.vector_char_end(self)

    def rbegin(self):
        r"""rbegin(vector_char self) -> std::vector< char >::reverse_iterator"""
        return _PythonAnalysis.vector_char_rbegin(self)

    def rend(self):
        r"""rend(vector_char self) -> std::vector< char >::reverse_iterator"""
        return _PythonAnalysis.vector_char_rend(self)

    def clear(self):
        r"""clear(vector_char self)"""
        return _PythonAnalysis.vector_char_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_char self) -> std::vector< char >::allocator_type"""
        return _PythonAnalysis.vector_char_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_char self)"""
        return _PythonAnalysis.vector_char_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_char self, std::vector< char >::iterator pos) -> std::vector< char >::iterator

        Parameters
        ----------
        pos: std::vector< char >::iterator

        erase(vector_char self, std::vector< char >::iterator first, std::vector< char >::iterator last) -> std::vector< char >::iterator

        Parameters
        ----------
        first: std::vector< char >::iterator
        last: std::vector< char >::iterator

        """
        return _PythonAnalysis.vector_char_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_char self) -> vector_char
        __init__(vector_char self, vector_char other) -> vector_char

        Parameters
        ----------
        other: std::vector< char > const &

        __init__(vector_char self, std::vector< char >::size_type size) -> vector_char

        Parameters
        ----------
        size: std::vector< char >::size_type

        __init__(vector_char self, std::vector< char >::size_type size, std::vector< char >::value_type const & value) -> vector_char

        Parameters
        ----------
        size: std::vector< char >::size_type
        value: std::vector< char >::value_type const &

        """
        _PythonAnalysis.vector_char_swiginit(self, _PythonAnalysis.new_vector_char(*args))

    def push_back(self, x):
        r"""
        push_back(vector_char self, std::vector< char >::value_type const & x)

        Parameters
        ----------
        x: std::vector< char >::value_type const &

        """
        return _PythonAnalysis.vector_char_push_back(self, x)

    def front(self):
        r"""front(vector_char self) -> std::vector< char >::value_type const &"""
        return _PythonAnalysis.vector_char_front(self)

    def back(self):
        r"""back(vector_char self) -> std::vector< char >::value_type const &"""
        return _PythonAnalysis.vector_char_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_char self, std::vector< char >::size_type n, std::vector< char >::value_type const & x)

        Parameters
        ----------
        n: std::vector< char >::size_type
        x: std::vector< char >::value_type const &

        """
        return _PythonAnalysis.vector_char_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_char self, std::vector< char >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< char >::size_type

        resize(vector_char self, std::vector< char >::size_type new_size, std::vector< char >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< char >::size_type
        x: std::vector< char >::value_type const &

        """
        return _PythonAnalysis.vector_char_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_char self, std::vector< char >::iterator pos, std::vector< char >::value_type const & x) -> std::vector< char >::iterator

        Parameters
        ----------
        pos: std::vector< char >::iterator
        x: std::vector< char >::value_type const &

        insert(vector_char self, std::vector< char >::iterator pos, std::vector< char >::size_type n, std::vector< char >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< char >::iterator
        n: std::vector< char >::size_type
        x: std::vector< char >::value_type const &

        """
        return _PythonAnalysis.vector_char_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_char self, std::vector< char >::size_type n)

        Parameters
        ----------
        n: std::vector< char >::size_type

        """
        return _PythonAnalysis.vector_char_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_char self) -> std::vector< char >::size_type"""
        return _PythonAnalysis.vector_char_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_char

# Register vector_char in _PythonAnalysis:
_PythonAnalysis.vector_char_swigregister(vector_char)
class vector_int(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_int self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_int self) -> bool"""
        return _PythonAnalysis.vector_int___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_int self) -> bool"""
        return _PythonAnalysis.vector_int___bool__(self)

    def __len__(self):
        r"""__len__(vector_int self) -> std::vector< int >::size_type"""
        return _PythonAnalysis.vector_int___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_int

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _PythonAnalysis.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_int v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _PythonAnalysis.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _PythonAnalysis.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_int self, std::vector< int >::difference_type i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(vector_int self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_int self, SWIGPY_SLICEOBJECT * slice) -> vector_int

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_int self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _PythonAnalysis.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_int self, SWIGPY_SLICEOBJECT * slice, vector_int v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(vector_int self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _PythonAnalysis.vector_int___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_int self) -> std::vector< int >::value_type"""
        return _PythonAnalysis.vector_int_pop(self)

    def append(self, x):
        r"""
        append(vector_int self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _PythonAnalysis.vector_int_append(self, x)

    def empty(self):
        r"""empty(vector_int self) -> bool"""
        return _PythonAnalysis.vector_int_empty(self)

    def size(self):
        r"""size(vector_int self) -> std::vector< int >::size_type"""
        return _PythonAnalysis.vector_int_size(self)

    def swap(self, v):
        r"""
        swap(vector_int self, vector_int v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _PythonAnalysis.vector_int_swap(self, v)

    def begin(self):
        r"""begin(vector_int self) -> std::vector< int >::iterator"""
        return _PythonAnalysis.vector_int_begin(self)

    def end(self):
        r"""end(vector_int self) -> std::vector< int >::iterator"""
        return _PythonAnalysis.vector_int_end(self)

    def rbegin(self):
        r"""rbegin(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _PythonAnalysis.vector_int_rbegin(self)

    def rend(self):
        r"""rend(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _PythonAnalysis.vector_int_rend(self)

    def clear(self):
        r"""clear(vector_int self)"""
        return _PythonAnalysis.vector_int_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_int self) -> std::vector< int >::allocator_type"""
        return _PythonAnalysis.vector_int_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_int self)"""
        return _PythonAnalysis.vector_int_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_int self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(vector_int self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _PythonAnalysis.vector_int_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_int self) -> vector_int
        __init__(vector_int self, vector_int other) -> vector_int

        Parameters
        ----------
        other: std::vector< int > const &

        __init__(vector_int self, std::vector< int >::size_type size) -> vector_int

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(vector_int self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_int

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        _PythonAnalysis.vector_int_swiginit(self, _PythonAnalysis.new_vector_int(*args))

    def push_back(self, x):
        r"""
        push_back(vector_int self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _PythonAnalysis.vector_int_push_back(self, x)

    def front(self):
        r"""front(vector_int self) -> std::vector< int >::value_type const &"""
        return _PythonAnalysis.vector_int_front(self)

    def back(self):
        r"""back(vector_int self) -> std::vector< int >::value_type const &"""
        return _PythonAnalysis.vector_int_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_int self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _PythonAnalysis.vector_int_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_int self, std::vector< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(vector_int self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _PythonAnalysis.vector_int_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _PythonAnalysis.vector_int_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_int self, std::vector< int >::size_type n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _PythonAnalysis.vector_int_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_int self) -> std::vector< int >::size_type"""
        return _PythonAnalysis.vector_int_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_int

# Register vector_int in _PythonAnalysis:
_PythonAnalysis.vector_int_swigregister(vector_int)
class vector_long_long(object):
    r"""Proxy of C++ std::vector< long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_long_long self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_long_long_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_long_long self) -> bool"""
        return _PythonAnalysis.vector_long_long___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_long_long self) -> bool"""
        return _PythonAnalysis.vector_long_long___bool__(self)

    def __len__(self):
        r"""__len__(vector_long_long self) -> std::vector< long >::size_type"""
        return _PythonAnalysis.vector_long_long___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_long_long self, std::vector< long >::difference_type i, std::vector< long >::difference_type j) -> vector_long_long

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        """
        return _PythonAnalysis.vector_long_long___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_long_long self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        __setslice__(vector_long_long self, std::vector< long >::difference_type i, std::vector< long >::difference_type j, vector_long_long v)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type
        v: std::vector< long,std::allocator< long > > const &

        """
        return _PythonAnalysis.vector_long_long___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_long_long self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        """
        return _PythonAnalysis.vector_long_long___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_long_long self, std::vector< long >::difference_type i)

        Parameters
        ----------
        i: std::vector< long >::difference_type

        __delitem__(vector_long_long self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_long_long___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_long_long self, SWIGPY_SLICEOBJECT * slice) -> vector_long_long

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_long_long self, std::vector< long >::difference_type i) -> std::vector< long >::value_type const &

        Parameters
        ----------
        i: std::vector< long >::difference_type

        """
        return _PythonAnalysis.vector_long_long___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_long_long self, SWIGPY_SLICEOBJECT * slice, vector_long_long v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< long,std::allocator< long > > const &

        __setitem__(vector_long_long self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_long_long self, std::vector< long >::difference_type i, std::vector< long >::value_type const & x)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        x: std::vector< long >::value_type const &

        """
        return _PythonAnalysis.vector_long_long___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_long_long self) -> std::vector< long >::value_type"""
        return _PythonAnalysis.vector_long_long_pop(self)

    def append(self, x):
        r"""
        append(vector_long_long self, std::vector< long >::value_type const & x)

        Parameters
        ----------
        x: std::vector< long >::value_type const &

        """
        return _PythonAnalysis.vector_long_long_append(self, x)

    def empty(self):
        r"""empty(vector_long_long self) -> bool"""
        return _PythonAnalysis.vector_long_long_empty(self)

    def size(self):
        r"""size(vector_long_long self) -> std::vector< long >::size_type"""
        return _PythonAnalysis.vector_long_long_size(self)

    def swap(self, v):
        r"""
        swap(vector_long_long self, vector_long_long v)

        Parameters
        ----------
        v: std::vector< long > &

        """
        return _PythonAnalysis.vector_long_long_swap(self, v)

    def begin(self):
        r"""begin(vector_long_long self) -> std::vector< long >::iterator"""
        return _PythonAnalysis.vector_long_long_begin(self)

    def end(self):
        r"""end(vector_long_long self) -> std::vector< long >::iterator"""
        return _PythonAnalysis.vector_long_long_end(self)

    def rbegin(self):
        r"""rbegin(vector_long_long self) -> std::vector< long >::reverse_iterator"""
        return _PythonAnalysis.vector_long_long_rbegin(self)

    def rend(self):
        r"""rend(vector_long_long self) -> std::vector< long >::reverse_iterator"""
        return _PythonAnalysis.vector_long_long_rend(self)

    def clear(self):
        r"""clear(vector_long_long self)"""
        return _PythonAnalysis.vector_long_long_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_long_long self) -> std::vector< long >::allocator_type"""
        return _PythonAnalysis.vector_long_long_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_long_long self)"""
        return _PythonAnalysis.vector_long_long_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_long_long self, std::vector< long >::iterator pos) -> std::vector< long >::iterator

        Parameters
        ----------
        pos: std::vector< long >::iterator

        erase(vector_long_long self, std::vector< long >::iterator first, std::vector< long >::iterator last) -> std::vector< long >::iterator

        Parameters
        ----------
        first: std::vector< long >::iterator
        last: std::vector< long >::iterator

        """
        return _PythonAnalysis.vector_long_long_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_long_long self) -> vector_long_long
        __init__(vector_long_long self, vector_long_long other) -> vector_long_long

        Parameters
        ----------
        other: std::vector< long > const &

        __init__(vector_long_long self, std::vector< long >::size_type size) -> vector_long_long

        Parameters
        ----------
        size: std::vector< long >::size_type

        __init__(vector_long_long self, std::vector< long >::size_type size, std::vector< long >::value_type const & value) -> vector_long_long

        Parameters
        ----------
        size: std::vector< long >::size_type
        value: std::vector< long >::value_type const &

        """
        _PythonAnalysis.vector_long_long_swiginit(self, _PythonAnalysis.new_vector_long_long(*args))

    def push_back(self, x):
        r"""
        push_back(vector_long_long self, std::vector< long >::value_type const & x)

        Parameters
        ----------
        x: std::vector< long >::value_type const &

        """
        return _PythonAnalysis.vector_long_long_push_back(self, x)

    def front(self):
        r"""front(vector_long_long self) -> std::vector< long >::value_type const &"""
        return _PythonAnalysis.vector_long_long_front(self)

    def back(self):
        r"""back(vector_long_long self) -> std::vector< long >::value_type const &"""
        return _PythonAnalysis.vector_long_long_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_long_long self, std::vector< long >::size_type n, std::vector< long >::value_type const & x)

        Parameters
        ----------
        n: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _PythonAnalysis.vector_long_long_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_long_long self, std::vector< long >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< long >::size_type

        resize(vector_long_long self, std::vector< long >::size_type new_size, std::vector< long >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _PythonAnalysis.vector_long_long_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_long_long self, std::vector< long >::iterator pos, std::vector< long >::value_type const & x) -> std::vector< long >::iterator

        Parameters
        ----------
        pos: std::vector< long >::iterator
        x: std::vector< long >::value_type const &

        insert(vector_long_long self, std::vector< long >::iterator pos, std::vector< long >::size_type n, std::vector< long >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< long >::iterator
        n: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _PythonAnalysis.vector_long_long_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_long_long self, std::vector< long >::size_type n)

        Parameters
        ----------
        n: std::vector< long >::size_type

        """
        return _PythonAnalysis.vector_long_long_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_long_long self) -> std::vector< long >::size_type"""
        return _PythonAnalysis.vector_long_long_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_long_long

# Register vector_long_long in _PythonAnalysis:
_PythonAnalysis.vector_long_long_swigregister(vector_long_long)
class vector_long(object):
    r"""Proxy of C++ std::vector< long long > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_long self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_long_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_long self) -> bool"""
        return _PythonAnalysis.vector_long___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_long self) -> bool"""
        return _PythonAnalysis.vector_long___bool__(self)

    def __len__(self):
        r"""__len__(vector_long self) -> std::vector< long long >::size_type"""
        return _PythonAnalysis.vector_long___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j) -> vector_long

        Parameters
        ----------
        i: std::vector< long long >::difference_type
        j: std::vector< long long >::difference_type

        """
        return _PythonAnalysis.vector_long___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j)

        Parameters
        ----------
        i: std::vector< long long >::difference_type
        j: std::vector< long long >::difference_type

        __setslice__(vector_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j, vector_long v)

        Parameters
        ----------
        i: std::vector< long long >::difference_type
        j: std::vector< long long >::difference_type
        v: std::vector< long long,std::allocator< long long > > const &

        """
        return _PythonAnalysis.vector_long___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j)

        Parameters
        ----------
        i: std::vector< long long >::difference_type
        j: std::vector< long long >::difference_type

        """
        return _PythonAnalysis.vector_long___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_long self, std::vector< long long >::difference_type i)

        Parameters
        ----------
        i: std::vector< long long >::difference_type

        __delitem__(vector_long self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_long___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_long self, SWIGPY_SLICEOBJECT * slice) -> vector_long

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_long self, std::vector< long long >::difference_type i) -> std::vector< long long >::value_type const &

        Parameters
        ----------
        i: std::vector< long long >::difference_type

        """
        return _PythonAnalysis.vector_long___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_long self, SWIGPY_SLICEOBJECT * slice, vector_long v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< long long,std::allocator< long long > > const &

        __setitem__(vector_long self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_long self, std::vector< long long >::difference_type i, std::vector< long long >::value_type const & x)

        Parameters
        ----------
        i: std::vector< long long >::difference_type
        x: std::vector< long long >::value_type const &

        """
        return _PythonAnalysis.vector_long___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_long self) -> std::vector< long long >::value_type"""
        return _PythonAnalysis.vector_long_pop(self)

    def append(self, x):
        r"""
        append(vector_long self, std::vector< long long >::value_type const & x)

        Parameters
        ----------
        x: std::vector< long long >::value_type const &

        """
        return _PythonAnalysis.vector_long_append(self, x)

    def empty(self):
        r"""empty(vector_long self) -> bool"""
        return _PythonAnalysis.vector_long_empty(self)

    def size(self):
        r"""size(vector_long self) -> std::vector< long long >::size_type"""
        return _PythonAnalysis.vector_long_size(self)

    def swap(self, v):
        r"""
        swap(vector_long self, vector_long v)

        Parameters
        ----------
        v: std::vector< long long > &

        """
        return _PythonAnalysis.vector_long_swap(self, v)

    def begin(self):
        r"""begin(vector_long self) -> std::vector< long long >::iterator"""
        return _PythonAnalysis.vector_long_begin(self)

    def end(self):
        r"""end(vector_long self) -> std::vector< long long >::iterator"""
        return _PythonAnalysis.vector_long_end(self)

    def rbegin(self):
        r"""rbegin(vector_long self) -> std::vector< long long >::reverse_iterator"""
        return _PythonAnalysis.vector_long_rbegin(self)

    def rend(self):
        r"""rend(vector_long self) -> std::vector< long long >::reverse_iterator"""
        return _PythonAnalysis.vector_long_rend(self)

    def clear(self):
        r"""clear(vector_long self)"""
        return _PythonAnalysis.vector_long_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_long self) -> std::vector< long long >::allocator_type"""
        return _PythonAnalysis.vector_long_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_long self)"""
        return _PythonAnalysis.vector_long_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_long self, std::vector< long long >::iterator pos) -> std::vector< long long >::iterator

        Parameters
        ----------
        pos: std::vector< long long >::iterator

        erase(vector_long self, std::vector< long long >::iterator first, std::vector< long long >::iterator last) -> std::vector< long long >::iterator

        Parameters
        ----------
        first: std::vector< long long >::iterator
        last: std::vector< long long >::iterator

        """
        return _PythonAnalysis.vector_long_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_long self) -> vector_long
        __init__(vector_long self, vector_long other) -> vector_long

        Parameters
        ----------
        other: std::vector< long long > const &

        __init__(vector_long self, std::vector< long long >::size_type size) -> vector_long

        Parameters
        ----------
        size: std::vector< long long >::size_type

        __init__(vector_long self, std::vector< long long >::size_type size, std::vector< long long >::value_type const & value) -> vector_long

        Parameters
        ----------
        size: std::vector< long long >::size_type
        value: std::vector< long long >::value_type const &

        """
        _PythonAnalysis.vector_long_swiginit(self, _PythonAnalysis.new_vector_long(*args))

    def push_back(self, x):
        r"""
        push_back(vector_long self, std::vector< long long >::value_type const & x)

        Parameters
        ----------
        x: std::vector< long long >::value_type const &

        """
        return _PythonAnalysis.vector_long_push_back(self, x)

    def front(self):
        r"""front(vector_long self) -> std::vector< long long >::value_type const &"""
        return _PythonAnalysis.vector_long_front(self)

    def back(self):
        r"""back(vector_long self) -> std::vector< long long >::value_type const &"""
        return _PythonAnalysis.vector_long_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_long self, std::vector< long long >::size_type n, std::vector< long long >::value_type const & x)

        Parameters
        ----------
        n: std::vector< long long >::size_type
        x: std::vector< long long >::value_type const &

        """
        return _PythonAnalysis.vector_long_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_long self, std::vector< long long >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< long long >::size_type

        resize(vector_long self, std::vector< long long >::size_type new_size, std::vector< long long >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< long long >::size_type
        x: std::vector< long long >::value_type const &

        """
        return _PythonAnalysis.vector_long_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_long self, std::vector< long long >::iterator pos, std::vector< long long >::value_type const & x) -> std::vector< long long >::iterator

        Parameters
        ----------
        pos: std::vector< long long >::iterator
        x: std::vector< long long >::value_type const &

        insert(vector_long self, std::vector< long long >::iterator pos, std::vector< long long >::size_type n, std::vector< long long >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< long long >::iterator
        n: std::vector< long long >::size_type
        x: std::vector< long long >::value_type const &

        """
        return _PythonAnalysis.vector_long_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_long self, std::vector< long long >::size_type n)

        Parameters
        ----------
        n: std::vector< long long >::size_type

        """
        return _PythonAnalysis.vector_long_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_long self) -> std::vector< long long >::size_type"""
        return _PythonAnalysis.vector_long_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_long

# Register vector_long in _PythonAnalysis:
_PythonAnalysis.vector_long_swigregister(vector_long)
class vector_float(object):
    r"""Proxy of C++ std::vector< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_float self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_float_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_float self) -> bool"""
        return _PythonAnalysis.vector_float___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_float self) -> bool"""
        return _PythonAnalysis.vector_float___bool__(self)

    def __len__(self):
        r"""__len__(vector_float self) -> std::vector< float >::size_type"""
        return _PythonAnalysis.vector_float___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> vector_float

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _PythonAnalysis.vector_float___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        __setslice__(vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, vector_float v)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type
        v: std::vector< float,std::allocator< float > > const &

        """
        return _PythonAnalysis.vector_float___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        j: std::vector< float >::difference_type

        """
        return _PythonAnalysis.vector_float___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_float self, std::vector< float >::difference_type i)

        Parameters
        ----------
        i: std::vector< float >::difference_type

        __delitem__(vector_float self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_float___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_float self, SWIGPY_SLICEOBJECT * slice) -> vector_float

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_float self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &

        Parameters
        ----------
        i: std::vector< float >::difference_type

        """
        return _PythonAnalysis.vector_float___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_float self, SWIGPY_SLICEOBJECT * slice, vector_float v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< float,std::allocator< float > > const &

        __setitem__(vector_float self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_float self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)

        Parameters
        ----------
        i: std::vector< float >::difference_type
        x: std::vector< float >::value_type const &

        """
        return _PythonAnalysis.vector_float___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_float self) -> std::vector< float >::value_type"""
        return _PythonAnalysis.vector_float_pop(self)

    def append(self, x):
        r"""
        append(vector_float self, std::vector< float >::value_type const & x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _PythonAnalysis.vector_float_append(self, x)

    def empty(self):
        r"""empty(vector_float self) -> bool"""
        return _PythonAnalysis.vector_float_empty(self)

    def size(self):
        r"""size(vector_float self) -> std::vector< float >::size_type"""
        return _PythonAnalysis.vector_float_size(self)

    def swap(self, v):
        r"""
        swap(vector_float self, vector_float v)

        Parameters
        ----------
        v: std::vector< float > &

        """
        return _PythonAnalysis.vector_float_swap(self, v)

    def begin(self):
        r"""begin(vector_float self) -> std::vector< float >::iterator"""
        return _PythonAnalysis.vector_float_begin(self)

    def end(self):
        r"""end(vector_float self) -> std::vector< float >::iterator"""
        return _PythonAnalysis.vector_float_end(self)

    def rbegin(self):
        r"""rbegin(vector_float self) -> std::vector< float >::reverse_iterator"""
        return _PythonAnalysis.vector_float_rbegin(self)

    def rend(self):
        r"""rend(vector_float self) -> std::vector< float >::reverse_iterator"""
        return _PythonAnalysis.vector_float_rend(self)

    def clear(self):
        r"""clear(vector_float self)"""
        return _PythonAnalysis.vector_float_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_float self) -> std::vector< float >::allocator_type"""
        return _PythonAnalysis.vector_float_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_float self)"""
        return _PythonAnalysis.vector_float_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_float self, std::vector< float >::iterator pos) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator

        erase(vector_float self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator

        Parameters
        ----------
        first: std::vector< float >::iterator
        last: std::vector< float >::iterator

        """
        return _PythonAnalysis.vector_float_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_float self) -> vector_float
        __init__(vector_float self, vector_float other) -> vector_float

        Parameters
        ----------
        other: std::vector< float > const &

        __init__(vector_float self, std::vector< float >::size_type size) -> vector_float

        Parameters
        ----------
        size: std::vector< float >::size_type

        __init__(vector_float self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> vector_float

        Parameters
        ----------
        size: std::vector< float >::size_type
        value: std::vector< float >::value_type const &

        """
        _PythonAnalysis.vector_float_swiginit(self, _PythonAnalysis.new_vector_float(*args))

    def push_back(self, x):
        r"""
        push_back(vector_float self, std::vector< float >::value_type const & x)

        Parameters
        ----------
        x: std::vector< float >::value_type const &

        """
        return _PythonAnalysis.vector_float_push_back(self, x)

    def front(self):
        r"""front(vector_float self) -> std::vector< float >::value_type const &"""
        return _PythonAnalysis.vector_float_front(self)

    def back(self):
        r"""back(vector_float self) -> std::vector< float >::value_type const &"""
        return _PythonAnalysis.vector_float_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_float self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters
        ----------
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _PythonAnalysis.vector_float_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_float self, std::vector< float >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< float >::size_type

        resize(vector_float self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _PythonAnalysis.vector_float_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_float self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator

        Parameters
        ----------
        pos: std::vector< float >::iterator
        x: std::vector< float >::value_type const &

        insert(vector_float self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< float >::iterator
        n: std::vector< float >::size_type
        x: std::vector< float >::value_type const &

        """
        return _PythonAnalysis.vector_float_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_float self, std::vector< float >::size_type n)

        Parameters
        ----------
        n: std::vector< float >::size_type

        """
        return _PythonAnalysis.vector_float_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_float self) -> std::vector< float >::size_type"""
        return _PythonAnalysis.vector_float_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_float

# Register vector_float in _PythonAnalysis:
_PythonAnalysis.vector_float_swigregister(vector_float)
class vector_double(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_double self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_double self) -> bool"""
        return _PythonAnalysis.vector_double___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_double self) -> bool"""
        return _PythonAnalysis.vector_double___bool__(self)

    def __len__(self):
        r"""__len__(vector_double self) -> std::vector< double >::size_type"""
        return _PythonAnalysis.vector_double___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> std::vector< double,std::allocator< double > > *

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _PythonAnalysis.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, std::vector< double,std::allocator< double > > const & v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _PythonAnalysis.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _PythonAnalysis.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_double self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(vector_double self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_double self, SWIGPY_SLICEOBJECT * slice) -> std::vector< double,std::allocator< double > >

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_double self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _PythonAnalysis.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_double self, SWIGPY_SLICEOBJECT * slice, std::vector< double,std::allocator< double > > const & v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(vector_double self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _PythonAnalysis.vector_double___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_double self) -> std::vector< double >::value_type"""
        return _PythonAnalysis.vector_double_pop(self)

    def append(self, x):
        r"""
        append(vector_double self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _PythonAnalysis.vector_double_append(self, x)

    def empty(self):
        r"""empty(vector_double self) -> bool"""
        return _PythonAnalysis.vector_double_empty(self)

    def size(self):
        r"""size(vector_double self) -> std::vector< double >::size_type"""
        return _PythonAnalysis.vector_double_size(self)

    def swap(self, v):
        r"""
        swap(vector_double self, vector_double v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _PythonAnalysis.vector_double_swap(self, v)

    def begin(self):
        r"""begin(vector_double self) -> std::vector< double >::iterator"""
        return _PythonAnalysis.vector_double_begin(self)

    def end(self):
        r"""end(vector_double self) -> std::vector< double >::iterator"""
        return _PythonAnalysis.vector_double_end(self)

    def rbegin(self):
        r"""rbegin(vector_double self) -> std::vector< double >::reverse_iterator"""
        return _PythonAnalysis.vector_double_rbegin(self)

    def rend(self):
        r"""rend(vector_double self) -> std::vector< double >::reverse_iterator"""
        return _PythonAnalysis.vector_double_rend(self)

    def clear(self):
        r"""clear(vector_double self)"""
        return _PythonAnalysis.vector_double_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_double self) -> std::vector< double >::allocator_type"""
        return _PythonAnalysis.vector_double_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_double self)"""
        return _PythonAnalysis.vector_double_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_double self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(vector_double self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _PythonAnalysis.vector_double_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_double self) -> vector_double
        __init__(vector_double self, vector_double other) -> vector_double

        Parameters
        ----------
        other: std::vector< double > const &

        __init__(vector_double self, std::vector< double >::size_type size) -> vector_double

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(vector_double self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vector_double

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        _PythonAnalysis.vector_double_swiginit(self, _PythonAnalysis.new_vector_double(*args))

    def push_back(self, x):
        r"""
        push_back(vector_double self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _PythonAnalysis.vector_double_push_back(self, x)

    def front(self):
        r"""front(vector_double self) -> std::vector< double >::value_type const &"""
        return _PythonAnalysis.vector_double_front(self)

    def back(self):
        r"""back(vector_double self) -> std::vector< double >::value_type const &"""
        return _PythonAnalysis.vector_double_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _PythonAnalysis.vector_double_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_double self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(vector_double self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _PythonAnalysis.vector_double_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _PythonAnalysis.vector_double_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_double self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _PythonAnalysis.vector_double_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_double self) -> std::vector< double >::size_type"""
        return _PythonAnalysis.vector_double_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_double

# Register vector_double in _PythonAnalysis:
_PythonAnalysis.vector_double_swigregister(vector_double)
class vector_int_array_2(object):
    r"""Proxy of C++ std::vector< std::array< int,2 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_int_array_2 self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_int_array_2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_int_array_2 self) -> bool"""
        return _PythonAnalysis.vector_int_array_2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_int_array_2 self) -> bool"""
        return _PythonAnalysis.vector_int_array_2___bool__(self)

    def __len__(self):
        r"""__len__(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::size_type"""
        return _PythonAnalysis.vector_int_array_2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i, std::vector< std::array< int,2 > >::difference_type j) -> vector_int_array_2

        Parameters
        ----------
        i: std::vector< std::array< int,2 > >::difference_type
        j: std::vector< std::array< int,2 > >::difference_type

        """
        return _PythonAnalysis.vector_int_array_2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i, std::vector< std::array< int,2 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< int,2 > >::difference_type
        j: std::vector< std::array< int,2 > >::difference_type

        __setslice__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i, std::vector< std::array< int,2 > >::difference_type j, vector_int_array_2 v)

        Parameters
        ----------
        i: std::vector< std::array< int,2 > >::difference_type
        j: std::vector< std::array< int,2 > >::difference_type
        v: std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &

        """
        return _PythonAnalysis.vector_int_array_2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i, std::vector< std::array< int,2 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< int,2 > >::difference_type
        j: std::vector< std::array< int,2 > >::difference_type

        """
        return _PythonAnalysis.vector_int_array_2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::array< int,2 > >::difference_type

        __delitem__(vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_int_array_2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice) -> vector_int_array_2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i) -> array_int_2

        Parameters
        ----------
        i: std::vector< std::array< int,2 > >::difference_type

        """
        return _PythonAnalysis.vector_int_array_2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice, vector_int_array_2 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &

        __setitem__(vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i, array_int_2 x)

        Parameters
        ----------
        i: std::vector< std::array< int,2 > >::difference_type
        x: std::vector< std::array< int,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_2___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_int_array_2 self) -> array_int_2"""
        return _PythonAnalysis.vector_int_array_2_pop(self)

    def append(self, x):
        r"""
        append(vector_int_array_2 self, array_int_2 x)

        Parameters
        ----------
        x: std::vector< std::array< int,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_2_append(self, x)

    def empty(self):
        r"""empty(vector_int_array_2 self) -> bool"""
        return _PythonAnalysis.vector_int_array_2_empty(self)

    def size(self):
        r"""size(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::size_type"""
        return _PythonAnalysis.vector_int_array_2_size(self)

    def swap(self, v):
        r"""
        swap(vector_int_array_2 self, vector_int_array_2 v)

        Parameters
        ----------
        v: std::vector< std::array< int,2 > > &

        """
        return _PythonAnalysis.vector_int_array_2_swap(self, v)

    def begin(self):
        r"""begin(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::iterator"""
        return _PythonAnalysis.vector_int_array_2_begin(self)

    def end(self):
        r"""end(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::iterator"""
        return _PythonAnalysis.vector_int_array_2_end(self)

    def rbegin(self):
        r"""rbegin(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::reverse_iterator"""
        return _PythonAnalysis.vector_int_array_2_rbegin(self)

    def rend(self):
        r"""rend(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::reverse_iterator"""
        return _PythonAnalysis.vector_int_array_2_rend(self)

    def clear(self):
        r"""clear(vector_int_array_2 self)"""
        return _PythonAnalysis.vector_int_array_2_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::allocator_type"""
        return _PythonAnalysis.vector_int_array_2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_int_array_2 self)"""
        return _PythonAnalysis.vector_int_array_2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_int_array_2 self, std::vector< std::array< int,2 > >::iterator pos) -> std::vector< std::array< int,2 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< int,2 > >::iterator

        erase(vector_int_array_2 self, std::vector< std::array< int,2 > >::iterator first, std::vector< std::array< int,2 > >::iterator last) -> std::vector< std::array< int,2 > >::iterator

        Parameters
        ----------
        first: std::vector< std::array< int,2 > >::iterator
        last: std::vector< std::array< int,2 > >::iterator

        """
        return _PythonAnalysis.vector_int_array_2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_int_array_2 self) -> vector_int_array_2
        __init__(vector_int_array_2 self, vector_int_array_2 other) -> vector_int_array_2

        Parameters
        ----------
        other: std::vector< std::array< int,2 > > const &

        __init__(vector_int_array_2 self, std::vector< std::array< int,2 > >::size_type size) -> vector_int_array_2

        Parameters
        ----------
        size: std::vector< std::array< int,2 > >::size_type

        __init__(vector_int_array_2 self, std::vector< std::array< int,2 > >::size_type size, array_int_2 value) -> vector_int_array_2

        Parameters
        ----------
        size: std::vector< std::array< int,2 > >::size_type
        value: std::vector< std::array< int,2 > >::value_type const &

        """
        _PythonAnalysis.vector_int_array_2_swiginit(self, _PythonAnalysis.new_vector_int_array_2(*args))

    def push_back(self, x):
        r"""
        push_back(vector_int_array_2 self, array_int_2 x)

        Parameters
        ----------
        x: std::vector< std::array< int,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_2_push_back(self, x)

    def front(self):
        r"""front(vector_int_array_2 self) -> array_int_2"""
        return _PythonAnalysis.vector_int_array_2_front(self)

    def back(self):
        r"""back(vector_int_array_2 self) -> array_int_2"""
        return _PythonAnalysis.vector_int_array_2_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_int_array_2 self, std::vector< std::array< int,2 > >::size_type n, array_int_2 x)

        Parameters
        ----------
        n: std::vector< std::array< int,2 > >::size_type
        x: std::vector< std::array< int,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_int_array_2 self, std::vector< std::array< int,2 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::array< int,2 > >::size_type

        resize(vector_int_array_2 self, std::vector< std::array< int,2 > >::size_type new_size, array_int_2 x)

        Parameters
        ----------
        new_size: std::vector< std::array< int,2 > >::size_type
        x: std::vector< std::array< int,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_int_array_2 self, std::vector< std::array< int,2 > >::iterator pos, array_int_2 x) -> std::vector< std::array< int,2 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< int,2 > >::iterator
        x: std::vector< std::array< int,2 > >::value_type const &

        insert(vector_int_array_2 self, std::vector< std::array< int,2 > >::iterator pos, std::vector< std::array< int,2 > >::size_type n, array_int_2 x)

        Parameters
        ----------
        pos: std::vector< std::array< int,2 > >::iterator
        n: std::vector< std::array< int,2 > >::size_type
        x: std::vector< std::array< int,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_int_array_2 self, std::vector< std::array< int,2 > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::array< int,2 > >::size_type

        """
        return _PythonAnalysis.vector_int_array_2_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::size_type"""
        return _PythonAnalysis.vector_int_array_2_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_int_array_2

# Register vector_int_array_2 in _PythonAnalysis:
_PythonAnalysis.vector_int_array_2_swigregister(vector_int_array_2)
class vector_int_array_3(object):
    r"""Proxy of C++ std::vector< std::array< int,3 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_int_array_3 self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_int_array_3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_int_array_3 self) -> bool"""
        return _PythonAnalysis.vector_int_array_3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_int_array_3 self) -> bool"""
        return _PythonAnalysis.vector_int_array_3___bool__(self)

    def __len__(self):
        r"""__len__(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::size_type"""
        return _PythonAnalysis.vector_int_array_3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i, std::vector< std::array< int,3 > >::difference_type j) -> vector_int_array_3

        Parameters
        ----------
        i: std::vector< std::array< int,3 > >::difference_type
        j: std::vector< std::array< int,3 > >::difference_type

        """
        return _PythonAnalysis.vector_int_array_3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i, std::vector< std::array< int,3 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< int,3 > >::difference_type
        j: std::vector< std::array< int,3 > >::difference_type

        __setslice__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i, std::vector< std::array< int,3 > >::difference_type j, vector_int_array_3 v)

        Parameters
        ----------
        i: std::vector< std::array< int,3 > >::difference_type
        j: std::vector< std::array< int,3 > >::difference_type
        v: std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &

        """
        return _PythonAnalysis.vector_int_array_3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i, std::vector< std::array< int,3 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< int,3 > >::difference_type
        j: std::vector< std::array< int,3 > >::difference_type

        """
        return _PythonAnalysis.vector_int_array_3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::array< int,3 > >::difference_type

        __delitem__(vector_int_array_3 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_int_array_3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_int_array_3 self, SWIGPY_SLICEOBJECT * slice) -> vector_int_array_3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i) -> array_int_3

        Parameters
        ----------
        i: std::vector< std::array< int,3 > >::difference_type

        """
        return _PythonAnalysis.vector_int_array_3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_int_array_3 self, SWIGPY_SLICEOBJECT * slice, vector_int_array_3 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &

        __setitem__(vector_int_array_3 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i, array_int_3 x)

        Parameters
        ----------
        i: std::vector< std::array< int,3 > >::difference_type
        x: std::vector< std::array< int,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_3___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_int_array_3 self) -> array_int_3"""
        return _PythonAnalysis.vector_int_array_3_pop(self)

    def append(self, x):
        r"""
        append(vector_int_array_3 self, array_int_3 x)

        Parameters
        ----------
        x: std::vector< std::array< int,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_3_append(self, x)

    def empty(self):
        r"""empty(vector_int_array_3 self) -> bool"""
        return _PythonAnalysis.vector_int_array_3_empty(self)

    def size(self):
        r"""size(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::size_type"""
        return _PythonAnalysis.vector_int_array_3_size(self)

    def swap(self, v):
        r"""
        swap(vector_int_array_3 self, vector_int_array_3 v)

        Parameters
        ----------
        v: std::vector< std::array< int,3 > > &

        """
        return _PythonAnalysis.vector_int_array_3_swap(self, v)

    def begin(self):
        r"""begin(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::iterator"""
        return _PythonAnalysis.vector_int_array_3_begin(self)

    def end(self):
        r"""end(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::iterator"""
        return _PythonAnalysis.vector_int_array_3_end(self)

    def rbegin(self):
        r"""rbegin(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::reverse_iterator"""
        return _PythonAnalysis.vector_int_array_3_rbegin(self)

    def rend(self):
        r"""rend(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::reverse_iterator"""
        return _PythonAnalysis.vector_int_array_3_rend(self)

    def clear(self):
        r"""clear(vector_int_array_3 self)"""
        return _PythonAnalysis.vector_int_array_3_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::allocator_type"""
        return _PythonAnalysis.vector_int_array_3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_int_array_3 self)"""
        return _PythonAnalysis.vector_int_array_3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_int_array_3 self, std::vector< std::array< int,3 > >::iterator pos) -> std::vector< std::array< int,3 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< int,3 > >::iterator

        erase(vector_int_array_3 self, std::vector< std::array< int,3 > >::iterator first, std::vector< std::array< int,3 > >::iterator last) -> std::vector< std::array< int,3 > >::iterator

        Parameters
        ----------
        first: std::vector< std::array< int,3 > >::iterator
        last: std::vector< std::array< int,3 > >::iterator

        """
        return _PythonAnalysis.vector_int_array_3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_int_array_3 self) -> vector_int_array_3
        __init__(vector_int_array_3 self, vector_int_array_3 other) -> vector_int_array_3

        Parameters
        ----------
        other: std::vector< std::array< int,3 > > const &

        __init__(vector_int_array_3 self, std::vector< std::array< int,3 > >::size_type size) -> vector_int_array_3

        Parameters
        ----------
        size: std::vector< std::array< int,3 > >::size_type

        __init__(vector_int_array_3 self, std::vector< std::array< int,3 > >::size_type size, array_int_3 value) -> vector_int_array_3

        Parameters
        ----------
        size: std::vector< std::array< int,3 > >::size_type
        value: std::vector< std::array< int,3 > >::value_type const &

        """
        _PythonAnalysis.vector_int_array_3_swiginit(self, _PythonAnalysis.new_vector_int_array_3(*args))

    def push_back(self, x):
        r"""
        push_back(vector_int_array_3 self, array_int_3 x)

        Parameters
        ----------
        x: std::vector< std::array< int,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_3_push_back(self, x)

    def front(self):
        r"""front(vector_int_array_3 self) -> array_int_3"""
        return _PythonAnalysis.vector_int_array_3_front(self)

    def back(self):
        r"""back(vector_int_array_3 self) -> array_int_3"""
        return _PythonAnalysis.vector_int_array_3_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_int_array_3 self, std::vector< std::array< int,3 > >::size_type n, array_int_3 x)

        Parameters
        ----------
        n: std::vector< std::array< int,3 > >::size_type
        x: std::vector< std::array< int,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_int_array_3 self, std::vector< std::array< int,3 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::array< int,3 > >::size_type

        resize(vector_int_array_3 self, std::vector< std::array< int,3 > >::size_type new_size, array_int_3 x)

        Parameters
        ----------
        new_size: std::vector< std::array< int,3 > >::size_type
        x: std::vector< std::array< int,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_int_array_3 self, std::vector< std::array< int,3 > >::iterator pos, array_int_3 x) -> std::vector< std::array< int,3 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< int,3 > >::iterator
        x: std::vector< std::array< int,3 > >::value_type const &

        insert(vector_int_array_3 self, std::vector< std::array< int,3 > >::iterator pos, std::vector< std::array< int,3 > >::size_type n, array_int_3 x)

        Parameters
        ----------
        pos: std::vector< std::array< int,3 > >::iterator
        n: std::vector< std::array< int,3 > >::size_type
        x: std::vector< std::array< int,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_int_array_3 self, std::vector< std::array< int,3 > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::array< int,3 > >::size_type

        """
        return _PythonAnalysis.vector_int_array_3_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::size_type"""
        return _PythonAnalysis.vector_int_array_3_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_int_array_3

# Register vector_int_array_3 in _PythonAnalysis:
_PythonAnalysis.vector_int_array_3_swigregister(vector_int_array_3)
class vector_int_array_6(object):
    r"""Proxy of C++ std::vector< std::array< int,6 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_int_array_6 self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_int_array_6_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_int_array_6 self) -> bool"""
        return _PythonAnalysis.vector_int_array_6___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_int_array_6 self) -> bool"""
        return _PythonAnalysis.vector_int_array_6___bool__(self)

    def __len__(self):
        r"""__len__(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::size_type"""
        return _PythonAnalysis.vector_int_array_6___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i, std::vector< std::array< int,6 > >::difference_type j) -> vector_int_array_6

        Parameters
        ----------
        i: std::vector< std::array< int,6 > >::difference_type
        j: std::vector< std::array< int,6 > >::difference_type

        """
        return _PythonAnalysis.vector_int_array_6___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i, std::vector< std::array< int,6 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< int,6 > >::difference_type
        j: std::vector< std::array< int,6 > >::difference_type

        __setslice__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i, std::vector< std::array< int,6 > >::difference_type j, vector_int_array_6 v)

        Parameters
        ----------
        i: std::vector< std::array< int,6 > >::difference_type
        j: std::vector< std::array< int,6 > >::difference_type
        v: std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &

        """
        return _PythonAnalysis.vector_int_array_6___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i, std::vector< std::array< int,6 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< int,6 > >::difference_type
        j: std::vector< std::array< int,6 > >::difference_type

        """
        return _PythonAnalysis.vector_int_array_6___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::array< int,6 > >::difference_type

        __delitem__(vector_int_array_6 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_int_array_6___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_int_array_6 self, SWIGPY_SLICEOBJECT * slice) -> vector_int_array_6

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i) -> array_int_6

        Parameters
        ----------
        i: std::vector< std::array< int,6 > >::difference_type

        """
        return _PythonAnalysis.vector_int_array_6___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_int_array_6 self, SWIGPY_SLICEOBJECT * slice, vector_int_array_6 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &

        __setitem__(vector_int_array_6 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i, array_int_6 x)

        Parameters
        ----------
        i: std::vector< std::array< int,6 > >::difference_type
        x: std::vector< std::array< int,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_6___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_int_array_6 self) -> array_int_6"""
        return _PythonAnalysis.vector_int_array_6_pop(self)

    def append(self, x):
        r"""
        append(vector_int_array_6 self, array_int_6 x)

        Parameters
        ----------
        x: std::vector< std::array< int,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_6_append(self, x)

    def empty(self):
        r"""empty(vector_int_array_6 self) -> bool"""
        return _PythonAnalysis.vector_int_array_6_empty(self)

    def size(self):
        r"""size(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::size_type"""
        return _PythonAnalysis.vector_int_array_6_size(self)

    def swap(self, v):
        r"""
        swap(vector_int_array_6 self, vector_int_array_6 v)

        Parameters
        ----------
        v: std::vector< std::array< int,6 > > &

        """
        return _PythonAnalysis.vector_int_array_6_swap(self, v)

    def begin(self):
        r"""begin(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::iterator"""
        return _PythonAnalysis.vector_int_array_6_begin(self)

    def end(self):
        r"""end(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::iterator"""
        return _PythonAnalysis.vector_int_array_6_end(self)

    def rbegin(self):
        r"""rbegin(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::reverse_iterator"""
        return _PythonAnalysis.vector_int_array_6_rbegin(self)

    def rend(self):
        r"""rend(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::reverse_iterator"""
        return _PythonAnalysis.vector_int_array_6_rend(self)

    def clear(self):
        r"""clear(vector_int_array_6 self)"""
        return _PythonAnalysis.vector_int_array_6_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::allocator_type"""
        return _PythonAnalysis.vector_int_array_6_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_int_array_6 self)"""
        return _PythonAnalysis.vector_int_array_6_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_int_array_6 self, std::vector< std::array< int,6 > >::iterator pos) -> std::vector< std::array< int,6 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< int,6 > >::iterator

        erase(vector_int_array_6 self, std::vector< std::array< int,6 > >::iterator first, std::vector< std::array< int,6 > >::iterator last) -> std::vector< std::array< int,6 > >::iterator

        Parameters
        ----------
        first: std::vector< std::array< int,6 > >::iterator
        last: std::vector< std::array< int,6 > >::iterator

        """
        return _PythonAnalysis.vector_int_array_6_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_int_array_6 self) -> vector_int_array_6
        __init__(vector_int_array_6 self, vector_int_array_6 other) -> vector_int_array_6

        Parameters
        ----------
        other: std::vector< std::array< int,6 > > const &

        __init__(vector_int_array_6 self, std::vector< std::array< int,6 > >::size_type size) -> vector_int_array_6

        Parameters
        ----------
        size: std::vector< std::array< int,6 > >::size_type

        __init__(vector_int_array_6 self, std::vector< std::array< int,6 > >::size_type size, array_int_6 value) -> vector_int_array_6

        Parameters
        ----------
        size: std::vector< std::array< int,6 > >::size_type
        value: std::vector< std::array< int,6 > >::value_type const &

        """
        _PythonAnalysis.vector_int_array_6_swiginit(self, _PythonAnalysis.new_vector_int_array_6(*args))

    def push_back(self, x):
        r"""
        push_back(vector_int_array_6 self, array_int_6 x)

        Parameters
        ----------
        x: std::vector< std::array< int,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_6_push_back(self, x)

    def front(self):
        r"""front(vector_int_array_6 self) -> array_int_6"""
        return _PythonAnalysis.vector_int_array_6_front(self)

    def back(self):
        r"""back(vector_int_array_6 self) -> array_int_6"""
        return _PythonAnalysis.vector_int_array_6_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_int_array_6 self, std::vector< std::array< int,6 > >::size_type n, array_int_6 x)

        Parameters
        ----------
        n: std::vector< std::array< int,6 > >::size_type
        x: std::vector< std::array< int,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_6_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_int_array_6 self, std::vector< std::array< int,6 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::array< int,6 > >::size_type

        resize(vector_int_array_6 self, std::vector< std::array< int,6 > >::size_type new_size, array_int_6 x)

        Parameters
        ----------
        new_size: std::vector< std::array< int,6 > >::size_type
        x: std::vector< std::array< int,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_6_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_int_array_6 self, std::vector< std::array< int,6 > >::iterator pos, array_int_6 x) -> std::vector< std::array< int,6 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< int,6 > >::iterator
        x: std::vector< std::array< int,6 > >::value_type const &

        insert(vector_int_array_6 self, std::vector< std::array< int,6 > >::iterator pos, std::vector< std::array< int,6 > >::size_type n, array_int_6 x)

        Parameters
        ----------
        pos: std::vector< std::array< int,6 > >::iterator
        n: std::vector< std::array< int,6 > >::size_type
        x: std::vector< std::array< int,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_int_array_6_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_int_array_6 self, std::vector< std::array< int,6 > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::array< int,6 > >::size_type

        """
        return _PythonAnalysis.vector_int_array_6_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::size_type"""
        return _PythonAnalysis.vector_int_array_6_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_int_array_6

# Register vector_int_array_6 in _PythonAnalysis:
_PythonAnalysis.vector_int_array_6_swigregister(vector_int_array_6)
class vector_double_array_2(object):
    r"""Proxy of C++ std::vector< std::array< double,2 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_double_array_2 self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_double_array_2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_double_array_2 self) -> bool"""
        return _PythonAnalysis.vector_double_array_2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_double_array_2 self) -> bool"""
        return _PythonAnalysis.vector_double_array_2___bool__(self)

    def __len__(self):
        r"""__len__(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::size_type"""
        return _PythonAnalysis.vector_double_array_2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i, std::vector< std::array< double,2 > >::difference_type j) -> vector_double_array_2

        Parameters
        ----------
        i: std::vector< std::array< double,2 > >::difference_type
        j: std::vector< std::array< double,2 > >::difference_type

        """
        return _PythonAnalysis.vector_double_array_2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i, std::vector< std::array< double,2 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< double,2 > >::difference_type
        j: std::vector< std::array< double,2 > >::difference_type

        __setslice__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i, std::vector< std::array< double,2 > >::difference_type j, vector_double_array_2 v)

        Parameters
        ----------
        i: std::vector< std::array< double,2 > >::difference_type
        j: std::vector< std::array< double,2 > >::difference_type
        v: std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &

        """
        return _PythonAnalysis.vector_double_array_2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i, std::vector< std::array< double,2 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< double,2 > >::difference_type
        j: std::vector< std::array< double,2 > >::difference_type

        """
        return _PythonAnalysis.vector_double_array_2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::array< double,2 > >::difference_type

        __delitem__(vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_double_array_2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice) -> vector_double_array_2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i) -> array_double_2

        Parameters
        ----------
        i: std::vector< std::array< double,2 > >::difference_type

        """
        return _PythonAnalysis.vector_double_array_2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice, vector_double_array_2 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &

        __setitem__(vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i, array_double_2 x)

        Parameters
        ----------
        i: std::vector< std::array< double,2 > >::difference_type
        x: std::vector< std::array< double,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_2___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_double_array_2 self) -> array_double_2"""
        return _PythonAnalysis.vector_double_array_2_pop(self)

    def append(self, x):
        r"""
        append(vector_double_array_2 self, array_double_2 x)

        Parameters
        ----------
        x: std::vector< std::array< double,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_2_append(self, x)

    def empty(self):
        r"""empty(vector_double_array_2 self) -> bool"""
        return _PythonAnalysis.vector_double_array_2_empty(self)

    def size(self):
        r"""size(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::size_type"""
        return _PythonAnalysis.vector_double_array_2_size(self)

    def swap(self, v):
        r"""
        swap(vector_double_array_2 self, vector_double_array_2 v)

        Parameters
        ----------
        v: std::vector< std::array< double,2 > > &

        """
        return _PythonAnalysis.vector_double_array_2_swap(self, v)

    def begin(self):
        r"""begin(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::iterator"""
        return _PythonAnalysis.vector_double_array_2_begin(self)

    def end(self):
        r"""end(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::iterator"""
        return _PythonAnalysis.vector_double_array_2_end(self)

    def rbegin(self):
        r"""rbegin(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::reverse_iterator"""
        return _PythonAnalysis.vector_double_array_2_rbegin(self)

    def rend(self):
        r"""rend(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::reverse_iterator"""
        return _PythonAnalysis.vector_double_array_2_rend(self)

    def clear(self):
        r"""clear(vector_double_array_2 self)"""
        return _PythonAnalysis.vector_double_array_2_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::allocator_type"""
        return _PythonAnalysis.vector_double_array_2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_double_array_2 self)"""
        return _PythonAnalysis.vector_double_array_2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_double_array_2 self, std::vector< std::array< double,2 > >::iterator pos) -> std::vector< std::array< double,2 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< double,2 > >::iterator

        erase(vector_double_array_2 self, std::vector< std::array< double,2 > >::iterator first, std::vector< std::array< double,2 > >::iterator last) -> std::vector< std::array< double,2 > >::iterator

        Parameters
        ----------
        first: std::vector< std::array< double,2 > >::iterator
        last: std::vector< std::array< double,2 > >::iterator

        """
        return _PythonAnalysis.vector_double_array_2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_double_array_2 self) -> vector_double_array_2
        __init__(vector_double_array_2 self, vector_double_array_2 other) -> vector_double_array_2

        Parameters
        ----------
        other: std::vector< std::array< double,2 > > const &

        __init__(vector_double_array_2 self, std::vector< std::array< double,2 > >::size_type size) -> vector_double_array_2

        Parameters
        ----------
        size: std::vector< std::array< double,2 > >::size_type

        __init__(vector_double_array_2 self, std::vector< std::array< double,2 > >::size_type size, array_double_2 value) -> vector_double_array_2

        Parameters
        ----------
        size: std::vector< std::array< double,2 > >::size_type
        value: std::vector< std::array< double,2 > >::value_type const &

        """
        _PythonAnalysis.vector_double_array_2_swiginit(self, _PythonAnalysis.new_vector_double_array_2(*args))

    def push_back(self, x):
        r"""
        push_back(vector_double_array_2 self, array_double_2 x)

        Parameters
        ----------
        x: std::vector< std::array< double,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_2_push_back(self, x)

    def front(self):
        r"""front(vector_double_array_2 self) -> array_double_2"""
        return _PythonAnalysis.vector_double_array_2_front(self)

    def back(self):
        r"""back(vector_double_array_2 self) -> array_double_2"""
        return _PythonAnalysis.vector_double_array_2_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_double_array_2 self, std::vector< std::array< double,2 > >::size_type n, array_double_2 x)

        Parameters
        ----------
        n: std::vector< std::array< double,2 > >::size_type
        x: std::vector< std::array< double,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_double_array_2 self, std::vector< std::array< double,2 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::array< double,2 > >::size_type

        resize(vector_double_array_2 self, std::vector< std::array< double,2 > >::size_type new_size, array_double_2 x)

        Parameters
        ----------
        new_size: std::vector< std::array< double,2 > >::size_type
        x: std::vector< std::array< double,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_double_array_2 self, std::vector< std::array< double,2 > >::iterator pos, array_double_2 x) -> std::vector< std::array< double,2 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< double,2 > >::iterator
        x: std::vector< std::array< double,2 > >::value_type const &

        insert(vector_double_array_2 self, std::vector< std::array< double,2 > >::iterator pos, std::vector< std::array< double,2 > >::size_type n, array_double_2 x)

        Parameters
        ----------
        pos: std::vector< std::array< double,2 > >::iterator
        n: std::vector< std::array< double,2 > >::size_type
        x: std::vector< std::array< double,2 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_double_array_2 self, std::vector< std::array< double,2 > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::array< double,2 > >::size_type

        """
        return _PythonAnalysis.vector_double_array_2_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::size_type"""
        return _PythonAnalysis.vector_double_array_2_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_double_array_2

# Register vector_double_array_2 in _PythonAnalysis:
_PythonAnalysis.vector_double_array_2_swigregister(vector_double_array_2)
class vector_double_array_3(object):
    r"""Proxy of C++ std::vector< std::array< double,3 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_double_array_3 self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_double_array_3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_double_array_3 self) -> bool"""
        return _PythonAnalysis.vector_double_array_3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_double_array_3 self) -> bool"""
        return _PythonAnalysis.vector_double_array_3___bool__(self)

    def __len__(self):
        r"""__len__(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::size_type"""
        return _PythonAnalysis.vector_double_array_3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i, std::vector< std::array< double,3 > >::difference_type j) -> vector_double_array_3

        Parameters
        ----------
        i: std::vector< std::array< double,3 > >::difference_type
        j: std::vector< std::array< double,3 > >::difference_type

        """
        return _PythonAnalysis.vector_double_array_3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i, std::vector< std::array< double,3 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< double,3 > >::difference_type
        j: std::vector< std::array< double,3 > >::difference_type

        __setslice__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i, std::vector< std::array< double,3 > >::difference_type j, vector_double_array_3 v)

        Parameters
        ----------
        i: std::vector< std::array< double,3 > >::difference_type
        j: std::vector< std::array< double,3 > >::difference_type
        v: std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &

        """
        return _PythonAnalysis.vector_double_array_3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i, std::vector< std::array< double,3 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< double,3 > >::difference_type
        j: std::vector< std::array< double,3 > >::difference_type

        """
        return _PythonAnalysis.vector_double_array_3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::array< double,3 > >::difference_type

        __delitem__(vector_double_array_3 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_double_array_3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_double_array_3 self, SWIGPY_SLICEOBJECT * slice) -> vector_double_array_3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i) -> array_double_3

        Parameters
        ----------
        i: std::vector< std::array< double,3 > >::difference_type

        """
        return _PythonAnalysis.vector_double_array_3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_double_array_3 self, SWIGPY_SLICEOBJECT * slice, vector_double_array_3 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &

        __setitem__(vector_double_array_3 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i, array_double_3 x)

        Parameters
        ----------
        i: std::vector< std::array< double,3 > >::difference_type
        x: std::vector< std::array< double,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_3___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_double_array_3 self) -> array_double_3"""
        return _PythonAnalysis.vector_double_array_3_pop(self)

    def append(self, x):
        r"""
        append(vector_double_array_3 self, array_double_3 x)

        Parameters
        ----------
        x: std::vector< std::array< double,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_3_append(self, x)

    def empty(self):
        r"""empty(vector_double_array_3 self) -> bool"""
        return _PythonAnalysis.vector_double_array_3_empty(self)

    def size(self):
        r"""size(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::size_type"""
        return _PythonAnalysis.vector_double_array_3_size(self)

    def swap(self, v):
        r"""
        swap(vector_double_array_3 self, vector_double_array_3 v)

        Parameters
        ----------
        v: std::vector< std::array< double,3 > > &

        """
        return _PythonAnalysis.vector_double_array_3_swap(self, v)

    def begin(self):
        r"""begin(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::iterator"""
        return _PythonAnalysis.vector_double_array_3_begin(self)

    def end(self):
        r"""end(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::iterator"""
        return _PythonAnalysis.vector_double_array_3_end(self)

    def rbegin(self):
        r"""rbegin(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::reverse_iterator"""
        return _PythonAnalysis.vector_double_array_3_rbegin(self)

    def rend(self):
        r"""rend(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::reverse_iterator"""
        return _PythonAnalysis.vector_double_array_3_rend(self)

    def clear(self):
        r"""clear(vector_double_array_3 self)"""
        return _PythonAnalysis.vector_double_array_3_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::allocator_type"""
        return _PythonAnalysis.vector_double_array_3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_double_array_3 self)"""
        return _PythonAnalysis.vector_double_array_3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_double_array_3 self, std::vector< std::array< double,3 > >::iterator pos) -> std::vector< std::array< double,3 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< double,3 > >::iterator

        erase(vector_double_array_3 self, std::vector< std::array< double,3 > >::iterator first, std::vector< std::array< double,3 > >::iterator last) -> std::vector< std::array< double,3 > >::iterator

        Parameters
        ----------
        first: std::vector< std::array< double,3 > >::iterator
        last: std::vector< std::array< double,3 > >::iterator

        """
        return _PythonAnalysis.vector_double_array_3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_double_array_3 self) -> vector_double_array_3
        __init__(vector_double_array_3 self, vector_double_array_3 other) -> vector_double_array_3

        Parameters
        ----------
        other: std::vector< std::array< double,3 > > const &

        __init__(vector_double_array_3 self, std::vector< std::array< double,3 > >::size_type size) -> vector_double_array_3

        Parameters
        ----------
        size: std::vector< std::array< double,3 > >::size_type

        __init__(vector_double_array_3 self, std::vector< std::array< double,3 > >::size_type size, array_double_3 value) -> vector_double_array_3

        Parameters
        ----------
        size: std::vector< std::array< double,3 > >::size_type
        value: std::vector< std::array< double,3 > >::value_type const &

        """
        _PythonAnalysis.vector_double_array_3_swiginit(self, _PythonAnalysis.new_vector_double_array_3(*args))

    def push_back(self, x):
        r"""
        push_back(vector_double_array_3 self, array_double_3 x)

        Parameters
        ----------
        x: std::vector< std::array< double,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_3_push_back(self, x)

    def front(self):
        r"""front(vector_double_array_3 self) -> array_double_3"""
        return _PythonAnalysis.vector_double_array_3_front(self)

    def back(self):
        r"""back(vector_double_array_3 self) -> array_double_3"""
        return _PythonAnalysis.vector_double_array_3_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_double_array_3 self, std::vector< std::array< double,3 > >::size_type n, array_double_3 x)

        Parameters
        ----------
        n: std::vector< std::array< double,3 > >::size_type
        x: std::vector< std::array< double,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_double_array_3 self, std::vector< std::array< double,3 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::array< double,3 > >::size_type

        resize(vector_double_array_3 self, std::vector< std::array< double,3 > >::size_type new_size, array_double_3 x)

        Parameters
        ----------
        new_size: std::vector< std::array< double,3 > >::size_type
        x: std::vector< std::array< double,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_double_array_3 self, std::vector< std::array< double,3 > >::iterator pos, array_double_3 x) -> std::vector< std::array< double,3 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< double,3 > >::iterator
        x: std::vector< std::array< double,3 > >::value_type const &

        insert(vector_double_array_3 self, std::vector< std::array< double,3 > >::iterator pos, std::vector< std::array< double,3 > >::size_type n, array_double_3 x)

        Parameters
        ----------
        pos: std::vector< std::array< double,3 > >::iterator
        n: std::vector< std::array< double,3 > >::size_type
        x: std::vector< std::array< double,3 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_double_array_3 self, std::vector< std::array< double,3 > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::array< double,3 > >::size_type

        """
        return _PythonAnalysis.vector_double_array_3_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::size_type"""
        return _PythonAnalysis.vector_double_array_3_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_double_array_3

# Register vector_double_array_3 in _PythonAnalysis:
_PythonAnalysis.vector_double_array_3_swigregister(vector_double_array_3)
class vector_double_array_6(object):
    r"""Proxy of C++ std::vector< std::array< double,6 > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_double_array_6 self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_double_array_6_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_double_array_6 self) -> bool"""
        return _PythonAnalysis.vector_double_array_6___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_double_array_6 self) -> bool"""
        return _PythonAnalysis.vector_double_array_6___bool__(self)

    def __len__(self):
        r"""__len__(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::size_type"""
        return _PythonAnalysis.vector_double_array_6___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i, std::vector< std::array< double,6 > >::difference_type j) -> vector_double_array_6

        Parameters
        ----------
        i: std::vector< std::array< double,6 > >::difference_type
        j: std::vector< std::array< double,6 > >::difference_type

        """
        return _PythonAnalysis.vector_double_array_6___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i, std::vector< std::array< double,6 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< double,6 > >::difference_type
        j: std::vector< std::array< double,6 > >::difference_type

        __setslice__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i, std::vector< std::array< double,6 > >::difference_type j, vector_double_array_6 v)

        Parameters
        ----------
        i: std::vector< std::array< double,6 > >::difference_type
        j: std::vector< std::array< double,6 > >::difference_type
        v: std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &

        """
        return _PythonAnalysis.vector_double_array_6___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i, std::vector< std::array< double,6 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::array< double,6 > >::difference_type
        j: std::vector< std::array< double,6 > >::difference_type

        """
        return _PythonAnalysis.vector_double_array_6___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::array< double,6 > >::difference_type

        __delitem__(vector_double_array_6 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_double_array_6___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_double_array_6 self, SWIGPY_SLICEOBJECT * slice) -> vector_double_array_6

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i) -> array_double_6

        Parameters
        ----------
        i: std::vector< std::array< double,6 > >::difference_type

        """
        return _PythonAnalysis.vector_double_array_6___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_double_array_6 self, SWIGPY_SLICEOBJECT * slice, vector_double_array_6 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &

        __setitem__(vector_double_array_6 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i, array_double_6 x)

        Parameters
        ----------
        i: std::vector< std::array< double,6 > >::difference_type
        x: std::vector< std::array< double,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_6___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_double_array_6 self) -> array_double_6"""
        return _PythonAnalysis.vector_double_array_6_pop(self)

    def append(self, x):
        r"""
        append(vector_double_array_6 self, array_double_6 x)

        Parameters
        ----------
        x: std::vector< std::array< double,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_6_append(self, x)

    def empty(self):
        r"""empty(vector_double_array_6 self) -> bool"""
        return _PythonAnalysis.vector_double_array_6_empty(self)

    def size(self):
        r"""size(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::size_type"""
        return _PythonAnalysis.vector_double_array_6_size(self)

    def swap(self, v):
        r"""
        swap(vector_double_array_6 self, vector_double_array_6 v)

        Parameters
        ----------
        v: std::vector< std::array< double,6 > > &

        """
        return _PythonAnalysis.vector_double_array_6_swap(self, v)

    def begin(self):
        r"""begin(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::iterator"""
        return _PythonAnalysis.vector_double_array_6_begin(self)

    def end(self):
        r"""end(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::iterator"""
        return _PythonAnalysis.vector_double_array_6_end(self)

    def rbegin(self):
        r"""rbegin(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::reverse_iterator"""
        return _PythonAnalysis.vector_double_array_6_rbegin(self)

    def rend(self):
        r"""rend(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::reverse_iterator"""
        return _PythonAnalysis.vector_double_array_6_rend(self)

    def clear(self):
        r"""clear(vector_double_array_6 self)"""
        return _PythonAnalysis.vector_double_array_6_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::allocator_type"""
        return _PythonAnalysis.vector_double_array_6_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_double_array_6 self)"""
        return _PythonAnalysis.vector_double_array_6_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_double_array_6 self, std::vector< std::array< double,6 > >::iterator pos) -> std::vector< std::array< double,6 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< double,6 > >::iterator

        erase(vector_double_array_6 self, std::vector< std::array< double,6 > >::iterator first, std::vector< std::array< double,6 > >::iterator last) -> std::vector< std::array< double,6 > >::iterator

        Parameters
        ----------
        first: std::vector< std::array< double,6 > >::iterator
        last: std::vector< std::array< double,6 > >::iterator

        """
        return _PythonAnalysis.vector_double_array_6_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_double_array_6 self) -> vector_double_array_6
        __init__(vector_double_array_6 self, vector_double_array_6 other) -> vector_double_array_6

        Parameters
        ----------
        other: std::vector< std::array< double,6 > > const &

        __init__(vector_double_array_6 self, std::vector< std::array< double,6 > >::size_type size) -> vector_double_array_6

        Parameters
        ----------
        size: std::vector< std::array< double,6 > >::size_type

        __init__(vector_double_array_6 self, std::vector< std::array< double,6 > >::size_type size, array_double_6 value) -> vector_double_array_6

        Parameters
        ----------
        size: std::vector< std::array< double,6 > >::size_type
        value: std::vector< std::array< double,6 > >::value_type const &

        """
        _PythonAnalysis.vector_double_array_6_swiginit(self, _PythonAnalysis.new_vector_double_array_6(*args))

    def push_back(self, x):
        r"""
        push_back(vector_double_array_6 self, array_double_6 x)

        Parameters
        ----------
        x: std::vector< std::array< double,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_6_push_back(self, x)

    def front(self):
        r"""front(vector_double_array_6 self) -> array_double_6"""
        return _PythonAnalysis.vector_double_array_6_front(self)

    def back(self):
        r"""back(vector_double_array_6 self) -> array_double_6"""
        return _PythonAnalysis.vector_double_array_6_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_double_array_6 self, std::vector< std::array< double,6 > >::size_type n, array_double_6 x)

        Parameters
        ----------
        n: std::vector< std::array< double,6 > >::size_type
        x: std::vector< std::array< double,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_6_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_double_array_6 self, std::vector< std::array< double,6 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::array< double,6 > >::size_type

        resize(vector_double_array_6 self, std::vector< std::array< double,6 > >::size_type new_size, array_double_6 x)

        Parameters
        ----------
        new_size: std::vector< std::array< double,6 > >::size_type
        x: std::vector< std::array< double,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_6_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_double_array_6 self, std::vector< std::array< double,6 > >::iterator pos, array_double_6 x) -> std::vector< std::array< double,6 > >::iterator

        Parameters
        ----------
        pos: std::vector< std::array< double,6 > >::iterator
        x: std::vector< std::array< double,6 > >::value_type const &

        insert(vector_double_array_6 self, std::vector< std::array< double,6 > >::iterator pos, std::vector< std::array< double,6 > >::size_type n, array_double_6 x)

        Parameters
        ----------
        pos: std::vector< std::array< double,6 > >::iterator
        n: std::vector< std::array< double,6 > >::size_type
        x: std::vector< std::array< double,6 > >::value_type const &

        """
        return _PythonAnalysis.vector_double_array_6_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_double_array_6 self, std::vector< std::array< double,6 > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::array< double,6 > >::size_type

        """
        return _PythonAnalysis.vector_double_array_6_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::size_type"""
        return _PythonAnalysis.vector_double_array_6_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_double_array_6

# Register vector_double_array_6 in _PythonAnalysis:
_PythonAnalysis.vector_double_array_6_swigregister(vector_double_array_6)
class vector_vector_double_array_2(object):
    r"""Proxy of C++ std::vector< std::vector< std::array< double,2 > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_vector_double_array_2 self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_vector_double_array_2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_vector_double_array_2 self) -> bool"""
        return _PythonAnalysis.vector_vector_double_array_2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_vector_double_array_2 self) -> bool"""
        return _PythonAnalysis.vector_vector_double_array_2___bool__(self)

    def __len__(self):
        r"""__len__(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::size_type"""
        return _PythonAnalysis.vector_vector_double_array_2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i, std::vector< std::vector< std::array< double,2 > > >::difference_type j) -> vector_vector_double_array_2

        Parameters
        ----------
        i: std::vector< std::vector< std::array< double,2 > > >::difference_type
        j: std::vector< std::vector< std::array< double,2 > > >::difference_type

        """
        return _PythonAnalysis.vector_vector_double_array_2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i, std::vector< std::vector< std::array< double,2 > > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< std::array< double,2 > > >::difference_type
        j: std::vector< std::vector< std::array< double,2 > > >::difference_type

        __setslice__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i, std::vector< std::vector< std::array< double,2 > > >::difference_type j, vector_vector_double_array_2 v)

        Parameters
        ----------
        i: std::vector< std::vector< std::array< double,2 > > >::difference_type
        j: std::vector< std::vector< std::array< double,2 > > >::difference_type
        v: std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &

        """
        return _PythonAnalysis.vector_vector_double_array_2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i, std::vector< std::vector< std::array< double,2 > > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< std::array< double,2 > > >::difference_type
        j: std::vector< std::vector< std::array< double,2 > > >::difference_type

        """
        return _PythonAnalysis.vector_vector_double_array_2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< std::array< double,2 > > >::difference_type

        __delitem__(vector_vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_vector_double_array_2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice) -> vector_vector_double_array_2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i) -> vector_double_array_2

        Parameters
        ----------
        i: std::vector< std::vector< std::array< double,2 > > >::difference_type

        """
        return _PythonAnalysis.vector_vector_double_array_2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice, vector_vector_double_array_2 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &

        __setitem__(vector_vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i, vector_double_array_2 x)

        Parameters
        ----------
        i: std::vector< std::vector< std::array< double,2 > > >::difference_type
        x: std::vector< std::vector< std::array< double,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_array_2___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_vector_double_array_2 self) -> vector_double_array_2"""
        return _PythonAnalysis.vector_vector_double_array_2_pop(self)

    def append(self, x):
        r"""
        append(vector_vector_double_array_2 self, vector_double_array_2 x)

        Parameters
        ----------
        x: std::vector< std::vector< std::array< double,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_array_2_append(self, x)

    def empty(self):
        r"""empty(vector_vector_double_array_2 self) -> bool"""
        return _PythonAnalysis.vector_vector_double_array_2_empty(self)

    def size(self):
        r"""size(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::size_type"""
        return _PythonAnalysis.vector_vector_double_array_2_size(self)

    def swap(self, v):
        r"""
        swap(vector_vector_double_array_2 self, vector_vector_double_array_2 v)

        Parameters
        ----------
        v: std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > &

        """
        return _PythonAnalysis.vector_vector_double_array_2_swap(self, v)

    def begin(self):
        r"""begin(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::iterator"""
        return _PythonAnalysis.vector_vector_double_array_2_begin(self)

    def end(self):
        r"""end(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::iterator"""
        return _PythonAnalysis.vector_vector_double_array_2_end(self)

    def rbegin(self):
        r"""rbegin(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::reverse_iterator"""
        return _PythonAnalysis.vector_vector_double_array_2_rbegin(self)

    def rend(self):
        r"""rend(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::reverse_iterator"""
        return _PythonAnalysis.vector_vector_double_array_2_rend(self)

    def clear(self):
        r"""clear(vector_vector_double_array_2 self)"""
        return _PythonAnalysis.vector_vector_double_array_2_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::allocator_type"""
        return _PythonAnalysis.vector_vector_double_array_2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_vector_double_array_2 self)"""
        return _PythonAnalysis.vector_vector_double_array_2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::iterator pos) -> std::vector< std::vector< std::array< double,2 > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< std::array< double,2 > > >::iterator

        erase(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::iterator first, std::vector< std::vector< std::array< double,2 > > >::iterator last) -> std::vector< std::vector< std::array< double,2 > > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< std::array< double,2 > > >::iterator
        last: std::vector< std::vector< std::array< double,2 > > >::iterator

        """
        return _PythonAnalysis.vector_vector_double_array_2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_vector_double_array_2 self) -> vector_vector_double_array_2
        __init__(vector_vector_double_array_2 self, vector_vector_double_array_2 other) -> vector_vector_double_array_2

        Parameters
        ----------
        other: std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > const &

        __init__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::size_type size) -> vector_vector_double_array_2

        Parameters
        ----------
        size: std::vector< std::vector< std::array< double,2 > > >::size_type

        __init__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::size_type size, vector_double_array_2 value) -> vector_vector_double_array_2

        Parameters
        ----------
        size: std::vector< std::vector< std::array< double,2 > > >::size_type
        value: std::vector< std::vector< std::array< double,2 > > >::value_type const &

        """
        _PythonAnalysis.vector_vector_double_array_2_swiginit(self, _PythonAnalysis.new_vector_vector_double_array_2(*args))

    def push_back(self, x):
        r"""
        push_back(vector_vector_double_array_2 self, vector_double_array_2 x)

        Parameters
        ----------
        x: std::vector< std::vector< std::array< double,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_array_2_push_back(self, x)

    def front(self):
        r"""front(vector_vector_double_array_2 self) -> vector_double_array_2"""
        return _PythonAnalysis.vector_vector_double_array_2_front(self)

    def back(self):
        r"""back(vector_vector_double_array_2 self) -> vector_double_array_2"""
        return _PythonAnalysis.vector_vector_double_array_2_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::size_type n, vector_double_array_2 x)

        Parameters
        ----------
        n: std::vector< std::vector< std::array< double,2 > > >::size_type
        x: std::vector< std::vector< std::array< double,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_array_2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< std::array< double,2 > > >::size_type

        resize(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::size_type new_size, vector_double_array_2 x)

        Parameters
        ----------
        new_size: std::vector< std::vector< std::array< double,2 > > >::size_type
        x: std::vector< std::vector< std::array< double,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_array_2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::iterator pos, vector_double_array_2 x) -> std::vector< std::vector< std::array< double,2 > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< std::array< double,2 > > >::iterator
        x: std::vector< std::vector< std::array< double,2 > > >::value_type const &

        insert(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::iterator pos, std::vector< std::vector< std::array< double,2 > > >::size_type n, vector_double_array_2 x)

        Parameters
        ----------
        pos: std::vector< std::vector< std::array< double,2 > > >::iterator
        n: std::vector< std::vector< std::array< double,2 > > >::size_type
        x: std::vector< std::vector< std::array< double,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_array_2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< std::array< double,2 > > >::size_type

        """
        return _PythonAnalysis.vector_vector_double_array_2_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::size_type"""
        return _PythonAnalysis.vector_vector_double_array_2_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_vector_double_array_2

# Register vector_vector_double_array_2 in _PythonAnalysis:
_PythonAnalysis.vector_vector_double_array_2_swigregister(vector_vector_double_array_2)
class vector_vector_int_array_2(object):
    r"""Proxy of C++ std::vector< std::vector< std::array< int,2 > > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_vector_int_array_2 self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_vector_int_array_2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_vector_int_array_2 self) -> bool"""
        return _PythonAnalysis.vector_vector_int_array_2___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_vector_int_array_2 self) -> bool"""
        return _PythonAnalysis.vector_vector_int_array_2___bool__(self)

    def __len__(self):
        r"""__len__(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::size_type"""
        return _PythonAnalysis.vector_vector_int_array_2___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i, std::vector< std::vector< std::array< int,2 > > >::difference_type j) -> vector_vector_int_array_2

        Parameters
        ----------
        i: std::vector< std::vector< std::array< int,2 > > >::difference_type
        j: std::vector< std::vector< std::array< int,2 > > >::difference_type

        """
        return _PythonAnalysis.vector_vector_int_array_2___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i, std::vector< std::vector< std::array< int,2 > > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< std::array< int,2 > > >::difference_type
        j: std::vector< std::vector< std::array< int,2 > > >::difference_type

        __setslice__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i, std::vector< std::vector< std::array< int,2 > > >::difference_type j, vector_vector_int_array_2 v)

        Parameters
        ----------
        i: std::vector< std::vector< std::array< int,2 > > >::difference_type
        j: std::vector< std::vector< std::array< int,2 > > >::difference_type
        v: std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &

        """
        return _PythonAnalysis.vector_vector_int_array_2___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i, std::vector< std::vector< std::array< int,2 > > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< std::array< int,2 > > >::difference_type
        j: std::vector< std::vector< std::array< int,2 > > >::difference_type

        """
        return _PythonAnalysis.vector_vector_int_array_2___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< std::array< int,2 > > >::difference_type

        __delitem__(vector_vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_vector_int_array_2___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice) -> vector_vector_int_array_2

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i) -> vector_int_array_2

        Parameters
        ----------
        i: std::vector< std::vector< std::array< int,2 > > >::difference_type

        """
        return _PythonAnalysis.vector_vector_int_array_2___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice, vector_vector_int_array_2 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &

        __setitem__(vector_vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i, vector_int_array_2 x)

        Parameters
        ----------
        i: std::vector< std::vector< std::array< int,2 > > >::difference_type
        x: std::vector< std::vector< std::array< int,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_array_2___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_vector_int_array_2 self) -> vector_int_array_2"""
        return _PythonAnalysis.vector_vector_int_array_2_pop(self)

    def append(self, x):
        r"""
        append(vector_vector_int_array_2 self, vector_int_array_2 x)

        Parameters
        ----------
        x: std::vector< std::vector< std::array< int,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_array_2_append(self, x)

    def empty(self):
        r"""empty(vector_vector_int_array_2 self) -> bool"""
        return _PythonAnalysis.vector_vector_int_array_2_empty(self)

    def size(self):
        r"""size(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::size_type"""
        return _PythonAnalysis.vector_vector_int_array_2_size(self)

    def swap(self, v):
        r"""
        swap(vector_vector_int_array_2 self, vector_vector_int_array_2 v)

        Parameters
        ----------
        v: std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > &

        """
        return _PythonAnalysis.vector_vector_int_array_2_swap(self, v)

    def begin(self):
        r"""begin(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::iterator"""
        return _PythonAnalysis.vector_vector_int_array_2_begin(self)

    def end(self):
        r"""end(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::iterator"""
        return _PythonAnalysis.vector_vector_int_array_2_end(self)

    def rbegin(self):
        r"""rbegin(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::reverse_iterator"""
        return _PythonAnalysis.vector_vector_int_array_2_rbegin(self)

    def rend(self):
        r"""rend(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::reverse_iterator"""
        return _PythonAnalysis.vector_vector_int_array_2_rend(self)

    def clear(self):
        r"""clear(vector_vector_int_array_2 self)"""
        return _PythonAnalysis.vector_vector_int_array_2_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::allocator_type"""
        return _PythonAnalysis.vector_vector_int_array_2_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_vector_int_array_2 self)"""
        return _PythonAnalysis.vector_vector_int_array_2_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::iterator pos) -> std::vector< std::vector< std::array< int,2 > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< std::array< int,2 > > >::iterator

        erase(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::iterator first, std::vector< std::vector< std::array< int,2 > > >::iterator last) -> std::vector< std::vector< std::array< int,2 > > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< std::array< int,2 > > >::iterator
        last: std::vector< std::vector< std::array< int,2 > > >::iterator

        """
        return _PythonAnalysis.vector_vector_int_array_2_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_vector_int_array_2 self) -> vector_vector_int_array_2
        __init__(vector_vector_int_array_2 self, vector_vector_int_array_2 other) -> vector_vector_int_array_2

        Parameters
        ----------
        other: std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > const &

        __init__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::size_type size) -> vector_vector_int_array_2

        Parameters
        ----------
        size: std::vector< std::vector< std::array< int,2 > > >::size_type

        __init__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::size_type size, vector_int_array_2 value) -> vector_vector_int_array_2

        Parameters
        ----------
        size: std::vector< std::vector< std::array< int,2 > > >::size_type
        value: std::vector< std::vector< std::array< int,2 > > >::value_type const &

        """
        _PythonAnalysis.vector_vector_int_array_2_swiginit(self, _PythonAnalysis.new_vector_vector_int_array_2(*args))

    def push_back(self, x):
        r"""
        push_back(vector_vector_int_array_2 self, vector_int_array_2 x)

        Parameters
        ----------
        x: std::vector< std::vector< std::array< int,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_array_2_push_back(self, x)

    def front(self):
        r"""front(vector_vector_int_array_2 self) -> vector_int_array_2"""
        return _PythonAnalysis.vector_vector_int_array_2_front(self)

    def back(self):
        r"""back(vector_vector_int_array_2 self) -> vector_int_array_2"""
        return _PythonAnalysis.vector_vector_int_array_2_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::size_type n, vector_int_array_2 x)

        Parameters
        ----------
        n: std::vector< std::vector< std::array< int,2 > > >::size_type
        x: std::vector< std::vector< std::array< int,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_array_2_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< std::array< int,2 > > >::size_type

        resize(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::size_type new_size, vector_int_array_2 x)

        Parameters
        ----------
        new_size: std::vector< std::vector< std::array< int,2 > > >::size_type
        x: std::vector< std::vector< std::array< int,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_array_2_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::iterator pos, vector_int_array_2 x) -> std::vector< std::vector< std::array< int,2 > > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< std::array< int,2 > > >::iterator
        x: std::vector< std::vector< std::array< int,2 > > >::value_type const &

        insert(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::iterator pos, std::vector< std::vector< std::array< int,2 > > >::size_type n, vector_int_array_2 x)

        Parameters
        ----------
        pos: std::vector< std::vector< std::array< int,2 > > >::iterator
        n: std::vector< std::vector< std::array< int,2 > > >::size_type
        x: std::vector< std::vector< std::array< int,2 > > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_array_2_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< std::array< int,2 > > >::size_type

        """
        return _PythonAnalysis.vector_vector_int_array_2_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::size_type"""
        return _PythonAnalysis.vector_vector_int_array_2_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_vector_int_array_2

# Register vector_vector_int_array_2 in _PythonAnalysis:
_PythonAnalysis.vector_vector_int_array_2_swigregister(vector_vector_int_array_2)
class vector_vector_int(object):
    r"""Proxy of C++ std::vector< std::vector< int > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_vector_int self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_vector_int self) -> bool"""
        return _PythonAnalysis.vector_vector_int___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_vector_int self) -> bool"""
        return _PythonAnalysis.vector_vector_int___bool__(self)

    def __len__(self):
        r"""__len__(vector_vector_int self) -> std::vector< std::vector< int > >::size_type"""
        return _PythonAnalysis.vector_vector_int___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j) -> vector_vector_int

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type
        j: std::vector< std::vector< int > >::difference_type

        """
        return _PythonAnalysis.vector_vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type
        j: std::vector< std::vector< int > >::difference_type

        __setslice__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j, vector_vector_int v)

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type
        j: std::vector< std::vector< int > >::difference_type
        v: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &

        """
        return _PythonAnalysis.vector_vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type
        j: std::vector< std::vector< int > >::difference_type

        """
        return _PythonAnalysis.vector_vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type

        __delitem__(vector_vector_int self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_vector_int self, SWIGPY_SLICEOBJECT * slice) -> vector_vector_int

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i) -> vector_int

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type

        """
        return _PythonAnalysis.vector_vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_vector_int self, SWIGPY_SLICEOBJECT * slice, vector_vector_int v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &

        __setitem__(vector_vector_int self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i, vector_int x)

        Parameters
        ----------
        i: std::vector< std::vector< int > >::difference_type
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_vector_int self) -> vector_int"""
        return _PythonAnalysis.vector_vector_int_pop(self)

    def append(self, x):
        r"""
        append(vector_vector_int self, vector_int x)

        Parameters
        ----------
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_append(self, x)

    def empty(self):
        r"""empty(vector_vector_int self) -> bool"""
        return _PythonAnalysis.vector_vector_int_empty(self)

    def size(self):
        r"""size(vector_vector_int self) -> std::vector< std::vector< int > >::size_type"""
        return _PythonAnalysis.vector_vector_int_size(self)

    def swap(self, v):
        r"""
        swap(vector_vector_int self, vector_vector_int v)

        Parameters
        ----------
        v: std::vector< std::vector< int,std::allocator< int > > > &

        """
        return _PythonAnalysis.vector_vector_int_swap(self, v)

    def begin(self):
        r"""begin(vector_vector_int self) -> std::vector< std::vector< int > >::iterator"""
        return _PythonAnalysis.vector_vector_int_begin(self)

    def end(self):
        r"""end(vector_vector_int self) -> std::vector< std::vector< int > >::iterator"""
        return _PythonAnalysis.vector_vector_int_end(self)

    def rbegin(self):
        r"""rbegin(vector_vector_int self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _PythonAnalysis.vector_vector_int_rbegin(self)

    def rend(self):
        r"""rend(vector_vector_int self) -> std::vector< std::vector< int > >::reverse_iterator"""
        return _PythonAnalysis.vector_vector_int_rend(self)

    def clear(self):
        r"""clear(vector_vector_int self)"""
        return _PythonAnalysis.vector_vector_int_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_vector_int self) -> std::vector< std::vector< int > >::allocator_type"""
        return _PythonAnalysis.vector_vector_int_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_vector_int self)"""
        return _PythonAnalysis.vector_vector_int_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_vector_int self, std::vector< std::vector< int > >::iterator pos) -> std::vector< std::vector< int > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< int > >::iterator

        erase(vector_vector_int self, std::vector< std::vector< int > >::iterator first, std::vector< std::vector< int > >::iterator last) -> std::vector< std::vector< int > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< int > >::iterator
        last: std::vector< std::vector< int > >::iterator

        """
        return _PythonAnalysis.vector_vector_int_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_vector_int self) -> vector_vector_int
        __init__(vector_vector_int self, vector_vector_int other) -> vector_vector_int

        Parameters
        ----------
        other: std::vector< std::vector< int,std::allocator< int > > > const &

        __init__(vector_vector_int self, std::vector< std::vector< int > >::size_type size) -> vector_vector_int

        Parameters
        ----------
        size: std::vector< std::vector< int > >::size_type

        __init__(vector_vector_int self, std::vector< std::vector< int > >::size_type size, vector_int value) -> vector_vector_int

        Parameters
        ----------
        size: std::vector< std::vector< int > >::size_type
        value: std::vector< std::vector< int > >::value_type const &

        """
        _PythonAnalysis.vector_vector_int_swiginit(self, _PythonAnalysis.new_vector_vector_int(*args))

    def push_back(self, x):
        r"""
        push_back(vector_vector_int self, vector_int x)

        Parameters
        ----------
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_push_back(self, x)

    def front(self):
        r"""front(vector_vector_int self) -> vector_int"""
        return _PythonAnalysis.vector_vector_int_front(self)

    def back(self):
        r"""back(vector_vector_int self) -> vector_int"""
        return _PythonAnalysis.vector_vector_int_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_vector_int self, std::vector< std::vector< int > >::size_type n, vector_int x)

        Parameters
        ----------
        n: std::vector< std::vector< int > >::size_type
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_vector_int self, std::vector< std::vector< int > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< int > >::size_type

        resize(vector_vector_int self, std::vector< std::vector< int > >::size_type new_size, vector_int x)

        Parameters
        ----------
        new_size: std::vector< std::vector< int > >::size_type
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_vector_int self, std::vector< std::vector< int > >::iterator pos, vector_int x) -> std::vector< std::vector< int > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< int > >::iterator
        x: std::vector< std::vector< int > >::value_type const &

        insert(vector_vector_int self, std::vector< std::vector< int > >::iterator pos, std::vector< std::vector< int > >::size_type n, vector_int x)

        Parameters
        ----------
        pos: std::vector< std::vector< int > >::iterator
        n: std::vector< std::vector< int > >::size_type
        x: std::vector< std::vector< int > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_int_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_vector_int self, std::vector< std::vector< int > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< int > >::size_type

        """
        return _PythonAnalysis.vector_vector_int_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_vector_int self) -> std::vector< std::vector< int > >::size_type"""
        return _PythonAnalysis.vector_vector_int_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_vector_int

# Register vector_vector_int in _PythonAnalysis:
_PythonAnalysis.vector_vector_int_swigregister(vector_vector_int)
class vector_vector_double(object):
    r"""Proxy of C++ std::vector< std::vector< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_vector_double self) -> SwigPyIterator"""
        return _PythonAnalysis.vector_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_vector_double self) -> bool"""
        return _PythonAnalysis.vector_vector_double___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_vector_double self) -> bool"""
        return _PythonAnalysis.vector_vector_double___bool__(self)

    def __len__(self):
        r"""__len__(vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
        return _PythonAnalysis.vector_vector_double___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> vector_vector_double

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _PythonAnalysis.vector_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        __setslice__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, vector_vector_double v)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        """
        return _PythonAnalysis.vector_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        j: std::vector< std::vector< double > >::difference_type

        """
        return _PythonAnalysis.vector_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        __delitem__(vector_vector_double self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _PythonAnalysis.vector_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_vector_double self, SWIGPY_SLICEOBJECT * slice) -> vector_vector_double

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i) -> std::vector< std::vector< double > >::value_type const &

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type

        """
        return _PythonAnalysis.vector_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_vector_double self, SWIGPY_SLICEOBJECT * slice, vector_vector_double v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &

        __setitem__(vector_vector_double self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::vector< double > >::difference_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_vector_double self) -> std::vector< std::vector< double > >::value_type"""
        return _PythonAnalysis.vector_vector_double_pop(self)

    def append(self, x):
        r"""
        append(vector_vector_double self, std::vector< std::vector< double > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_append(self, x)

    def empty(self):
        r"""empty(vector_vector_double self) -> bool"""
        return _PythonAnalysis.vector_vector_double_empty(self)

    def size(self):
        r"""size(vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
        return _PythonAnalysis.vector_vector_double_size(self)

    def swap(self, v):
        r"""
        swap(vector_vector_double self, vector_vector_double v)

        Parameters
        ----------
        v: std::vector< std::vector< double,std::allocator< double > > > &

        """
        return _PythonAnalysis.vector_vector_double_swap(self, v)

    def begin(self):
        r"""begin(vector_vector_double self) -> std::vector< std::vector< double > >::iterator"""
        return _PythonAnalysis.vector_vector_double_begin(self)

    def end(self):
        r"""end(vector_vector_double self) -> std::vector< std::vector< double > >::iterator"""
        return _PythonAnalysis.vector_vector_double_end(self)

    def rbegin(self):
        r"""rbegin(vector_vector_double self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _PythonAnalysis.vector_vector_double_rbegin(self)

    def rend(self):
        r"""rend(vector_vector_double self) -> std::vector< std::vector< double > >::reverse_iterator"""
        return _PythonAnalysis.vector_vector_double_rend(self)

    def clear(self):
        r"""clear(vector_vector_double self)"""
        return _PythonAnalysis.vector_vector_double_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_vector_double self) -> std::vector< std::vector< double > >::allocator_type"""
        return _PythonAnalysis.vector_vector_double_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_vector_double self)"""
        return _PythonAnalysis.vector_vector_double_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_vector_double self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator

        erase(vector_vector_double self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        first: std::vector< std::vector< double > >::iterator
        last: std::vector< std::vector< double > >::iterator

        """
        return _PythonAnalysis.vector_vector_double_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_vector_double self) -> vector_vector_double
        __init__(vector_vector_double self, vector_vector_double other) -> vector_vector_double

        Parameters
        ----------
        other: std::vector< std::vector< double,std::allocator< double > > > const &

        __init__(vector_vector_double self, std::vector< std::vector< double > >::size_type size) -> vector_vector_double

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type

        __init__(vector_vector_double self, std::vector< std::vector< double > >::size_type size, std::vector< std::vector< double > >::value_type const & value) -> vector_vector_double

        Parameters
        ----------
        size: std::vector< std::vector< double > >::size_type
        value: std::vector< std::vector< double > >::value_type const &

        """
        _PythonAnalysis.vector_vector_double_swiginit(self, _PythonAnalysis.new_vector_vector_double(*args))

    def push_back(self, x):
        r"""
        push_back(vector_vector_double self, std::vector< std::vector< double > >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_push_back(self, x)

    def front(self):
        r"""front(vector_vector_double self) -> std::vector< std::vector< double > >::value_type const &"""
        return _PythonAnalysis.vector_vector_double_front(self)

    def back(self):
        r"""back(vector_vector_double self) -> std::vector< std::vector< double > >::value_type const &"""
        return _PythonAnalysis.vector_vector_double_back(self)

    def assign(self, n, x):
        r"""
        assign(vector_vector_double self, std::vector< std::vector< double > >::size_type n, std::vector< std::vector< double > >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_vector_double self, std::vector< std::vector< double > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type

        resize(vector_vector_double self, std::vector< std::vector< double > >::size_type new_size, std::vector< std::vector< double > >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_vector_double self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::value_type const & x) -> std::vector< std::vector< double > >::iterator

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        x: std::vector< std::vector< double > >::value_type const &

        insert(vector_vector_double self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, std::vector< std::vector< double > >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::vector< double > >::iterator
        n: std::vector< std::vector< double > >::size_type
        x: std::vector< std::vector< double > >::value_type const &

        """
        return _PythonAnalysis.vector_vector_double_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(vector_vector_double self, std::vector< std::vector< double > >::size_type n)

        Parameters
        ----------
        n: std::vector< std::vector< double > >::size_type

        """
        return _PythonAnalysis.vector_vector_double_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_vector_double self) -> std::vector< std::vector< double > >::size_type"""
        return _PythonAnalysis.vector_vector_double_capacity(self)
    __swig_destroy__ = _PythonAnalysis.delete_vector_vector_double

# Register vector_vector_double in _PythonAnalysis:
_PythonAnalysis.vector_vector_double_swigregister(vector_vector_double)
class map_string_bool(object):
    r"""Proxy of C++ std::map< std::string,bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_string_bool self) -> SwigPyIterator"""
        return _PythonAnalysis.map_string_bool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_string_bool self) -> bool"""
        return _PythonAnalysis.map_string_bool___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_string_bool self) -> bool"""
        return _PythonAnalysis.map_string_bool___bool__(self)

    def __len__(self):
        r"""__len__(map_string_bool self) -> std::map< std::string,bool >::size_type"""
        return _PythonAnalysis.map_string_bool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_string_bool self, std::map< std::string,bool >::key_type const & key) -> std::map< std::string,bool >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::string,bool >::key_type const &

        """
        return _PythonAnalysis.map_string_bool___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_string_bool self, std::map< std::string,bool >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,bool >::key_type const &

        """
        return _PythonAnalysis.map_string_bool___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_string_bool self, std::map< std::string,bool >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,bool >::key_type const &

        """
        return _PythonAnalysis.map_string_bool_has_key(self, key)

    def keys(self):
        r"""keys(map_string_bool self) -> PyObject *"""
        return _PythonAnalysis.map_string_bool_keys(self)

    def values(self):
        r"""values(map_string_bool self) -> PyObject *"""
        return _PythonAnalysis.map_string_bool_values(self)

    def items(self):
        r"""items(map_string_bool self) -> PyObject *"""
        return _PythonAnalysis.map_string_bool_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_string_bool self, std::map< std::string,bool >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,bool >::key_type const &

        """
        return _PythonAnalysis.map_string_bool___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_string_bool self) -> SwigPyIterator"""
        return _PythonAnalysis.map_string_bool_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_string_bool self) -> SwigPyIterator"""
        return _PythonAnalysis.map_string_bool_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_string_bool self, std::map< std::string,bool >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,bool >::key_type const &

        __setitem__(map_string_bool self, std::map< std::string,bool >::key_type const & key, std::map< std::string,bool >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::string,bool >::key_type const &
        x: std::map< std::string,bool >::mapped_type const &

        """
        return _PythonAnalysis.map_string_bool___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_string_bool self) -> PyObject *"""
        return _PythonAnalysis.map_string_bool_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_string_bool self, std::less< std::string > const & other) -> map_string_bool

        Parameters
        ----------
        other: std::less< std::string > const &

        __init__(map_string_bool self) -> map_string_bool
        __init__(map_string_bool self, map_string_bool other) -> map_string_bool

        Parameters
        ----------
        other: std::map< std::string,bool > const &

        """
        _PythonAnalysis.map_string_bool_swiginit(self, _PythonAnalysis.new_map_string_bool(*args))

    def empty(self):
        r"""empty(map_string_bool self) -> bool"""
        return _PythonAnalysis.map_string_bool_empty(self)

    def size(self):
        r"""size(map_string_bool self) -> std::map< std::string,bool >::size_type"""
        return _PythonAnalysis.map_string_bool_size(self)

    def swap(self, v):
        r"""
        swap(map_string_bool self, map_string_bool v)

        Parameters
        ----------
        v: std::map< std::string,bool > &

        """
        return _PythonAnalysis.map_string_bool_swap(self, v)

    def begin(self):
        r"""begin(map_string_bool self) -> std::map< std::string,bool >::iterator"""
        return _PythonAnalysis.map_string_bool_begin(self)

    def end(self):
        r"""end(map_string_bool self) -> std::map< std::string,bool >::iterator"""
        return _PythonAnalysis.map_string_bool_end(self)

    def rbegin(self):
        r"""rbegin(map_string_bool self) -> std::map< std::string,bool >::reverse_iterator"""
        return _PythonAnalysis.map_string_bool_rbegin(self)

    def rend(self):
        r"""rend(map_string_bool self) -> std::map< std::string,bool >::reverse_iterator"""
        return _PythonAnalysis.map_string_bool_rend(self)

    def clear(self):
        r"""clear(map_string_bool self)"""
        return _PythonAnalysis.map_string_bool_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_string_bool self) -> std::map< std::string,bool >::allocator_type"""
        return _PythonAnalysis.map_string_bool_get_allocator(self)

    def count(self, x):
        r"""
        count(map_string_bool self, std::map< std::string,bool >::key_type const & x) -> std::map< std::string,bool >::size_type

        Parameters
        ----------
        x: std::map< std::string,bool >::key_type const &

        """
        return _PythonAnalysis.map_string_bool_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_string_bool self, std::map< std::string,bool >::key_type const & x) -> std::map< std::string,bool >::size_type

        Parameters
        ----------
        x: std::map< std::string,bool >::key_type const &

        erase(map_string_bool self, std::map< std::string,bool >::iterator position)

        Parameters
        ----------
        position: std::map< std::string,bool >::iterator

        erase(map_string_bool self, std::map< std::string,bool >::iterator first, std::map< std::string,bool >::iterator last)

        Parameters
        ----------
        first: std::map< std::string,bool >::iterator
        last: std::map< std::string,bool >::iterator

        """
        return _PythonAnalysis.map_string_bool_erase(self, *args)

    def find(self, x):
        r"""
        find(map_string_bool self, std::map< std::string,bool >::key_type const & x) -> std::map< std::string,bool >::iterator

        Parameters
        ----------
        x: std::map< std::string,bool >::key_type const &

        """
        return _PythonAnalysis.map_string_bool_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_string_bool self, std::map< std::string,bool >::key_type const & x) -> std::map< std::string,bool >::iterator

        Parameters
        ----------
        x: std::map< std::string,bool >::key_type const &

        """
        return _PythonAnalysis.map_string_bool_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_string_bool self, std::map< std::string,bool >::key_type const & x) -> std::map< std::string,bool >::iterator

        Parameters
        ----------
        x: std::map< std::string,bool >::key_type const &

        """
        return _PythonAnalysis.map_string_bool_upper_bound(self, x)
    __swig_destroy__ = _PythonAnalysis.delete_map_string_bool

# Register map_string_bool in _PythonAnalysis:
_PythonAnalysis.map_string_bool_swigregister(map_string_bool)
class map_int_vector_string(object):
    r"""Proxy of C++ std::map< int,std::vector< std::string > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(map_int_vector_string self) -> SwigPyIterator"""
        return _PythonAnalysis.map_int_vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(map_int_vector_string self) -> bool"""
        return _PythonAnalysis.map_int_vector_string___nonzero__(self)

    def __bool__(self):
        r"""__bool__(map_int_vector_string self) -> bool"""
        return _PythonAnalysis.map_int_vector_string___bool__(self)

    def __len__(self):
        r"""__len__(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::size_type"""
        return _PythonAnalysis.map_int_vector_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key) -> vector_string

        Parameters
        ----------
        key: std::map< int,std::vector< std::string > >::key_type const &

        """
        return _PythonAnalysis.map_int_vector_string___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key)

        Parameters
        ----------
        key: std::map< int,std::vector< std::string > >::key_type const &

        """
        return _PythonAnalysis.map_int_vector_string___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< int,std::vector< std::string > >::key_type const &

        """
        return _PythonAnalysis.map_int_vector_string_has_key(self, key)

    def keys(self):
        r"""keys(map_int_vector_string self) -> PyObject *"""
        return _PythonAnalysis.map_int_vector_string_keys(self)

    def values(self):
        r"""values(map_int_vector_string self) -> PyObject *"""
        return _PythonAnalysis.map_int_vector_string_values(self)

    def items(self):
        r"""items(map_int_vector_string self) -> PyObject *"""
        return _PythonAnalysis.map_int_vector_string_items(self)

    def __contains__(self, key):
        r"""
        __contains__(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< int,std::vector< std::string > >::key_type const &

        """
        return _PythonAnalysis.map_int_vector_string___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(map_int_vector_string self) -> SwigPyIterator"""
        return _PythonAnalysis.map_int_vector_string_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(map_int_vector_string self) -> SwigPyIterator"""
        return _PythonAnalysis.map_int_vector_string_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key)

        Parameters
        ----------
        key: std::map< int,std::vector< std::string > >::key_type const &

        __setitem__(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key, vector_string x)

        Parameters
        ----------
        key: std::map< int,std::vector< std::string > >::key_type const &
        x: std::map< int,std::vector< std::string > >::mapped_type const &

        """
        return _PythonAnalysis.map_int_vector_string___setitem__(self, *args)

    def asdict(self):
        r"""asdict(map_int_vector_string self) -> PyObject *"""
        return _PythonAnalysis.map_int_vector_string_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(map_int_vector_string self, std::less< int > const & other) -> map_int_vector_string

        Parameters
        ----------
        other: std::less< int > const &

        __init__(map_int_vector_string self) -> map_int_vector_string
        __init__(map_int_vector_string self, map_int_vector_string other) -> map_int_vector_string

        Parameters
        ----------
        other: std::map< int,std::vector< std::string,std::allocator< std::string > > > const &

        """
        _PythonAnalysis.map_int_vector_string_swiginit(self, _PythonAnalysis.new_map_int_vector_string(*args))

    def empty(self):
        r"""empty(map_int_vector_string self) -> bool"""
        return _PythonAnalysis.map_int_vector_string_empty(self)

    def size(self):
        r"""size(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::size_type"""
        return _PythonAnalysis.map_int_vector_string_size(self)

    def swap(self, v):
        r"""
        swap(map_int_vector_string self, map_int_vector_string v)

        Parameters
        ----------
        v: std::map< int,std::vector< std::string,std::allocator< std::string > > > &

        """
        return _PythonAnalysis.map_int_vector_string_swap(self, v)

    def begin(self):
        r"""begin(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::iterator"""
        return _PythonAnalysis.map_int_vector_string_begin(self)

    def end(self):
        r"""end(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::iterator"""
        return _PythonAnalysis.map_int_vector_string_end(self)

    def rbegin(self):
        r"""rbegin(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::reverse_iterator"""
        return _PythonAnalysis.map_int_vector_string_rbegin(self)

    def rend(self):
        r"""rend(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::reverse_iterator"""
        return _PythonAnalysis.map_int_vector_string_rend(self)

    def clear(self):
        r"""clear(map_int_vector_string self)"""
        return _PythonAnalysis.map_int_vector_string_clear(self)

    def get_allocator(self):
        r"""get_allocator(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::allocator_type"""
        return _PythonAnalysis.map_int_vector_string_get_allocator(self)

    def count(self, x):
        r"""
        count(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & x) -> std::map< int,std::vector< std::string > >::size_type

        Parameters
        ----------
        x: std::map< int,std::vector< std::string > >::key_type const &

        """
        return _PythonAnalysis.map_int_vector_string_count(self, x)

    def erase(self, *args):
        r"""
        erase(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & x) -> std::map< int,std::vector< std::string > >::size_type

        Parameters
        ----------
        x: std::map< int,std::vector< std::string > >::key_type const &

        erase(map_int_vector_string self, std::map< int,std::vector< std::string > >::iterator position)

        Parameters
        ----------
        position: std::map< int,std::vector< std::string > >::iterator

        erase(map_int_vector_string self, std::map< int,std::vector< std::string > >::iterator first, std::map< int,std::vector< std::string > >::iterator last)

        Parameters
        ----------
        first: std::map< int,std::vector< std::string > >::iterator
        last: std::map< int,std::vector< std::string > >::iterator

        """
        return _PythonAnalysis.map_int_vector_string_erase(self, *args)

    def find(self, x):
        r"""
        find(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & x) -> std::map< int,std::vector< std::string > >::iterator

        Parameters
        ----------
        x: std::map< int,std::vector< std::string > >::key_type const &

        """
        return _PythonAnalysis.map_int_vector_string_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & x) -> std::map< int,std::vector< std::string > >::iterator

        Parameters
        ----------
        x: std::map< int,std::vector< std::string > >::key_type const &

        """
        return _PythonAnalysis.map_int_vector_string_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & x) -> std::map< int,std::vector< std::string > >::iterator

        Parameters
        ----------
        x: std::map< int,std::vector< std::string > >::key_type const &

        """
        return _PythonAnalysis.map_int_vector_string_upper_bound(self, x)
    __swig_destroy__ = _PythonAnalysis.delete_map_int_vector_string

# Register map_int_vector_string in _PythonAnalysis:
_PythonAnalysis.map_int_vector_string_swigregister(map_int_vector_string)
class metadata_ptr(object):
    r"""Proxy of C++ std::shared_ptr< sensei::MeshMetadata > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(metadata_ptr self) -> metadata_ptr"""
        _PythonAnalysis.metadata_ptr_swiginit(self, _PythonAnalysis.new_metadata_ptr())
    __swig_destroy__ = _PythonAnalysis.delete_metadata_ptr

# Register metadata_ptr in _PythonAnalysis:
_PythonAnalysis.metadata_ptr_swigregister(metadata_ptr)
class BinaryStream(object):
    r"""Proxy of C++ sensei::BinaryStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PythonAnalysis.delete_BinaryStream

    def __init__(self, *args):
        r"""
        __init__(BinaryStream self) -> BinaryStream
        __init__(BinaryStream self, BinaryStream s) -> BinaryStream

        Parameters
        ----------
        s: sensei::BinaryStream const &

        """
        _PythonAnalysis.BinaryStream_swiginit(self, _PythonAnalysis.new_BinaryStream(*args))

    def __nonzero__(self):
        return _PythonAnalysis.BinaryStream___nonzero__(self)
    __bool__ = __nonzero__



    def Clear(self):
        r"""Clear(BinaryStream self)"""
        return _PythonAnalysis.BinaryStream_Clear(self)

    def Resize(self, nBytes):
        r"""
        Resize(BinaryStream self, unsigned long nBytes)

        Parameters
        ----------
        nBytes: unsigned long

        """
        return _PythonAnalysis.BinaryStream_Resize(self, nBytes)

    def Grow(self, nBytes):
        r"""
        Grow(BinaryStream self, unsigned long nBytes)

        Parameters
        ----------
        nBytes: unsigned long

        """
        return _PythonAnalysis.BinaryStream_Grow(self, nBytes)

    def GetData(self, *args):
        r"""
        GetData(BinaryStream self) -> unsigned char
        GetData(BinaryStream self) -> unsigned char const *
        """
        return _PythonAnalysis.BinaryStream_GetData(self, *args)

    def Size(self):
        r"""Size(BinaryStream self) -> unsigned long"""
        return _PythonAnalysis.BinaryStream_Size(self)

    def Capacity(self):
        r"""Capacity(BinaryStream self) -> unsigned long"""
        return _PythonAnalysis.BinaryStream_Capacity(self)

    def SetReadPos(self, n):
        r"""
        SetReadPos(BinaryStream self, unsigned long n)

        Parameters
        ----------
        n: unsigned long

        """
        return _PythonAnalysis.BinaryStream_SetReadPos(self, n)

    def SetWritePos(self, n):
        r"""
        SetWritePos(BinaryStream self, unsigned long n)

        Parameters
        ----------
        n: unsigned long

        """
        return _PythonAnalysis.BinaryStream_SetWritePos(self, n)

    def Swap(self, other):
        r"""
        Swap(BinaryStream self, BinaryStream other)

        Parameters
        ----------
        other: sensei::BinaryStream &

        """
        return _PythonAnalysis.BinaryStream_Swap(self, other)

    def Pack(self, str):
        r"""
        Pack(BinaryStream self, std::string const & str)

        Parameters
        ----------
        str: std::string const &

        """
        return _PythonAnalysis.BinaryStream_Pack(self, str)

    def Unpack(self, str):
        r"""
        Unpack(BinaryStream self, std::string & str)

        Parameters
        ----------
        str: std::string &

        """
        return _PythonAnalysis.BinaryStream_Unpack(self, str)

    def Broadcast(self, rootRank=0):
        r"""
        Broadcast(BinaryStream self, int rootRank=0) -> int

        Parameters
        ----------
        rootRank: int

        """
        return _PythonAnalysis.BinaryStream_Broadcast(self, rootRank)

# Register BinaryStream in _PythonAnalysis:
_PythonAnalysis.BinaryStream_swigregister(BinaryStream)
class MeshMetadataFlags(object):
    r"""Proxy of C++ sensei::MeshMetadataFlags class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MeshMetadataFlags self) -> MeshMetadataFlags
        __init__(MeshMetadataFlags self, long long flags) -> MeshMetadataFlags

        Parameters
        ----------
        flags: long long

        """
        _PythonAnalysis.MeshMetadataFlags_swiginit(self, _PythonAnalysis.new_MeshMetadataFlags(*args))

    def SetAll(self):
        r"""SetAll(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_SetAll(self)

    def ClearAll(self):
        r"""ClearAll(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_ClearAll(self)

    def SetBlockDecomp(self):
        r"""SetBlockDecomp(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_SetBlockDecomp(self)

    def ClearBlockDecomp(self):
        r"""ClearBlockDecomp(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_ClearBlockDecomp(self)

    def BlockDecompSet(self):
        r"""BlockDecompSet(MeshMetadataFlags self) -> bool"""
        return _PythonAnalysis.MeshMetadataFlags_BlockDecompSet(self)

    def SetBlockSize(self):
        r"""SetBlockSize(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_SetBlockSize(self)

    def ClearBlockSize(self):
        r"""ClearBlockSize(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_ClearBlockSize(self)

    def BlockSizeSet(self):
        r"""BlockSizeSet(MeshMetadataFlags self) -> bool"""
        return _PythonAnalysis.MeshMetadataFlags_BlockSizeSet(self)

    def SetBlockExtents(self):
        r"""SetBlockExtents(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_SetBlockExtents(self)

    def ClearBlockExtents(self):
        r"""ClearBlockExtents(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_ClearBlockExtents(self)

    def BlockExtentsSet(self):
        r"""BlockExtentsSet(MeshMetadataFlags self) -> bool"""
        return _PythonAnalysis.MeshMetadataFlags_BlockExtentsSet(self)

    def SetBlockBounds(self):
        r"""SetBlockBounds(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_SetBlockBounds(self)

    def ClearBlockBounds(self):
        r"""ClearBlockBounds(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_ClearBlockBounds(self)

    def BlockBoundsSet(self):
        r"""BlockBoundsSet(MeshMetadataFlags self) -> bool"""
        return _PythonAnalysis.MeshMetadataFlags_BlockBoundsSet(self)

    def SetBlockArrayRange(self):
        r"""SetBlockArrayRange(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_SetBlockArrayRange(self)

    def ClearBlockArrayRange(self):
        r"""ClearBlockArrayRange(MeshMetadataFlags self)"""
        return _PythonAnalysis.MeshMetadataFlags_ClearBlockArrayRange(self)

    def BlockArrayRangeSet(self):
        r"""BlockArrayRangeSet(MeshMetadataFlags self) -> bool"""
        return _PythonAnalysis.MeshMetadataFlags_BlockArrayRangeSet(self)

    def FromStream(self, str):
        r"""
        FromStream(MeshMetadataFlags self, BinaryStream str) -> int

        Parameters
        ----------
        str: sensei::BinaryStream &

        """
        return _PythonAnalysis.MeshMetadataFlags_FromStream(self, str)

    def ToStream(self, *args):
        r"""
        ToStream(MeshMetadataFlags self, BinaryStream str) -> int

        Parameters
        ----------
        str: sensei::BinaryStream &

        ToStream(MeshMetadataFlags self, ostream & str) -> int

        Parameters
        ----------
        str: ostream &

        """
        return _PythonAnalysis.MeshMetadataFlags_ToStream(self, *args)

    def __str__(self):
        r"""__str__(MeshMetadataFlags self) -> PyObject *"""
        return _PythonAnalysis.MeshMetadataFlags___str__(self)
    __swig_destroy__ = _PythonAnalysis.delete_MeshMetadataFlags

# Register MeshMetadataFlags in _PythonAnalysis:
_PythonAnalysis.MeshMetadataFlags_swigregister(MeshMetadataFlags)
class MeshMetadata(object):
    r"""Proxy of C++ sensei::MeshMetadata class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New(*args):
        r"""
        New() -> metadata_ptr
        New(MeshMetadataFlags flags) -> metadata_ptr

        Parameters
        ----------
        flags: sensei::MeshMetadataFlags const

        """
        return _PythonAnalysis.MeshMetadata_New(*args)

    def NewCopy(self):
        r"""NewCopy(MeshMetadata self) -> metadata_ptr"""
        return _PythonAnalysis.MeshMetadata_NewCopy(self)

    def FromStream(self, str):
        r"""
        FromStream(MeshMetadata self, BinaryStream str) -> int

        Parameters
        ----------
        str: sensei::BinaryStream &

        """
        return _PythonAnalysis.MeshMetadata_FromStream(self, str)

    def ToStream(self, *args):
        r"""
        ToStream(MeshMetadata self, BinaryStream str) -> int

        Parameters
        ----------
        str: sensei::BinaryStream &

        ToStream(MeshMetadata self, ostream & str) -> int

        Parameters
        ----------
        str: ostream &

        """
        return _PythonAnalysis.MeshMetadata_ToStream(self, *args)

    def Validate(self, *args):
        r"""
        Validate(MeshMetadata self, MPI_Comm comm, MeshMetadataFlags requiredFlags=0xffffffffffffffff) -> int

        Parameters
        ----------
        comm: MPI_Comm
        requiredFlags: sensei::MeshMetadataFlags const &

        """
        return _PythonAnalysis.MeshMetadata_Validate(self, *args)

    def GlobalizeView(self, arg2):
        r"""
        GlobalizeView(MeshMetadata self, MPI_Comm arg2) -> int

        Parameters
        ----------
        arg2: MPI_Comm

        """
        return _PythonAnalysis.MeshMetadata_GlobalizeView(self, arg2)

    def ClearBlockInfo(self):
        r"""ClearBlockInfo(MeshMetadata self) -> int"""
        return _PythonAnalysis.MeshMetadata_ClearBlockInfo(self)

    def CopyBlockInfo(self, other, bid):
        r"""
        CopyBlockInfo(MeshMetadata self, metadata_ptr other, int bid) -> int

        Parameters
        ----------
        other: sensei::MeshMetadataPtr const &
        bid: int

        """
        return _PythonAnalysis.MeshMetadata_CopyBlockInfo(self, other, bid)

    def ClearArrayInfo(self):
        r"""ClearArrayInfo(MeshMetadata self) -> int"""
        return _PythonAnalysis.MeshMetadata_ClearArrayInfo(self)

    def CopyArrayInfo(self, other, arrayName):
        r"""
        CopyArrayInfo(MeshMetadata self, metadata_ptr other, std::string const & arrayName) -> int

        Parameters
        ----------
        other: sensei::MeshMetadataPtr const &
        arrayName: std::string const &

        """
        return _PythonAnalysis.MeshMetadata_CopyArrayInfo(self, other, arrayName)
    GlobalView = property(_PythonAnalysis.MeshMetadata_GlobalView_get, _PythonAnalysis.MeshMetadata_GlobalView_set, doc=r"""GlobalView : bool""")
    MeshName = property(_PythonAnalysis.MeshMetadata_MeshName_get, _PythonAnalysis.MeshMetadata_MeshName_set, doc=r"""MeshName : std::string""")
    MeshType = property(_PythonAnalysis.MeshMetadata_MeshType_get, _PythonAnalysis.MeshMetadata_MeshType_set, doc=r"""MeshType : int""")
    BlockType = property(_PythonAnalysis.MeshMetadata_BlockType_get, _PythonAnalysis.MeshMetadata_BlockType_set, doc=r"""BlockType : int""")
    NumBlocks = property(_PythonAnalysis.MeshMetadata_NumBlocks_get, _PythonAnalysis.MeshMetadata_NumBlocks_set, doc=r"""NumBlocks : int""")
    NumBlocksLocal = property(_PythonAnalysis.MeshMetadata_NumBlocksLocal_get, _PythonAnalysis.MeshMetadata_NumBlocksLocal_set, doc=r"""NumBlocksLocal : std::vector<(int,std::allocator<(int)>)>""")
    Extent = property(_PythonAnalysis.MeshMetadata_Extent_get, _PythonAnalysis.MeshMetadata_Extent_set, doc=r"""Extent : std::array<(int,6)>""")
    Bounds = property(_PythonAnalysis.MeshMetadata_Bounds_get, _PythonAnalysis.MeshMetadata_Bounds_set, doc=r"""Bounds : std::array<(double,6)>""")
    CoordinateType = property(_PythonAnalysis.MeshMetadata_CoordinateType_get, _PythonAnalysis.MeshMetadata_CoordinateType_set, doc=r"""CoordinateType : int""")
    NumPoints = property(_PythonAnalysis.MeshMetadata_NumPoints_get, _PythonAnalysis.MeshMetadata_NumPoints_set, doc=r"""NumPoints : long""")
    NumCells = property(_PythonAnalysis.MeshMetadata_NumCells_get, _PythonAnalysis.MeshMetadata_NumCells_set, doc=r"""NumCells : long""")
    CellArraySize = property(_PythonAnalysis.MeshMetadata_CellArraySize_get, _PythonAnalysis.MeshMetadata_CellArraySize_set, doc=r"""CellArraySize : long""")
    CellArrayType = property(_PythonAnalysis.MeshMetadata_CellArrayType_get, _PythonAnalysis.MeshMetadata_CellArrayType_set, doc=r"""CellArrayType : int""")
    NumArrays = property(_PythonAnalysis.MeshMetadata_NumArrays_get, _PythonAnalysis.MeshMetadata_NumArrays_set, doc=r"""NumArrays : int""")
    NumGhostCells = property(_PythonAnalysis.MeshMetadata_NumGhostCells_get, _PythonAnalysis.MeshMetadata_NumGhostCells_set, doc=r"""NumGhostCells : int""")
    NumGhostNodes = property(_PythonAnalysis.MeshMetadata_NumGhostNodes_get, _PythonAnalysis.MeshMetadata_NumGhostNodes_set, doc=r"""NumGhostNodes : int""")
    NumLevels = property(_PythonAnalysis.MeshMetadata_NumLevels_get, _PythonAnalysis.MeshMetadata_NumLevels_set, doc=r"""NumLevels : int""")
    StaticMesh = property(_PythonAnalysis.MeshMetadata_StaticMesh_get, _PythonAnalysis.MeshMetadata_StaticMesh_set, doc=r"""StaticMesh : int""")
    ArrayName = property(_PythonAnalysis.MeshMetadata_ArrayName_get, _PythonAnalysis.MeshMetadata_ArrayName_set, doc=r"""ArrayName : std::vector<(std::string,std::allocator<(std::string)>)>""")
    ArrayCentering = property(_PythonAnalysis.MeshMetadata_ArrayCentering_get, _PythonAnalysis.MeshMetadata_ArrayCentering_set, doc=r"""ArrayCentering : std::vector<(int,std::allocator<(int)>)>""")
    ArrayComponents = property(_PythonAnalysis.MeshMetadata_ArrayComponents_get, _PythonAnalysis.MeshMetadata_ArrayComponents_set, doc=r"""ArrayComponents : std::vector<(int,std::allocator<(int)>)>""")
    ArrayType = property(_PythonAnalysis.MeshMetadata_ArrayType_get, _PythonAnalysis.MeshMetadata_ArrayType_set, doc=r"""ArrayType : std::vector<(int,std::allocator<(int)>)>""")
    ArrayRange = property(_PythonAnalysis.MeshMetadata_ArrayRange_get, _PythonAnalysis.MeshMetadata_ArrayRange_set, doc=r"""ArrayRange : std::vector<(std::array<(double,2)>,std::allocator<(std::array<(double,2)>)>)>""")
    BlockOwner = property(_PythonAnalysis.MeshMetadata_BlockOwner_get, _PythonAnalysis.MeshMetadata_BlockOwner_set, doc=r"""BlockOwner : std::vector<(int,std::allocator<(int)>)>""")
    BlockIds = property(_PythonAnalysis.MeshMetadata_BlockIds_get, _PythonAnalysis.MeshMetadata_BlockIds_set, doc=r"""BlockIds : std::vector<(int,std::allocator<(int)>)>""")
    BlockNumPoints = property(_PythonAnalysis.MeshMetadata_BlockNumPoints_get, _PythonAnalysis.MeshMetadata_BlockNumPoints_set, doc=r"""BlockNumPoints : std::vector<(long,std::allocator<(long)>)>""")
    BlockNumCells = property(_PythonAnalysis.MeshMetadata_BlockNumCells_get, _PythonAnalysis.MeshMetadata_BlockNumCells_set, doc=r"""BlockNumCells : std::vector<(long,std::allocator<(long)>)>""")
    BlockCellArraySize = property(_PythonAnalysis.MeshMetadata_BlockCellArraySize_get, _PythonAnalysis.MeshMetadata_BlockCellArraySize_set, doc=r"""BlockCellArraySize : std::vector<(long,std::allocator<(long)>)>""")
    BlockExtents = property(_PythonAnalysis.MeshMetadata_BlockExtents_get, _PythonAnalysis.MeshMetadata_BlockExtents_set, doc=r"""BlockExtents : std::vector<(std::array<(int,6)>,std::allocator<(std::array<(int,6)>)>)>""")
    BlockBounds = property(_PythonAnalysis.MeshMetadata_BlockBounds_get, _PythonAnalysis.MeshMetadata_BlockBounds_set, doc=r"""BlockBounds : std::vector<(std::array<(double,6)>,std::allocator<(std::array<(double,6)>)>)>""")
    BlockArrayRange = property(_PythonAnalysis.MeshMetadata_BlockArrayRange_get, _PythonAnalysis.MeshMetadata_BlockArrayRange_set, doc=r"""BlockArrayRange : std::vector<(std::vector<(std::array<(double,2)>,std::allocator<(std::array<(double,2)>)>)>,std::allocator<(std::vector<(std::array<(double,2)>,std::allocator<(std::array<(double,2)>)>)>)>)>""")
    RefRatio = property(_PythonAnalysis.MeshMetadata_RefRatio_get, _PythonAnalysis.MeshMetadata_RefRatio_set, doc=r"""RefRatio : std::vector<(std::array<(int,3)>,std::allocator<(std::array<(int,3)>)>)>""")
    BlocksPerLevel = property(_PythonAnalysis.MeshMetadata_BlocksPerLevel_get, _PythonAnalysis.MeshMetadata_BlocksPerLevel_set, doc=r"""BlocksPerLevel : std::vector<(int,std::allocator<(int)>)>""")
    BlockLevel = property(_PythonAnalysis.MeshMetadata_BlockLevel_get, _PythonAnalysis.MeshMetadata_BlockLevel_set, doc=r"""BlockLevel : std::vector<(int,std::allocator<(int)>)>""")
    PeriodicBoundary = property(_PythonAnalysis.MeshMetadata_PeriodicBoundary_get, _PythonAnalysis.MeshMetadata_PeriodicBoundary_set, doc=r"""PeriodicBoundary : std::array<(int,3)>""")
    Flags = property(_PythonAnalysis.MeshMetadata_Flags_get, _PythonAnalysis.MeshMetadata_Flags_set, doc=r"""Flags : sensei::MeshMetadataFlags""")

    def __str__(self):
        r"""__str__(MeshMetadata self) -> PyObject *"""
        return _PythonAnalysis.MeshMetadata___str__(self)
    __swig_destroy__ = _PythonAnalysis.delete_MeshMetadata

# Register MeshMetadata in _PythonAnalysis:
_PythonAnalysis.MeshMetadata_swigregister(MeshMetadata)
class DataAdaptor(svtk.svtkObjectBase):
    r"""Proxy of C++ sensei::DataAdaptor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        r"""
        IsTypeOf(char const * type) -> svtkTypeBool

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.DataAdaptor_IsTypeOf(type)

    def IsA(self, type):
        r"""
        IsA(DataAdaptor self, char const * type) -> svtkTypeBool

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.DataAdaptor_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        r"""
        SafeDownCast(svtkObjectBase o) -> DataAdaptor

        Parameters
        ----------
        o: svtkObjectBase *

        """
        return _PythonAnalysis.DataAdaptor_SafeDownCast(o)

    def NewInstance(self):
        r"""NewInstance(DataAdaptor self) -> DataAdaptor"""
        return _PythonAnalysis.DataAdaptor_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        r"""
        GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.DataAdaptor_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        r"""
        GetNumberOfGenerationsFromBase(DataAdaptor self, char const * type) -> svtkIdType

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.DataAdaptor_GetNumberOfGenerationsFromBase(self, type)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(DataAdaptor self, ostream & os, svtkIndent indent)

        Parameters
        ----------
        os: ostream &
        indent: svtkIndent

        """
        return _PythonAnalysis.DataAdaptor_PrintSelf(self, os, indent)

    def SetCommunicator(self, comm):
        r"""
        SetCommunicator(DataAdaptor self, MPI_Comm comm) -> int

        Parameters
        ----------
        comm: MPI_Comm

        """
        return _PythonAnalysis.DataAdaptor_SetCommunicator(self, comm)

    def GetCommunicator(self):
        r"""GetCommunicator(DataAdaptor self) -> MPI_Comm"""
        return _PythonAnalysis.DataAdaptor_GetCommunicator(self)

    def AddGhostNodesArray(self, mesh, meshName):
        r"""
        AddGhostNodesArray(DataAdaptor self, svtkDataObject mesh, std::string const & meshName) -> int

        Parameters
        ----------
        mesh: svtkDataObject *
        meshName: std::string const &

        """
        return _PythonAnalysis.DataAdaptor_AddGhostNodesArray(self, mesh, meshName)

    def AddGhostCellsArray(self, mesh, meshName):
        r"""
        AddGhostCellsArray(DataAdaptor self, svtkDataObject mesh, std::string const & meshName) -> int

        Parameters
        ----------
        mesh: svtkDataObject *
        meshName: std::string const &

        """
        return _PythonAnalysis.DataAdaptor_AddGhostCellsArray(self, mesh, meshName)

    def AddArrays(self, mesh, meshName, association, arrayNames):
        r"""
        AddArrays(DataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, vector_string arrayNames) -> int

        Parameters
        ----------
        mesh: svtkDataObject *
        meshName: std::string const &
        association: int
        arrayNames: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _PythonAnalysis.DataAdaptor_AddArrays(self, mesh, meshName, association, arrayNames)

    def GetDataTime(self):
        r"""GetDataTime(DataAdaptor self) -> double"""
        return _PythonAnalysis.DataAdaptor_GetDataTime(self)

    def SetDataTime(self, time):
        r"""
        SetDataTime(DataAdaptor self, double time)

        Parameters
        ----------
        time: double

        """
        return _PythonAnalysis.DataAdaptor_SetDataTime(self, time)

    def GetDataTimeStep(self):
        r"""GetDataTimeStep(DataAdaptor self) -> long"""
        return _PythonAnalysis.DataAdaptor_GetDataTimeStep(self)

    def SetDataTimeStep(self, index):
        r"""
        SetDataTimeStep(DataAdaptor self, long index)

        Parameters
        ----------
        index: long

        """
        return _PythonAnalysis.DataAdaptor_SetDataTimeStep(self, index)
    __swig_destroy__ = _PythonAnalysis.delete_DataAdaptor

    def __str__(self):
        r"""__str__(DataAdaptor self) -> std::string"""
        return _PythonAnalysis.DataAdaptor___str__(self)

    def GetNumberOfMeshes(self):
        r"""GetNumberOfMeshes(DataAdaptor self) -> unsigned int"""
        return _PythonAnalysis.DataAdaptor_GetNumberOfMeshes(self)

    def GetMeshMetadata(self, *args):
        r"""
        GetMeshMetadata(DataAdaptor self, unsigned int id, MeshMetadataFlags flags=sensei::MeshMetadataFlags()) -> metadata_ptr

        Parameters
        ----------
        id: unsigned int
        flags: sensei::MeshMetadataFlags

        """
        return _PythonAnalysis.DataAdaptor_GetMeshMetadata(self, *args)

    def GetMesh(self, meshName, structureOnly):
        r"""
        GetMesh(DataAdaptor self, std::string const & meshName, bool structureOnly) -> svtkDataObject

        Parameters
        ----------
        meshName: std::string const &
        structureOnly: bool

        """
        return _PythonAnalysis.DataAdaptor_GetMesh(self, meshName, structureOnly)

    def AddArray(self, mesh, meshName, association, arrayName):
        r"""
        AddArray(DataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, std::string const & arrayName)

        Parameters
        ----------
        mesh: svtkDataObject *
        meshName: std::string const &
        association: int
        arrayName: std::string const &

        """
        return _PythonAnalysis.DataAdaptor_AddArray(self, mesh, meshName, association, arrayName)

    def ReleaseData(self):
        r"""ReleaseData(DataAdaptor self)"""
        return _PythonAnalysis.DataAdaptor_ReleaseData(self)

# Register DataAdaptor in _PythonAnalysis:
_PythonAnalysis.DataAdaptor_swigregister(DataAdaptor)
class Partitioner(object):
    r"""Proxy of C++ sensei::Partitioner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetClassName(self):
        r"""GetClassName(Partitioner self) -> char const *"""
        return _PythonAnalysis.Partitioner_GetClassName(self)

    def Initialize(self, arg2):
        r"""
        Initialize(Partitioner self, pugi::xml_node & arg2) -> int

        Parameters
        ----------
        arg2: pugi::xml_node &

        """
        return _PythonAnalysis.Partitioner_Initialize(self, arg2)

    def SetVerbose(self, val):
        r"""
        SetVerbose(Partitioner self, int val)

        Parameters
        ----------
        val: int

        """
        return _PythonAnalysis.Partitioner_SetVerbose(self, val)

    def GetVerbose(self):
        r"""GetVerbose(Partitioner self) -> int"""
        return _PythonAnalysis.Partitioner_GetVerbose(self)
    __swig_destroy__ = _PythonAnalysis.delete_Partitioner

    def GetPartition(self, comm, _in):
        r"""
        GetPartition(Partitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr

        Parameters
        ----------
        comm: MPI_Comm
        in: sensei::MeshMetadataPtr const &

        """
        return _PythonAnalysis.Partitioner_GetPartition(self, comm, _in)

# Register Partitioner in _PythonAnalysis:
_PythonAnalysis.Partitioner_swigregister(Partitioner)
class BlockPartitioner(Partitioner):
    r"""Proxy of C++ sensei::BlockPartitioner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        r"""New() -> sensei::BlockPartitionerPtr"""
        return _PythonAnalysis.BlockPartitioner_New()

    def GetClassName(self):
        r"""GetClassName(BlockPartitioner self) -> char const *"""
        return _PythonAnalysis.BlockPartitioner_GetClassName(self)

    def GetPartition(self, comm, _in):
        r"""
        GetPartition(BlockPartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr

        Parameters
        ----------
        comm: MPI_Comm
        in: sensei::MeshMetadataPtr const &

        """
        return _PythonAnalysis.BlockPartitioner_GetPartition(self, comm, _in)
    __swig_destroy__ = _PythonAnalysis.delete_BlockPartitioner

# Register BlockPartitioner in _PythonAnalysis:
_PythonAnalysis.BlockPartitioner_swigregister(BlockPartitioner)
class PlanarPartitioner(Partitioner):
    r"""Proxy of C++ sensei::PlanarPartitioner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        r"""New() -> sensei::PlanarPartitionerPtr"""
        return _PythonAnalysis.PlanarPartitioner_New()

    def GetClassName(self):
        r"""GetClassName(PlanarPartitioner self) -> char const *"""
        return _PythonAnalysis.PlanarPartitioner_GetClassName(self)

    def SetPlaneSize(self, size):
        r"""
        SetPlaneSize(PlanarPartitioner self, unsigned int size)

        Parameters
        ----------
        size: unsigned int

        """
        return _PythonAnalysis.PlanarPartitioner_SetPlaneSize(self, size)

    def GetPlaneSize(self):
        r"""GetPlaneSize(PlanarPartitioner self) -> unsigned int"""
        return _PythonAnalysis.PlanarPartitioner_GetPlaneSize(self)

    def Initialize(self, node):
        r"""
        Initialize(PlanarPartitioner self, pugi::xml_node & node) -> int

        Parameters
        ----------
        node: pugi::xml_node &

        """
        return _PythonAnalysis.PlanarPartitioner_Initialize(self, node)

    def GetPartition(self, comm, _in):
        r"""
        GetPartition(PlanarPartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr

        Parameters
        ----------
        comm: MPI_Comm
        in: sensei::MeshMetadataPtr const &

        """
        return _PythonAnalysis.PlanarPartitioner_GetPartition(self, comm, _in)
    __swig_destroy__ = _PythonAnalysis.delete_PlanarPartitioner

# Register PlanarPartitioner in _PythonAnalysis:
_PythonAnalysis.PlanarPartitioner_swigregister(PlanarPartitioner)
class MappedPartitioner(Partitioner):
    r"""Proxy of C++ sensei::MappedPartitioner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        r"""New() -> sensei::MappedPartitionerPtr"""
        return _PythonAnalysis.MappedPartitioner_New()

    def GetClassName(self):
        r"""GetClassName(MappedPartitioner self) -> char const *"""
        return _PythonAnalysis.MappedPartitioner_GetClassName(self)

    def __init__(self, blkOwner, blkIds):
        r"""
        __init__(MappedPartitioner self, vector_int blkOwner, vector_int blkIds) -> MappedPartitioner

        Parameters
        ----------
        blkOwner: std::vector< int,std::allocator< int > > const &
        blkIds: std::vector< int,std::allocator< int > > const &

        """
        _PythonAnalysis.MappedPartitioner_swiginit(self, _PythonAnalysis.new_MappedPartitioner(blkOwner, blkIds))

    def Initialize(self, node):
        r"""
        Initialize(MappedPartitioner self, pugi::xml_node & node) -> int

        Parameters
        ----------
        node: pugi::xml_node &

        """
        return _PythonAnalysis.MappedPartitioner_Initialize(self, node)

    def SetBlockOwner(self, blkOwner):
        r"""
        SetBlockOwner(MappedPartitioner self, vector_int blkOwner)

        Parameters
        ----------
        blkOwner: std::vector< int,std::allocator< int > > const &

        """
        return _PythonAnalysis.MappedPartitioner_SetBlockOwner(self, blkOwner)

    def SetBlockIds(self, blkIds):
        r"""
        SetBlockIds(MappedPartitioner self, vector_int blkIds)

        Parameters
        ----------
        blkIds: std::vector< int,std::allocator< int > > const &

        """
        return _PythonAnalysis.MappedPartitioner_SetBlockIds(self, blkIds)

    def GetPartition(self, comm, _in):
        r"""
        GetPartition(MappedPartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr

        Parameters
        ----------
        comm: MPI_Comm
        in: sensei::MeshMetadataPtr const &

        """
        return _PythonAnalysis.MappedPartitioner_GetPartition(self, comm, _in)
    __swig_destroy__ = _PythonAnalysis.delete_MappedPartitioner

# Register MappedPartitioner in _PythonAnalysis:
_PythonAnalysis.MappedPartitioner_swigregister(MappedPartitioner)
class PlanarSlicePartitioner(Partitioner):
    r"""Proxy of C++ sensei::PlanarSlicePartitioner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        r"""New() -> sensei::PlanarSlicePartitionerPtr"""
        return _PythonAnalysis.PlanarSlicePartitioner_New()

    def GetClassName(self):
        r"""GetClassName(PlanarSlicePartitioner self) -> char const *"""
        return _PythonAnalysis.PlanarSlicePartitioner_GetClassName(self)

    def SetPoint(self, p):
        r"""
        SetPoint(PlanarSlicePartitioner self, array_double_3 p)

        Parameters
        ----------
        p: std::array< double,3 > const &

        """
        return _PythonAnalysis.PlanarSlicePartitioner_SetPoint(self, p)

    def GetPoint(self, p):
        r"""
        GetPoint(PlanarSlicePartitioner self, array_double_3 p)

        Parameters
        ----------
        p: std::array< double,3 > &

        """
        return _PythonAnalysis.PlanarSlicePartitioner_GetPoint(self, p)

    def SetNormal(self, n):
        r"""
        SetNormal(PlanarSlicePartitioner self, array_double_3 n)

        Parameters
        ----------
        n: std::array< double,3 > const &

        """
        return _PythonAnalysis.PlanarSlicePartitioner_SetNormal(self, n)

    def GetNormal(self, n):
        r"""
        GetNormal(PlanarSlicePartitioner self, array_double_3 n)

        Parameters
        ----------
        n: std::array< double,3 > &

        """
        return _PythonAnalysis.PlanarSlicePartitioner_GetNormal(self, n)

    def Initialize(self, node):
        r"""
        Initialize(PlanarSlicePartitioner self, pugi::xml_node & node) -> int

        Parameters
        ----------
        node: pugi::xml_node &

        """
        return _PythonAnalysis.PlanarSlicePartitioner_Initialize(self, node)

    def GetPartition(self, comm, _in):
        r"""
        GetPartition(PlanarSlicePartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr

        Parameters
        ----------
        comm: MPI_Comm
        in: sensei::MeshMetadataPtr const &

        """
        return _PythonAnalysis.PlanarSlicePartitioner_GetPartition(self, comm, _in)
    __swig_destroy__ = _PythonAnalysis.delete_PlanarSlicePartitioner

# Register PlanarSlicePartitioner in _PythonAnalysis:
_PythonAnalysis.PlanarSlicePartitioner_swigregister(PlanarSlicePartitioner)
class IsoSurfacePartitioner(Partitioner):
    r"""Proxy of C++ sensei::IsoSurfacePartitioner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        r"""New() -> sensei::IsoSurfacePartitionerPtr"""
        return _PythonAnalysis.IsoSurfacePartitioner_New()

    def GetClassName(self):
        r"""GetClassName(IsoSurfacePartitioner self) -> char const *"""
        return _PythonAnalysis.IsoSurfacePartitioner_GetClassName(self)

    def SetIsoValues(self, meshName, arrayName, arrayCentering, vals):
        r"""
        SetIsoValues(IsoSurfacePartitioner self, std::string const & meshName, std::string const & arrayName, int arrayCentering, std::vector< double,std::allocator< double > > const & vals)

        Parameters
        ----------
        meshName: std::string const &
        arrayName: std::string const &
        arrayCentering: int
        vals: std::vector< double,std::allocator< double > > const &

        """
        return _PythonAnalysis.IsoSurfacePartitioner_SetIsoValues(self, meshName, arrayName, arrayCentering, vals)

    def GetIsoValues(self, meshName, arrayName, arrayCentering, vals):
        r"""
        GetIsoValues(IsoSurfacePartitioner self, std::string & meshName, std::string & arrayName, int & arrayCentering, std::vector< double,std::allocator< double > > & vals) -> int

        Parameters
        ----------
        meshName: std::string &
        arrayName: std::string &
        arrayCentering: int &
        vals: std::vector< double,std::allocator< double > > &

        """
        return _PythonAnalysis.IsoSurfacePartitioner_GetIsoValues(self, meshName, arrayName, arrayCentering, vals)

    def Initialize(self, node):
        r"""
        Initialize(IsoSurfacePartitioner self, pugi::xml_node & node) -> int

        Parameters
        ----------
        node: pugi::xml_node &

        """
        return _PythonAnalysis.IsoSurfacePartitioner_Initialize(self, node)

    def GetPartition(self, comm, _in):
        r"""
        GetPartition(IsoSurfacePartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr

        Parameters
        ----------
        comm: MPI_Comm
        in: sensei::MeshMetadataPtr const &

        """
        return _PythonAnalysis.IsoSurfacePartitioner_GetPartition(self, comm, _in)
    __swig_destroy__ = _PythonAnalysis.delete_IsoSurfacePartitioner

# Register IsoSurfacePartitioner in _PythonAnalysis:
_PythonAnalysis.IsoSurfacePartitioner_swigregister(IsoSurfacePartitioner)
class ConfigurablePartitioner(Partitioner):
    r"""Proxy of C++ sensei::ConfigurablePartitioner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PythonAnalysis.delete_ConfigurablePartitioner

    @staticmethod
    def New():
        r"""New() -> sensei::ConfigurablePartitionerPtr"""
        return _PythonAnalysis.ConfigurablePartitioner_New()

    def GetClassName(self):
        r"""GetClassName(ConfigurablePartitioner self) -> char const *"""
        return _PythonAnalysis.ConfigurablePartitioner_GetClassName(self)

    def Initialize(self, arg2):
        r"""
        Initialize(ConfigurablePartitioner self, pugi::xml_node & arg2) -> int

        Parameters
        ----------
        arg2: pugi::xml_node &

        """
        return _PythonAnalysis.ConfigurablePartitioner_Initialize(self, arg2)

    def GetPartition(self, comm, _in):
        r"""
        GetPartition(ConfigurablePartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr

        Parameters
        ----------
        comm: MPI_Comm
        in: sensei::MeshMetadataPtr const &

        """
        return _PythonAnalysis.ConfigurablePartitioner_GetPartition(self, comm, _in)

# Register ConfigurablePartitioner in _PythonAnalysis:
_PythonAnalysis.ConfigurablePartitioner_swigregister(ConfigurablePartitioner)
class InTransitDataAdaptor(DataAdaptor):
    r"""Proxy of C++ sensei::InTransitDataAdaptor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def IsTypeOf(type):
        r"""
        IsTypeOf(char const * type) -> svtkTypeBool

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.InTransitDataAdaptor_IsTypeOf(type)

    def IsA(self, type):
        r"""
        IsA(InTransitDataAdaptor self, char const * type) -> svtkTypeBool

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.InTransitDataAdaptor_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        r"""
        SafeDownCast(svtkObjectBase o) -> InTransitDataAdaptor

        Parameters
        ----------
        o: svtkObjectBase *

        """
        return _PythonAnalysis.InTransitDataAdaptor_SafeDownCast(o)

    def NewInstance(self):
        r"""NewInstance(InTransitDataAdaptor self) -> InTransitDataAdaptor"""
        return _PythonAnalysis.InTransitDataAdaptor_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        r"""
        GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.InTransitDataAdaptor_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        r"""
        GetNumberOfGenerationsFromBase(InTransitDataAdaptor self, char const * type) -> svtkIdType

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.InTransitDataAdaptor_GetNumberOfGenerationsFromBase(self, type)

    def SetConnectionInfo(self, info):
        r"""
        SetConnectionInfo(InTransitDataAdaptor self, std::string const & info) -> int

        Parameters
        ----------
        info: std::string const &

        """
        return _PythonAnalysis.InTransitDataAdaptor_SetConnectionInfo(self, info)

    def GetConnectionInfo(self):
        r"""GetConnectionInfo(InTransitDataAdaptor self) -> std::string const &"""
        return _PythonAnalysis.InTransitDataAdaptor_GetConnectionInfo(self)

    def Initialize(self, node):
        r"""
        Initialize(InTransitDataAdaptor self, pugi::xml_node & node) -> int

        Parameters
        ----------
        node: pugi::xml_node &

        """
        return _PythonAnalysis.InTransitDataAdaptor_Initialize(self, node)

    def SetPartitioner(self, partitioner):
        r"""
        SetPartitioner(InTransitDataAdaptor self, sensei::PartitionerPtr const & partitioner)

        Parameters
        ----------
        partitioner: sensei::PartitionerPtr const &

        """
        return _PythonAnalysis.InTransitDataAdaptor_SetPartitioner(self, partitioner)

    def GetPartitioner(self):
        r"""GetPartitioner(InTransitDataAdaptor self) -> sensei::PartitionerPtr"""
        return _PythonAnalysis.InTransitDataAdaptor_GetPartitioner(self)

    def OpenStream(self):
        r"""OpenStream(InTransitDataAdaptor self) -> int"""
        return _PythonAnalysis.InTransitDataAdaptor_OpenStream(self)

    def CloseStream(self):
        r"""CloseStream(InTransitDataAdaptor self) -> int"""
        return _PythonAnalysis.InTransitDataAdaptor_CloseStream(self)

    def AdvanceStream(self):
        r"""AdvanceStream(InTransitDataAdaptor self) -> int"""
        return _PythonAnalysis.InTransitDataAdaptor_AdvanceStream(self)

    def StreamGood(self):
        r"""StreamGood(InTransitDataAdaptor self) -> int"""
        return _PythonAnalysis.InTransitDataAdaptor_StreamGood(self)

    def Finalize(self):
        r"""Finalize(InTransitDataAdaptor self) -> int"""
        return _PythonAnalysis.InTransitDataAdaptor_Finalize(self)
    __swig_destroy__ = _PythonAnalysis.delete_InTransitDataAdaptor

    def GetNumberOfMeshes(self):
        r"""GetNumberOfMeshes(InTransitDataAdaptor self) -> unsigned int"""
        return _PythonAnalysis.InTransitDataAdaptor_GetNumberOfMeshes(self)

    def GetMeshMetadata(self, *args):
        r"""
        GetMeshMetadata(InTransitDataAdaptor self, unsigned int id, MeshMetadataFlags flags=sensei::MeshMetadataFlags()) -> metadata_ptr

        Parameters
        ----------
        id: unsigned int
        flags: sensei::MeshMetadataFlags

        """
        return _PythonAnalysis.InTransitDataAdaptor_GetMeshMetadata(self, *args)

    def GetMesh(self, meshName, structureOnly):
        r"""
        GetMesh(InTransitDataAdaptor self, std::string const & meshName, bool structureOnly) -> svtkDataObject

        Parameters
        ----------
        meshName: std::string const &
        structureOnly: bool

        """
        return _PythonAnalysis.InTransitDataAdaptor_GetMesh(self, meshName, structureOnly)

    def AddArray(self, mesh, meshName, association, arrayName):
        r"""
        AddArray(InTransitDataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, std::string const & arrayName)

        Parameters
        ----------
        mesh: svtkDataObject *
        meshName: std::string const &
        association: int
        arrayName: std::string const &

        """
        return _PythonAnalysis.InTransitDataAdaptor_AddArray(self, mesh, meshName, association, arrayName)

    def ReleaseData(self):
        r"""ReleaseData(InTransitDataAdaptor self)"""
        return _PythonAnalysis.InTransitDataAdaptor_ReleaseData(self)

    def GetSenderMeshMetadata(self, id):
        r"""
        GetSenderMeshMetadata(InTransitDataAdaptor self, unsigned int id) -> metadata_ptr

        Parameters
        ----------
        id: unsigned int

        """
        return _PythonAnalysis.InTransitDataAdaptor_GetSenderMeshMetadata(self, id)

    def GetReceiverMeshMetadata(self, id):
        r"""
        GetReceiverMeshMetadata(InTransitDataAdaptor self, unsigned int id) -> metadata_ptr

        Parameters
        ----------
        id: unsigned int

        """
        return _PythonAnalysis.InTransitDataAdaptor_GetReceiverMeshMetadata(self, id)

    def SetReceiverMeshMetadata(self, id, md):
        r"""
        SetReceiverMeshMetadata(InTransitDataAdaptor self, unsigned int id, metadata_ptr md)

        Parameters
        ----------
        id: unsigned int
        md: sensei::MeshMetadataPtr &

        """
        return _PythonAnalysis.InTransitDataAdaptor_SetReceiverMeshMetadata(self, id, md)

    def __str__(self):
        r"""__str__(InTransitDataAdaptor self) -> std::string"""
        return _PythonAnalysis.InTransitDataAdaptor___str__(self)

# Register InTransitDataAdaptor in _PythonAnalysis:
_PythonAnalysis.InTransitDataAdaptor_swigregister(InTransitDataAdaptor)

def AsInTransitDataAdaptor(da):
    r"""
    AsInTransitDataAdaptor(DataAdaptor da) -> InTransitDataAdaptor

    Parameters
    ----------
    da: sensei::DataAdaptor *

    """
    return _PythonAnalysis.AsInTransitDataAdaptor(da)
class ConfigurableInTransitDataAdaptor(InTransitDataAdaptor):
    r"""Proxy of C++ sensei::ConfigurableInTransitDataAdaptor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def New():
        r"""New() -> ConfigurableInTransitDataAdaptor"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_New()

    @staticmethod
    def IsTypeOf(type):
        r"""
        IsTypeOf(char const * type) -> svtkTypeBool

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_IsTypeOf(type)

    def IsA(self, type):
        r"""
        IsA(ConfigurableInTransitDataAdaptor self, char const * type) -> svtkTypeBool

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_IsA(self, type)

    @staticmethod
    def SafeDownCast(o):
        r"""
        SafeDownCast(svtkObjectBase o) -> ConfigurableInTransitDataAdaptor

        Parameters
        ----------
        o: svtkObjectBase *

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_SafeDownCast(o)

    def NewInstance(self):
        r"""NewInstance(ConfigurableInTransitDataAdaptor self) -> ConfigurableInTransitDataAdaptor"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_NewInstance(self)

    @staticmethod
    def GetNumberOfGenerationsFromBaseType(type):
        r"""
        GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBaseType(type)

    def GetNumberOfGenerationsFromBase(self, type):
        r"""
        GetNumberOfGenerationsFromBase(ConfigurableInTransitDataAdaptor self, char const * type) -> svtkIdType

        Parameters
        ----------
        type: char const *

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBase(self, type)

    def SetConnectionInfo(self, info):
        r"""
        SetConnectionInfo(ConfigurableInTransitDataAdaptor self, std::string const & info) -> int

        Parameters
        ----------
        info: std::string const &

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_SetConnectionInfo(self, info)

    def GetConnectionInfo(self):
        r"""GetConnectionInfo(ConfigurableInTransitDataAdaptor self) -> std::string const &"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetConnectionInfo(self)

    def Initialize(self, *args):
        r"""
        Initialize(ConfigurableInTransitDataAdaptor self, std::string const & fileName) -> int

        Parameters
        ----------
        fileName: std::string const &

        Initialize(ConfigurableInTransitDataAdaptor self, pugi::xml_node & node) -> int

        Parameters
        ----------
        node: pugi::xml_node &

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_Initialize(self, *args)

    def SetPartitioner(self, partitioner):
        r"""
        SetPartitioner(ConfigurableInTransitDataAdaptor self, sensei::PartitionerPtr const & partitioner)

        Parameters
        ----------
        partitioner: sensei::PartitionerPtr const &

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_SetPartitioner(self, partitioner)

    def GetPartitioner(self):
        r"""GetPartitioner(ConfigurableInTransitDataAdaptor self) -> sensei::PartitionerPtr"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetPartitioner(self)

    def OpenStream(self):
        r"""OpenStream(ConfigurableInTransitDataAdaptor self) -> int"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_OpenStream(self)

    def CloseStream(self):
        r"""CloseStream(ConfigurableInTransitDataAdaptor self) -> int"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_CloseStream(self)

    def AdvanceStream(self):
        r"""AdvanceStream(ConfigurableInTransitDataAdaptor self) -> int"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_AdvanceStream(self)

    def StreamGood(self):
        r"""StreamGood(ConfigurableInTransitDataAdaptor self) -> int"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_StreamGood(self)

    def Finalize(self):
        r"""Finalize(ConfigurableInTransitDataAdaptor self) -> int"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_Finalize(self)

    def AddGhostNodesArray(self, mesh, meshName):
        r"""
        AddGhostNodesArray(ConfigurableInTransitDataAdaptor self, svtkDataObject mesh, std::string const & meshName) -> int

        Parameters
        ----------
        mesh: svtkDataObject *
        meshName: std::string const &

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_AddGhostNodesArray(self, mesh, meshName)

    def AddGhostCellsArray(self, mesh, meshName):
        r"""
        AddGhostCellsArray(ConfigurableInTransitDataAdaptor self, svtkDataObject mesh, std::string const & meshName) -> int

        Parameters
        ----------
        mesh: svtkDataObject *
        meshName: std::string const &

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_AddGhostCellsArray(self, mesh, meshName)

    def AddArrays(self, mesh, meshName, association, arrayName):
        r"""
        AddArrays(ConfigurableInTransitDataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, vector_string arrayName) -> int

        Parameters
        ----------
        mesh: svtkDataObject *
        meshName: std::string const &
        association: int
        arrayName: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_AddArrays(self, mesh, meshName, association, arrayName)

    def GetDataTime(self):
        r"""GetDataTime(ConfigurableInTransitDataAdaptor self) -> double"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetDataTime(self)

    def SetDataTime(self, time):
        r"""
        SetDataTime(ConfigurableInTransitDataAdaptor self, double time)

        Parameters
        ----------
        time: double

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_SetDataTime(self, time)

    def GetDataTimeStep(self):
        r"""GetDataTimeStep(ConfigurableInTransitDataAdaptor self) -> long"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetDataTimeStep(self)

    def SetDataTimeStep(self, index):
        r"""
        SetDataTimeStep(ConfigurableInTransitDataAdaptor self, long index)

        Parameters
        ----------
        index: long

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_SetDataTimeStep(self, index)
    __swig_destroy__ = _PythonAnalysis.delete_ConfigurableInTransitDataAdaptor

    def __init__(self):
        r"""__init__(ConfigurableInTransitDataAdaptor self) -> ConfigurableInTransitDataAdaptor"""
        _PythonAnalysis.ConfigurableInTransitDataAdaptor_swiginit(self, _PythonAnalysis.new_ConfigurableInTransitDataAdaptor())

    def GetNumberOfMeshes(self):
        r"""GetNumberOfMeshes(ConfigurableInTransitDataAdaptor self) -> unsigned int"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetNumberOfMeshes(self)

    def GetMeshMetadata(self, *args):
        r"""
        GetMeshMetadata(ConfigurableInTransitDataAdaptor self, unsigned int id, MeshMetadataFlags flags=sensei::MeshMetadataFlags()) -> metadata_ptr

        Parameters
        ----------
        id: unsigned int
        flags: sensei::MeshMetadataFlags

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetMeshMetadata(self, *args)

    def GetMesh(self, meshName, structureOnly):
        r"""
        GetMesh(ConfigurableInTransitDataAdaptor self, std::string const & meshName, bool structureOnly) -> svtkDataObject

        Parameters
        ----------
        meshName: std::string const &
        structureOnly: bool

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetMesh(self, meshName, structureOnly)

    def AddArray(self, mesh, meshName, association, arrayName):
        r"""
        AddArray(ConfigurableInTransitDataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, std::string const & arrayName)

        Parameters
        ----------
        mesh: svtkDataObject *
        meshName: std::string const &
        association: int
        arrayName: std::string const &

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_AddArray(self, mesh, meshName, association, arrayName)

    def ReleaseData(self):
        r"""ReleaseData(ConfigurableInTransitDataAdaptor self)"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_ReleaseData(self)

    def GetSenderMeshMetadata(self, id):
        r"""
        GetSenderMeshMetadata(ConfigurableInTransitDataAdaptor self, unsigned int id) -> metadata_ptr

        Parameters
        ----------
        id: unsigned int

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetSenderMeshMetadata(self, id)

    def GetReceiverMeshMetadata(self, id):
        r"""
        GetReceiverMeshMetadata(ConfigurableInTransitDataAdaptor self, unsigned int id) -> metadata_ptr

        Parameters
        ----------
        id: unsigned int

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_GetReceiverMeshMetadata(self, id)

    def SetReceiverMeshMetadata(self, id, md):
        r"""
        SetReceiverMeshMetadata(ConfigurableInTransitDataAdaptor self, unsigned int id, metadata_ptr md)

        Parameters
        ----------
        id: unsigned int
        md: sensei::MeshMetadataPtr &

        """
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata(self, id, md)

    def __str__(self):
        r"""__str__(ConfigurableInTransitDataAdaptor self) -> std::string"""
        return _PythonAnalysis.ConfigurableInTransitDataAdaptor___str__(self)

# Register ConfigurableInTransitDataAdaptor in _PythonAnalysis:
_PythonAnalysis.ConfigurableInTransitDataAdaptor_swigregister(ConfigurableInTransitDataAdaptor)

