/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040100
#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#else
  return PyString_AsString(str);
#endif
}

/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility
 * with any uses in user interface files. */
#define SWIG_Python_str_DelForPy3(x)


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  Py_DecRef(str);
  Py_DecRef(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /*tp_print*/
#else
      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          Py_DECREF(data->newraw);
          Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  Py_XDECREF(data->klass);
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        Py_DECREF(ofmt);
      }
    }
    Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      Py_DecRef(repr);
      Py_DecRef(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      Py_DecRef(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    Py_XDECREF(Swig_Capsule_global);
  }
  Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  Py_XDECREF(sobj->dict);
#endif
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /*tp_print*/
#else
      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      Py_DECREF(pointer);
    }
  } else {
    Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        Py_DECREF(obj);
      }
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AddArrayFunction swig_types[0]
#define SWIGTYPE_p_ArrayType32 swig_types[1]
#define SWIGTYPE_p_ArrayType64 swig_types[2]
#define SWIGTYPE_p_AssocArrayMapType swig_types[3]
#define SWIGTYPE_p_FieldList swig_types[4]
#define SWIGTYPE_p_GetMeshFunction swig_types[5]
#define SWIGTYPE_p_GetMeshMetadataFunction swig_types[6]
#define SWIGTYPE_p_GetNumberOfMeshesFunction swig_types[7]
#define SWIGTYPE_p_InputArrayList swig_types[8]
#define SWIGTYPE_p_MPI_Comm swig_types[9]
#define SWIGTYPE_p_MeshArrayMapType swig_types[10]
#define SWIGTYPE_p_MeshNamesType swig_types[11]
#define SWIGTYPE_p_ReleaseDataFunction swig_types[12]
#define SWIGTYPE_p_SVTKCellType swig_types[13]
#define SWIGTYPE_p_SelfType swig_types[14]
#define SWIGTYPE_p_StorageArrayList swig_types[15]
#define SWIGTYPE_p_Superclass swig_types[16]
#define SWIGTYPE_p_ValueType swig_types[17]
#define SWIGTYPE_p_allocator_type swig_types[18]
#define SWIGTYPE_p_char swig_types[19]
#define SWIGTYPE_p_difference_type swig_types[20]
#define SWIGTYPE_p_double swig_types[21]
#define SWIGTYPE_p_float swig_types[22]
#define SWIGTYPE_p_int swig_types[23]
#define SWIGTYPE_p_key_type swig_types[24]
#define SWIGTYPE_p_long_long swig_types[25]
#define SWIGTYPE_p_mapped_type swig_types[26]
#define SWIGTYPE_p_ostream swig_types[27]
#define SWIGTYPE_p_p_PyObject swig_types[28]
#define SWIGTYPE_p_p_sensei__ConfigurableInTransitDataAdaptor swig_types[29]
#define SWIGTYPE_p_p_sensei__DataAdaptor swig_types[30]
#define SWIGTYPE_p_p_sensei__InTransitDataAdaptor swig_types[31]
#define SWIGTYPE_p_p_sensei__ProgrammableDataAdaptor swig_types[32]
#define SWIGTYPE_p_p_sensei__SVTKDataAdaptor swig_types[33]
#define SWIGTYPE_p_p_svtkCompositeDataSet swig_types[34]
#define SWIGTYPE_p_p_svtkDataObject swig_types[35]
#define SWIGTYPE_p_p_svtkDataObjectTree swig_types[36]
#define SWIGTYPE_p_p_svtkDataSet swig_types[37]
#define SWIGTYPE_p_p_svtkImageData swig_types[38]
#define SWIGTYPE_p_p_svtkMultiBlockDataSet swig_types[39]
#define SWIGTYPE_p_p_svtkNonOverlappingAMR swig_types[40]
#define SWIGTYPE_p_p_svtkOverlappingAMR swig_types[41]
#define SWIGTYPE_p_p_svtkPointSet swig_types[42]
#define SWIGTYPE_p_p_svtkPolyData swig_types[43]
#define SWIGTYPE_p_p_svtkRectilinearGrid swig_types[44]
#define SWIGTYPE_p_p_svtkStructuredGrid swig_types[45]
#define SWIGTYPE_p_p_svtkTable swig_types[46]
#define SWIGTYPE_p_p_svtkUniformGrid swig_types[47]
#define SWIGTYPE_p_p_svtkUniformGridAMR swig_types[48]
#define SWIGTYPE_p_p_svtkUnstructuredGrid swig_types[49]
#define SWIGTYPE_p_p_svtkUnstructuredGridBase swig_types[50]
#define SWIGTYPE_p_pugi__xml_node swig_types[51]
#define SWIGTYPE_p_sensei__AnalysisAdaptor swig_types[52]
#define SWIGTYPE_p_sensei__ArrayRequirementsIterator swig_types[53]
#define SWIGTYPE_p_sensei__Autocorrelation swig_types[54]
#define SWIGTYPE_p_sensei__BinaryStream swig_types[55]
#define SWIGTYPE_p_sensei__BlockPartitioner swig_types[56]
#define SWIGTYPE_p_sensei__ConfigurableAnalysis swig_types[57]
#define SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor swig_types[58]
#define SWIGTYPE_p_sensei__ConfigurablePartitioner swig_types[59]
#define SWIGTYPE_p_sensei__DataAdaptor swig_types[60]
#define SWIGTYPE_p_sensei__DataRequirements swig_types[61]
#define SWIGTYPE_p_sensei__Histogram swig_types[62]
#define SWIGTYPE_p_sensei__InTransitDataAdaptor swig_types[63]
#define SWIGTYPE_p_sensei__IsoSurfacePartitioner swig_types[64]
#define SWIGTYPE_p_sensei__MappedPartitioner swig_types[65]
#define SWIGTYPE_p_sensei__MeshMetadata swig_types[66]
#define SWIGTYPE_p_sensei__MeshMetadataFlags swig_types[67]
#define SWIGTYPE_p_sensei__MeshRequirementsIterator swig_types[68]
#define SWIGTYPE_p_sensei__Partitioner swig_types[69]
#define SWIGTYPE_p_sensei__PlanarPartitioner swig_types[70]
#define SWIGTYPE_p_sensei__PlanarSlicePartitioner swig_types[71]
#define SWIGTYPE_p_sensei__Profiler swig_types[72]
#define SWIGTYPE_p_sensei__ProgrammableDataAdaptor swig_types[73]
#define SWIGTYPE_p_sensei__SVTKDataAdaptor swig_types[74]
#define SWIGTYPE_p_short swig_types[75]
#define SWIGTYPE_p_signed_char swig_types[76]
#define SWIGTYPE_p_size_type swig_types[77]
#define SWIGTYPE_p_std__allocatorT_char_t swig_types[78]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[79]
#define SWIGTYPE_p_std__allocatorT_float_t swig_types[80]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[81]
#define SWIGTYPE_p_std__allocatorT_long_long_t swig_types[82]
#define SWIGTYPE_p_std__allocatorT_long_t swig_types[83]
#define SWIGTYPE_p_std__allocatorT_std__arrayT_double_2_t_t swig_types[84]
#define SWIGTYPE_p_std__allocatorT_std__arrayT_double_3_t_t swig_types[85]
#define SWIGTYPE_p_std__allocatorT_std__arrayT_double_6_t_t swig_types[86]
#define SWIGTYPE_p_std__allocatorT_std__arrayT_int_2_t_t swig_types[87]
#define SWIGTYPE_p_std__allocatorT_std__arrayT_int_3_t_t swig_types[88]
#define SWIGTYPE_p_std__allocatorT_std__arrayT_int_6_t_t swig_types[89]
#define SWIGTYPE_p_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t swig_types[90]
#define SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_bool_t_t swig_types[91]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[92]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t swig_types[93]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t swig_types[94]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t swig_types[95]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t swig_types[96]
#define SWIGTYPE_p_std__arrayT_double_2_t swig_types[97]
#define SWIGTYPE_p_std__arrayT_double_3_t swig_types[98]
#define SWIGTYPE_p_std__arrayT_double_6_t swig_types[99]
#define SWIGTYPE_p_std__arrayT_int_2_t swig_types[100]
#define SWIGTYPE_p_std__arrayT_int_3_t swig_types[101]
#define SWIGTYPE_p_std__arrayT_int_6_t swig_types[102]
#define SWIGTYPE_p_std__invalid_argument swig_types[103]
#define SWIGTYPE_p_std__lessT_int_t swig_types[104]
#define SWIGTYPE_p_std__lessT_std__string_t swig_types[105]
#define SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t swig_types[106]
#define SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t swig_types[107]
#define SWIGTYPE_p_std__ostream swig_types[108]
#define SWIGTYPE_p_std__shared_ptrT_sensei__BlockPartitioner_t swig_types[109]
#define SWIGTYPE_p_std__shared_ptrT_sensei__ConfigurablePartitioner_t swig_types[110]
#define SWIGTYPE_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t swig_types[111]
#define SWIGTYPE_p_std__shared_ptrT_sensei__MappedPartitioner_t swig_types[112]
#define SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t swig_types[113]
#define SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t swig_types[114]
#define SWIGTYPE_p_std__shared_ptrT_sensei__PlanarPartitioner_t swig_types[115]
#define SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t swig_types[116]
#define SWIGTYPE_p_std__string swig_types[117]
#define SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t swig_types[118]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[119]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[120]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[121]
#define SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t swig_types[122]
#define SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t swig_types[123]
#define SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t swig_types[124]
#define SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t swig_types[125]
#define SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t swig_types[126]
#define SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t swig_types[127]
#define SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t swig_types[128]
#define SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t swig_types[129]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[130]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t swig_types[131]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t swig_types[132]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t swig_types[133]
#define SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t swig_types[134]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_char_t swig_types[135]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_double_t swig_types[136]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_float_t swig_types[137]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_int_t swig_types[138]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_long_long_t swig_types[139]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_long_t swig_types[140]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_short_t swig_types[141]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_signed_char_t swig_types[142]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_unsigned_char_t swig_types[143]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_unsigned_int_t swig_types[144]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_unsigned_long_long_t swig_types[145]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_unsigned_long_t swig_types[146]
#define SWIGTYPE_p_svtkAOSDataArrayTemplateT_unsigned_short_t swig_types[147]
#define SWIGTYPE_p_svtkAbstractArray swig_types[148]
#define SWIGTYPE_p_svtkArrayIterator swig_types[149]
#define SWIGTYPE_p_svtkBitArray swig_types[150]
#define SWIGTYPE_p_svtkBitArrayIterator swig_types[151]
#define SWIGTYPE_p_svtkCellArray swig_types[152]
#define SWIGTYPE_p_svtkCellData swig_types[153]
#define SWIGTYPE_p_svtkCellTypes swig_types[154]
#define SWIGTYPE_p_svtkCharArray swig_types[155]
#define SWIGTYPE_p_svtkCollection swig_types[156]
#define SWIGTYPE_p_svtkCollectionIterator swig_types[157]
#define SWIGTYPE_p_svtkCompositeDataIterator swig_types[158]
#define SWIGTYPE_p_svtkCompositeDataSet swig_types[159]
#define SWIGTYPE_p_svtkDataArray swig_types[160]
#define SWIGTYPE_p_svtkDataArrayCollection swig_types[161]
#define SWIGTYPE_p_svtkDataArrayCollectionIterator swig_types[162]
#define SWIGTYPE_p_svtkDataObject swig_types[163]
#define SWIGTYPE_p_svtkDataObjectTree swig_types[164]
#define SWIGTYPE_p_svtkDataObjectTreeIterator swig_types[165]
#define SWIGTYPE_p_svtkDataSet swig_types[166]
#define SWIGTYPE_p_svtkDataSetAttributes swig_types[167]
#define SWIGTYPE_p_svtkDoubleArray swig_types[168]
#define SWIGTYPE_p_svtkFieldData swig_types[169]
#define SWIGTYPE_p_svtkFloatArray swig_types[170]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_char_t_char_t swig_types[171]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_double_t_double_t swig_types[172]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_float_t_float_t swig_types[173]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_int_t_int_t swig_types[174]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_long_t_long_long_t swig_types[175]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_t_long_t swig_types[176]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_short_t_short_t swig_types[177]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_signed_char_t_signed_char_t swig_types[178]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_char_t_unsigned_char_t swig_types[179]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_int_t_unsigned_int_t swig_types[180]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_long_t_unsigned_long_long_t swig_types[181]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_t_unsigned_long_t swig_types[182]
#define SWIGTYPE_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_short_t_unsigned_short_t swig_types[183]
#define SWIGTYPE_p_svtkIdTypeArray swig_types[184]
#define SWIGTYPE_p_svtkImageData swig_types[185]
#define SWIGTYPE_p_svtkIndent swig_types[186]
#define SWIGTYPE_p_svtkIntArray swig_types[187]
#define SWIGTYPE_p_svtkLongArray swig_types[188]
#define SWIGTYPE_p_svtkLongLongArray swig_types[189]
#define SWIGTYPE_p_svtkMultiBlockDataSet swig_types[190]
#define SWIGTYPE_p_svtkNonOverlappingAMR swig_types[191]
#define SWIGTYPE_p_svtkObject swig_types[192]
#define SWIGTYPE_p_svtkObjectBase swig_types[193]
#define SWIGTYPE_p_svtkOverlappingAMR swig_types[194]
#define SWIGTYPE_p_svtkPointData swig_types[195]
#define SWIGTYPE_p_svtkPointSet swig_types[196]
#define SWIGTYPE_p_svtkPoints swig_types[197]
#define SWIGTYPE_p_svtkPolyData swig_types[198]
#define SWIGTYPE_p_svtkRectilinearGrid swig_types[199]
#define SWIGTYPE_p_svtkShortArray swig_types[200]
#define SWIGTYPE_p_svtkSignedCharArray swig_types[201]
#define SWIGTYPE_p_svtkStructuredGrid swig_types[202]
#define SWIGTYPE_p_svtkTable swig_types[203]
#define SWIGTYPE_p_svtkUniformGrid swig_types[204]
#define SWIGTYPE_p_svtkUniformGridAMR swig_types[205]
#define SWIGTYPE_p_svtkUniformGridAMRDataIterator swig_types[206]
#define SWIGTYPE_p_svtkUnsignedCharArray swig_types[207]
#define SWIGTYPE_p_svtkUnsignedIntArray swig_types[208]
#define SWIGTYPE_p_svtkUnsignedLongArray swig_types[209]
#define SWIGTYPE_p_svtkUnsignedLongLongArray swig_types[210]
#define SWIGTYPE_p_svtkUnsignedShortArray swig_types[211]
#define SWIGTYPE_p_svtkUnstructuredGrid swig_types[212]
#define SWIGTYPE_p_svtkUnstructuredGridBase swig_types[213]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[214]
#define SWIGTYPE_p_unsigned_char swig_types[215]
#define SWIGTYPE_p_unsigned_int swig_types[216]
#define SWIGTYPE_p_unsigned_long swig_types[217]
#define SWIGTYPE_p_unsigned_long_long swig_types[218]
#define SWIGTYPE_p_unsigned_short swig_types[219]
#define SWIGTYPE_p_value_type swig_types[220]
static swig_type_info *swig_types[222];
static swig_module_info swig_module = {swig_types, 221, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _senseiPython.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__senseiPython

#else
#  define SWIG_init    init_senseiPython

#endif
#define SWIG_name    "_senseiPython"

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define SWIG_FILE_WITH_INIT
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#define PY_ARRAY_UNIQUE_SYMBOL  PyArray_API_SENSEI
#include <numpy/arrayobject.h>
#include "senseiConfig.h"
#include "senseiPyDataAdaptor.h"
#include "LibsimImageProperties.h"
#include "DataRequirements.h"
#include "MeshMetadata.h"
#include "SVTKUtils.h"
#include "Profiler.h"
#include <sstream>

#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wunused-parameter"


#include "svtk.h"


#include "mpi4py/mpi4py.h"


#include "senseiConfig.h"
#include "senseiPySequence.h"
#include "senseiPyArray.h"
#include "Error.h"
#include <Python.h>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICEOBJECT PyObject
#else
# define SWIGPY_SLICEOBJECT PySliceObject
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include <utility>


#include <map>


#include <algorithm>


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check() const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item))
	  return false;
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T, size_t N>
    struct traits_asptr<std::array<T, N> >  {
      static int asptr(PyObject *obj, std::array<T, N> **vec) {
	return traits_asptr_stdseq<std::array<T, N> >::asptr(obj, vec);
      }
    };

    template <class T, size_t N>
    struct traits_from<std::array<T, N> > {
      static PyObject *from(const std::array<T, N>& vec) {
	return traits_from_stdseq<std::array<T, N> >::from(vec);
      }
    };

    template <class SwigPySeq, class T, size_t N>
    inline void
    assign(const SwigPySeq& swigpyseq, std::array<T, N>* seq) {
      if (swigpyseq.size() < seq->size())
        throw std::invalid_argument("std::array cannot be expanded in size");
      else if (swigpyseq.size() > seq->size())
        throw std::invalid_argument("std::array cannot be reduced in size");
      std::copy(swigpyseq.begin(), swigpyseq.end(), seq->begin());
    }

    template <class T, size_t N>
    inline void
    erase(std::array<T, N>* SWIGUNUSEDPARM(seq), const typename std::array<T, N>::iterator& SWIGUNUSEDPARM(position)) {
      throw std::invalid_argument("std::array object does not support item deletion");
    }

    // Only limited slicing is supported as std::array is fixed in size
    template <class T, size_t N, class Difference>
    inline std::array<T, N>*
    getslice(const std::array<T, N>* self, Difference i, Difference j, Py_ssize_t step) {
      typedef std::array<T, N> Sequence;
      typename Sequence::size_type size = self->size();
      Difference ii = 0;
      Difference jj = 0;
      swig::slice_adjust(i, j, step, size, ii, jj);

      if (step == 1 && ii == 0 && static_cast<typename Sequence::size_type>(jj) == size) {
        Sequence *sequence = new Sequence();
        std::copy(self->begin(), self->end(), sequence->begin());
        return sequence;
      } else if (step == -1 && static_cast<typename Sequence::size_type>(ii) == (size - 1) && jj == -1) {
        Sequence *sequence = new Sequence();
        std::copy(self->rbegin(), self->rend(), sequence->begin());
        return sequence;
      } else {
        throw std::invalid_argument("std::array object only supports getting a slice that is the size of the array");
      }
    }

    template <class T, size_t N, class Difference, class InputSeq>
    inline void
    setslice(std::array<T, N>* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
      typedef std::array<T, N> Sequence;
      typename Sequence::size_type size = self->size();
      Difference ii = 0;
      Difference jj = 0;
      swig::slice_adjust(i, j, step, size, ii, jj, true);

      if (step == 1 && ii == 0 && static_cast<typename Sequence::size_type>(jj) == size) {
        std::copy(is.begin(), is.end(), self->begin());
      } else if (step == -1 && static_cast<typename Sequence::size_type>(ii) == (size - 1) && jj == -1) {
        std::copy(is.rbegin(), is.rend(), self->begin());
      } else {
        throw std::invalid_argument("std::array object only supports setting a slice that is the size of the array");
      }
    }

    template <class T, size_t N, class Difference>
    inline void
    delslice(std::array<T, N>* SWIGUNUSEDPARM(self), Difference SWIGUNUSEDPARM(i), Difference SWIGUNUSEDPARM(j), Py_ssize_t SWIGUNUSEDPARM(step)) {
      throw std::invalid_argument("std::array object does not support item deletion");
    }
  }


      namespace swig {
	template <>  struct traits<std::array< int, 2 > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::array<" "int" "," "2" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_array_Sl_int_Sc_2_Sg__iterator(std::array< int,2 > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_array_Sl_int_Sc_2_Sg____nonzero__(std::array< int,2 > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_array_Sl_int_Sc_2_Sg____bool__(std::array< int,2 > const *self){
      return !(self->empty());
    }
SWIGINTERN std::array< int,2 >::size_type std_array_Sl_int_Sc_2_Sg____len__(std::array< int,2 > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::array< int,2 > *std_array_Sl_int_Sc_2_Sg____getslice__(std::array< int,2 > *self,std::array< int,2 >::difference_type i,std::array< int,2 >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_int_Sc_2_Sg____setslice____SWIG_0(std::array< int,2 > *self,std::array< int,2 >::difference_type i,std::array< int,2 >::difference_type j){
      swig::setslice(self, i, j, 1, std::array< int,2 >());
    }
SWIGINTERN void std_array_Sl_int_Sc_2_Sg____setslice____SWIG_1(std::array< int,2 > *self,std::array< int,2 >::difference_type i,std::array< int,2 >::difference_type j,std::array< int,2 > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_array_Sl_int_Sc_2_Sg____delslice__(std::array< int,2 > *self,std::array< int,2 >::difference_type i,std::array< int,2 >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_int_Sc_2_Sg____delitem____SWIG_0(std::array< int,2 > *self,std::array< int,2 >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::array< int,2 > *std_array_Sl_int_Sc_2_Sg____getitem____SWIG_0(std::array< int,2 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,2 >::difference_type id = i;
      std::array< int,2 >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_int_Sc_2_Sg____setitem____SWIG_0(std::array< int,2 > *self,SWIGPY_SLICEOBJECT *slice,std::array< int,2 > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,2 >::difference_type id = i;
      std::array< int,2 >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_array_Sl_int_Sc_2_Sg____setitem____SWIG_1(std::array< int,2 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,2 >::difference_type id = i;
      std::array< int,2 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_int_Sc_2_Sg____delitem____SWIG_1(std::array< int,2 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,2 >::difference_type id = i;
      std::array< int,2 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::array< int,2 >::value_type const &std_array_Sl_int_Sc_2_Sg____getitem____SWIG_1(std::array< int,2 > const *self,std::array< int,2 >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_array_Sl_int_Sc_2_Sg____setitem____SWIG_2(std::array< int,2 > *self,std::array< int,2 >::difference_type i,std::array< int,2 >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }

      namespace swig {
	template <>  struct traits<std::array< int, 3 > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::array<" "int" "," "3" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_array_Sl_int_Sc_3_Sg__iterator(std::array< int,3 > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_array_Sl_int_Sc_3_Sg____nonzero__(std::array< int,3 > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_array_Sl_int_Sc_3_Sg____bool__(std::array< int,3 > const *self){
      return !(self->empty());
    }
SWIGINTERN std::array< int,3 >::size_type std_array_Sl_int_Sc_3_Sg____len__(std::array< int,3 > const *self){
      return self->size();
    }
SWIGINTERN std::array< int,3 > *std_array_Sl_int_Sc_3_Sg____getslice__(std::array< int,3 > *self,std::array< int,3 >::difference_type i,std::array< int,3 >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_int_Sc_3_Sg____setslice____SWIG_0(std::array< int,3 > *self,std::array< int,3 >::difference_type i,std::array< int,3 >::difference_type j){
      swig::setslice(self, i, j, 1, std::array< int,3 >());
    }
SWIGINTERN void std_array_Sl_int_Sc_3_Sg____setslice____SWIG_1(std::array< int,3 > *self,std::array< int,3 >::difference_type i,std::array< int,3 >::difference_type j,std::array< int,3 > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_array_Sl_int_Sc_3_Sg____delslice__(std::array< int,3 > *self,std::array< int,3 >::difference_type i,std::array< int,3 >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_int_Sc_3_Sg____delitem____SWIG_0(std::array< int,3 > *self,std::array< int,3 >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::array< int,3 > *std_array_Sl_int_Sc_3_Sg____getitem____SWIG_0(std::array< int,3 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,3 >::difference_type id = i;
      std::array< int,3 >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_int_Sc_3_Sg____setitem____SWIG_0(std::array< int,3 > *self,SWIGPY_SLICEOBJECT *slice,std::array< int,3 > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,3 >::difference_type id = i;
      std::array< int,3 >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_array_Sl_int_Sc_3_Sg____setitem____SWIG_1(std::array< int,3 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,3 >::difference_type id = i;
      std::array< int,3 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_int_Sc_3_Sg____delitem____SWIG_1(std::array< int,3 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,3 >::difference_type id = i;
      std::array< int,3 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::array< int,3 >::value_type const &std_array_Sl_int_Sc_3_Sg____getitem____SWIG_1(std::array< int,3 > const *self,std::array< int,3 >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_array_Sl_int_Sc_3_Sg____setitem____SWIG_2(std::array< int,3 > *self,std::array< int,3 >::difference_type i,std::array< int,3 >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }

      namespace swig {
	template <>  struct traits<std::array< int, 6 > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::array<" "int" "," "6" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_array_Sl_int_Sc_6_Sg__iterator(std::array< int,6 > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_array_Sl_int_Sc_6_Sg____nonzero__(std::array< int,6 > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_array_Sl_int_Sc_6_Sg____bool__(std::array< int,6 > const *self){
      return !(self->empty());
    }
SWIGINTERN std::array< int,6 >::size_type std_array_Sl_int_Sc_6_Sg____len__(std::array< int,6 > const *self){
      return self->size();
    }
SWIGINTERN std::array< int,6 > *std_array_Sl_int_Sc_6_Sg____getslice__(std::array< int,6 > *self,std::array< int,6 >::difference_type i,std::array< int,6 >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_int_Sc_6_Sg____setslice____SWIG_0(std::array< int,6 > *self,std::array< int,6 >::difference_type i,std::array< int,6 >::difference_type j){
      swig::setslice(self, i, j, 1, std::array< int,6 >());
    }
SWIGINTERN void std_array_Sl_int_Sc_6_Sg____setslice____SWIG_1(std::array< int,6 > *self,std::array< int,6 >::difference_type i,std::array< int,6 >::difference_type j,std::array< int,6 > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_array_Sl_int_Sc_6_Sg____delslice__(std::array< int,6 > *self,std::array< int,6 >::difference_type i,std::array< int,6 >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_int_Sc_6_Sg____delitem____SWIG_0(std::array< int,6 > *self,std::array< int,6 >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::array< int,6 > *std_array_Sl_int_Sc_6_Sg____getitem____SWIG_0(std::array< int,6 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,6 >::difference_type id = i;
      std::array< int,6 >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_int_Sc_6_Sg____setitem____SWIG_0(std::array< int,6 > *self,SWIGPY_SLICEOBJECT *slice,std::array< int,6 > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,6 >::difference_type id = i;
      std::array< int,6 >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_array_Sl_int_Sc_6_Sg____setitem____SWIG_1(std::array< int,6 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,6 >::difference_type id = i;
      std::array< int,6 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_int_Sc_6_Sg____delitem____SWIG_1(std::array< int,6 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< int,6 >::difference_type id = i;
      std::array< int,6 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::array< int,6 >::value_type const &std_array_Sl_int_Sc_6_Sg____getitem____SWIG_1(std::array< int,6 > const *self,std::array< int,6 >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_array_Sl_int_Sc_6_Sg____setitem____SWIG_2(std::array< int,6 > *self,std::array< int,6 >::difference_type i,std::array< int,6 >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::array< double, 2 > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::array<" "double" "," "2" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_array_Sl_double_Sc_2_Sg__iterator(std::array< double,2 > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_array_Sl_double_Sc_2_Sg____nonzero__(std::array< double,2 > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_array_Sl_double_Sc_2_Sg____bool__(std::array< double,2 > const *self){
      return !(self->empty());
    }
SWIGINTERN std::array< double,2 >::size_type std_array_Sl_double_Sc_2_Sg____len__(std::array< double,2 > const *self){
      return self->size();
    }
SWIGINTERN std::array< double,2 > *std_array_Sl_double_Sc_2_Sg____getslice__(std::array< double,2 > *self,std::array< double,2 >::difference_type i,std::array< double,2 >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_double_Sc_2_Sg____setslice____SWIG_0(std::array< double,2 > *self,std::array< double,2 >::difference_type i,std::array< double,2 >::difference_type j){
      swig::setslice(self, i, j, 1, std::array< double,2 >());
    }
SWIGINTERN void std_array_Sl_double_Sc_2_Sg____setslice____SWIG_1(std::array< double,2 > *self,std::array< double,2 >::difference_type i,std::array< double,2 >::difference_type j,std::array< double,2 > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_array_Sl_double_Sc_2_Sg____delslice__(std::array< double,2 > *self,std::array< double,2 >::difference_type i,std::array< double,2 >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_double_Sc_2_Sg____delitem____SWIG_0(std::array< double,2 > *self,std::array< double,2 >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::array< double,2 > *std_array_Sl_double_Sc_2_Sg____getitem____SWIG_0(std::array< double,2 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,2 >::difference_type id = i;
      std::array< double,2 >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_double_Sc_2_Sg____setitem____SWIG_0(std::array< double,2 > *self,SWIGPY_SLICEOBJECT *slice,std::array< double,2 > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,2 >::difference_type id = i;
      std::array< double,2 >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_array_Sl_double_Sc_2_Sg____setitem____SWIG_1(std::array< double,2 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,2 >::difference_type id = i;
      std::array< double,2 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_double_Sc_2_Sg____delitem____SWIG_1(std::array< double,2 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,2 >::difference_type id = i;
      std::array< double,2 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::array< double,2 >::value_type const &std_array_Sl_double_Sc_2_Sg____getitem____SWIG_1(std::array< double,2 > const *self,std::array< double,2 >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_array_Sl_double_Sc_2_Sg____setitem____SWIG_2(std::array< double,2 > *self,std::array< double,2 >::difference_type i,std::array< double,2 >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }

      namespace swig {
	template <>  struct traits<std::array< double, 3 > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::array<" "double" "," "3" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_array_Sl_double_Sc_3_Sg__iterator(std::array< double,3 > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_array_Sl_double_Sc_3_Sg____nonzero__(std::array< double,3 > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_array_Sl_double_Sc_3_Sg____bool__(std::array< double,3 > const *self){
      return !(self->empty());
    }
SWIGINTERN std::array< double,3 >::size_type std_array_Sl_double_Sc_3_Sg____len__(std::array< double,3 > const *self){
      return self->size();
    }
SWIGINTERN std::array< double,3 > *std_array_Sl_double_Sc_3_Sg____getslice__(std::array< double,3 > *self,std::array< double,3 >::difference_type i,std::array< double,3 >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_double_Sc_3_Sg____setslice____SWIG_0(std::array< double,3 > *self,std::array< double,3 >::difference_type i,std::array< double,3 >::difference_type j){
      swig::setslice(self, i, j, 1, std::array< double,3 >());
    }
SWIGINTERN void std_array_Sl_double_Sc_3_Sg____setslice____SWIG_1(std::array< double,3 > *self,std::array< double,3 >::difference_type i,std::array< double,3 >::difference_type j,std::array< double,3 > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_array_Sl_double_Sc_3_Sg____delslice__(std::array< double,3 > *self,std::array< double,3 >::difference_type i,std::array< double,3 >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_double_Sc_3_Sg____delitem____SWIG_0(std::array< double,3 > *self,std::array< double,3 >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::array< double,3 > *std_array_Sl_double_Sc_3_Sg____getitem____SWIG_0(std::array< double,3 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,3 >::difference_type id = i;
      std::array< double,3 >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_double_Sc_3_Sg____setitem____SWIG_0(std::array< double,3 > *self,SWIGPY_SLICEOBJECT *slice,std::array< double,3 > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,3 >::difference_type id = i;
      std::array< double,3 >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_array_Sl_double_Sc_3_Sg____setitem____SWIG_1(std::array< double,3 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,3 >::difference_type id = i;
      std::array< double,3 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_double_Sc_3_Sg____delitem____SWIG_1(std::array< double,3 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,3 >::difference_type id = i;
      std::array< double,3 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::array< double,3 >::value_type const &std_array_Sl_double_Sc_3_Sg____getitem____SWIG_1(std::array< double,3 > const *self,std::array< double,3 >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_array_Sl_double_Sc_3_Sg____setitem____SWIG_2(std::array< double,3 > *self,std::array< double,3 >::difference_type i,std::array< double,3 >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }

      namespace swig {
	template <>  struct traits<std::array< double, 6 > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::array<" "double" "," "6" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_array_Sl_double_Sc_6_Sg__iterator(std::array< double,6 > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_array_Sl_double_Sc_6_Sg____nonzero__(std::array< double,6 > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_array_Sl_double_Sc_6_Sg____bool__(std::array< double,6 > const *self){
      return !(self->empty());
    }
SWIGINTERN std::array< double,6 >::size_type std_array_Sl_double_Sc_6_Sg____len__(std::array< double,6 > const *self){
      return self->size();
    }
SWIGINTERN std::array< double,6 > *std_array_Sl_double_Sc_6_Sg____getslice__(std::array< double,6 > *self,std::array< double,6 >::difference_type i,std::array< double,6 >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_double_Sc_6_Sg____setslice____SWIG_0(std::array< double,6 > *self,std::array< double,6 >::difference_type i,std::array< double,6 >::difference_type j){
      swig::setslice(self, i, j, 1, std::array< double,6 >());
    }
SWIGINTERN void std_array_Sl_double_Sc_6_Sg____setslice____SWIG_1(std::array< double,6 > *self,std::array< double,6 >::difference_type i,std::array< double,6 >::difference_type j,std::array< double,6 > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_array_Sl_double_Sc_6_Sg____delslice__(std::array< double,6 > *self,std::array< double,6 >::difference_type i,std::array< double,6 >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_array_Sl_double_Sc_6_Sg____delitem____SWIG_0(std::array< double,6 > *self,std::array< double,6 >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::array< double,6 > *std_array_Sl_double_Sc_6_Sg____getitem____SWIG_0(std::array< double,6 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,6 >::difference_type id = i;
      std::array< double,6 >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_double_Sc_6_Sg____setitem____SWIG_0(std::array< double,6 > *self,SWIGPY_SLICEOBJECT *slice,std::array< double,6 > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,6 >::difference_type id = i;
      std::array< double,6 >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_array_Sl_double_Sc_6_Sg____setitem____SWIG_1(std::array< double,6 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,6 >::difference_type id = i;
      std::array< double,6 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_array_Sl_double_Sc_6_Sg____delitem____SWIG_1(std::array< double,6 > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::array< double,6 >::difference_type id = i;
      std::array< double,6 >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::array< double,6 >::value_type const &std_array_Sl_double_Sc_6_Sg____getitem____SWIG_1(std::array< double,6 > const *self,std::array< double,6 >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_array_Sl_double_Sc_6_Sg____setitem____SWIG_2(std::array< double,6 > *self,std::array< double,6 >::difference_type i,std::array< double,6 >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::string,std::allocator< std::string > >());
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_2(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


namespace swig {
  template <> struct traits< char > {
    typedef value_category category;
    static const char* type_name() { return"char"; }
  };
  template <>  struct traits_asval< char > {
    typedef char value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_char (obj, val);
    }
  };
  template <>  struct traits_from< char > {
    typedef char value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_char  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< char, std::allocator< char > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "char" "," "std::allocator< char >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_char_Sg__iterator(std::vector< char > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_char_Sg____nonzero__(std::vector< char > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_char_Sg____bool__(std::vector< char > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< char >::size_type std_vector_Sl_char_Sg____len__(std::vector< char > const *self){
      return self->size();
    }
SWIGINTERN std::vector< char,std::allocator< char > > *std_vector_Sl_char_Sg____getslice__(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_char_Sg____setslice____SWIG_0(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< char,std::allocator< char > >());
    }
SWIGINTERN void std_vector_Sl_char_Sg____setslice____SWIG_1(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::difference_type j,std::vector< char,std::allocator< char > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_char_Sg____delslice__(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_char_Sg____delitem____SWIG_0(std::vector< char > *self,std::vector< char >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< char,std::allocator< char > > *std_vector_Sl_char_Sg____getitem____SWIG_0(std::vector< char > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< char,std::allocator< char > >::difference_type id = i;
      std::vector< char,std::allocator< char > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_char_Sg____setitem____SWIG_0(std::vector< char > *self,SWIGPY_SLICEOBJECT *slice,std::vector< char,std::allocator< char > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< char,std::allocator< char > >::difference_type id = i;
      std::vector< char,std::allocator< char > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_char_Sg____setitem____SWIG_1(std::vector< char > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< char,std::allocator< char > >::difference_type id = i;
      std::vector< char,std::allocator< char > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_char_Sg____delitem____SWIG_1(std::vector< char > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< char,std::allocator< char > >::difference_type id = i;
      std::vector< char,std::allocator< char > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< char >::value_type const &std_vector_Sl_char_Sg____getitem____SWIG_1(std::vector< char > const *self,std::vector< char >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_char_Sg____setitem____SWIG_2(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< char >::value_type std_vector_Sl_char_Sg__pop(std::vector< char > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< char,std::allocator< char > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_char_Sg__append(std::vector< char > *self,std::vector< char >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< char >::iterator std_vector_Sl_char_Sg__erase__SWIG_0(std::vector< char > *self,std::vector< char >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< char >::iterator std_vector_Sl_char_Sg__erase__SWIG_1(std::vector< char > *self,std::vector< char >::iterator first,std::vector< char >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< char >::iterator std_vector_Sl_char_Sg__insert__SWIG_0(std::vector< char > *self,std::vector< char >::iterator pos,std::vector< char >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_char_Sg__insert__SWIG_1(std::vector< char > *self,std::vector< char >::iterator pos,std::vector< char >::size_type n,std::vector< char >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< int,std::allocator< int > >());
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_1(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,SWIGPY_SLICEOBJECT *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,std::vector< int >::iterator first,std::vector< int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__insert__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_int_Sg__insert__SWIG_1(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::size_type n,std::vector< int >::value_type const &x){ self->insert(pos, n, x); }

namespace swig {
  template <> struct traits< long > {
    typedef value_category category;
    static const char* type_name() { return"long"; }
  };
  template <>  struct traits_asval< long > {
    typedef long value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_long (obj, val);
    }
  };
  template <>  struct traits_from< long > {
    typedef long value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_long  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< long, std::allocator< long > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "long" "," "std::allocator< long >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_long_Sg__iterator(std::vector< long > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_long_Sg____nonzero__(std::vector< long > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_long_Sg____bool__(std::vector< long > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< long >::size_type std_vector_Sl_long_Sg____len__(std::vector< long > const *self){
      return self->size();
    }
SWIGINTERN std::vector< long,std::allocator< long > > *std_vector_Sl_long_Sg____getslice__(std::vector< long > *self,std::vector< long >::difference_type i,std::vector< long >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_long_Sg____setslice____SWIG_0(std::vector< long > *self,std::vector< long >::difference_type i,std::vector< long >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< long,std::allocator< long > >());
    }
SWIGINTERN void std_vector_Sl_long_Sg____setslice____SWIG_1(std::vector< long > *self,std::vector< long >::difference_type i,std::vector< long >::difference_type j,std::vector< long,std::allocator< long > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_long_Sg____delslice__(std::vector< long > *self,std::vector< long >::difference_type i,std::vector< long >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_long_Sg____delitem____SWIG_0(std::vector< long > *self,std::vector< long >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< long,std::allocator< long > > *std_vector_Sl_long_Sg____getitem____SWIG_0(std::vector< long > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< long,std::allocator< long > >::difference_type id = i;
      std::vector< long,std::allocator< long > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_long_Sg____setitem____SWIG_0(std::vector< long > *self,SWIGPY_SLICEOBJECT *slice,std::vector< long,std::allocator< long > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< long,std::allocator< long > >::difference_type id = i;
      std::vector< long,std::allocator< long > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_long_Sg____setitem____SWIG_1(std::vector< long > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< long,std::allocator< long > >::difference_type id = i;
      std::vector< long,std::allocator< long > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_long_Sg____delitem____SWIG_1(std::vector< long > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< long,std::allocator< long > >::difference_type id = i;
      std::vector< long,std::allocator< long > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< long >::value_type const &std_vector_Sl_long_Sg____getitem____SWIG_1(std::vector< long > const *self,std::vector< long >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_long_Sg____setitem____SWIG_2(std::vector< long > *self,std::vector< long >::difference_type i,std::vector< long >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< long >::value_type std_vector_Sl_long_Sg__pop(std::vector< long > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< long,std::allocator< long > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_long_Sg__append(std::vector< long > *self,std::vector< long >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< long >::iterator std_vector_Sl_long_Sg__erase__SWIG_0(std::vector< long > *self,std::vector< long >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< long >::iterator std_vector_Sl_long_Sg__erase__SWIG_1(std::vector< long > *self,std::vector< long >::iterator first,std::vector< long >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< long >::iterator std_vector_Sl_long_Sg__insert__SWIG_0(std::vector< long > *self,std::vector< long >::iterator pos,std::vector< long >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_long_Sg__insert__SWIG_1(std::vector< long > *self,std::vector< long >::iterator pos,std::vector< long >::size_type n,std::vector< long >::value_type const &x){ self->insert(pos, n, x); }

namespace swig {
  template <> struct traits< long long > {
    typedef value_category category;
    static const char* type_name() { return"long long"; }
  };
  template <>  struct traits_asval< long long > {
    typedef long long value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_long_SS_long (obj, val);
    }
  };
  template <>  struct traits_from< long long > {
    typedef long long value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_long_SS_long  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< long long, std::allocator< long long > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "long long" "," "std::allocator< long long >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_long_SS_long_Sg__iterator(std::vector< long long > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_long_SS_long_Sg____nonzero__(std::vector< long long > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_long_SS_long_Sg____bool__(std::vector< long long > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< long long >::size_type std_vector_Sl_long_SS_long_Sg____len__(std::vector< long long > const *self){
      return self->size();
    }
SWIGINTERN std::vector< long long,std::allocator< long long > > *std_vector_Sl_long_SS_long_Sg____getslice__(std::vector< long long > *self,std::vector< long long >::difference_type i,std::vector< long long >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg____setslice____SWIG_0(std::vector< long long > *self,std::vector< long long >::difference_type i,std::vector< long long >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< long long,std::allocator< long long > >());
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg____setslice____SWIG_1(std::vector< long long > *self,std::vector< long long >::difference_type i,std::vector< long long >::difference_type j,std::vector< long long,std::allocator< long long > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg____delslice__(std::vector< long long > *self,std::vector< long long >::difference_type i,std::vector< long long >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg____delitem____SWIG_0(std::vector< long long > *self,std::vector< long long >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< long long,std::allocator< long long > > *std_vector_Sl_long_SS_long_Sg____getitem____SWIG_0(std::vector< long long > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< long long,std::allocator< long long > >::difference_type id = i;
      std::vector< long long,std::allocator< long long > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg____setitem____SWIG_0(std::vector< long long > *self,SWIGPY_SLICEOBJECT *slice,std::vector< long long,std::allocator< long long > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< long long,std::allocator< long long > >::difference_type id = i;
      std::vector< long long,std::allocator< long long > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg____setitem____SWIG_1(std::vector< long long > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< long long,std::allocator< long long > >::difference_type id = i;
      std::vector< long long,std::allocator< long long > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg____delitem____SWIG_1(std::vector< long long > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< long long,std::allocator< long long > >::difference_type id = i;
      std::vector< long long,std::allocator< long long > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< long long >::value_type const &std_vector_Sl_long_SS_long_Sg____getitem____SWIG_1(std::vector< long long > const *self,std::vector< long long >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg____setitem____SWIG_2(std::vector< long long > *self,std::vector< long long >::difference_type i,std::vector< long long >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< long long >::value_type std_vector_Sl_long_SS_long_Sg__pop(std::vector< long long > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< long long,std::allocator< long long > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__append(std::vector< long long > *self,std::vector< long long >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< long long >::iterator std_vector_Sl_long_SS_long_Sg__erase__SWIG_0(std::vector< long long > *self,std::vector< long long >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< long long >::iterator std_vector_Sl_long_SS_long_Sg__erase__SWIG_1(std::vector< long long > *self,std::vector< long long >::iterator first,std::vector< long long >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< long long >::iterator std_vector_Sl_long_SS_long_Sg__insert__SWIG_0(std::vector< long long > *self,std::vector< long long >::iterator pos,std::vector< long long >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__insert__SWIG_1(std::vector< long long > *self,std::vector< long long >::iterator pos,std::vector< long long >::size_type n,std::vector< long long >::value_type const &x){ self->insert(pos, n, x); }

/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


namespace swig {
  template <> struct traits< float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };
  template <>  struct traits_asval< float > {
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_float (obj, val);
    }
  };
  template <>  struct traits_from< float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< float, std::allocator< float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator< float >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_float_Sg__iterator(std::vector< float > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_float_Sg____nonzero__(std::vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_float_Sg____bool__(std::vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< float >::size_type std_vector_Sl_float_Sg____len__(std::vector< float > const *self){
      return self->size();
    }
SWIGINTERN std::vector< float,std::allocator< float > > *std_vector_Sl_float_Sg____getslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setslice____SWIG_0(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< float,std::allocator< float > >());
    }
SWIGINTERN void std_vector_Sl_float_Sg____setslice____SWIG_1(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j,std::vector< float,std::allocator< float > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delitem____SWIG_0(std::vector< float > *self,std::vector< float >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< float,std::allocator< float > > *std_vector_Sl_float_Sg____getitem____SWIG_0(std::vector< float > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_0(std::vector< float > *self,SWIGPY_SLICEOBJECT *slice,std::vector< float,std::allocator< float > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_1(std::vector< float > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delitem____SWIG_1(std::vector< float > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg____getitem____SWIG_1(std::vector< float > const *self,std::vector< float >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_2(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__pop(std::vector< float > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< float,std::allocator< float > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_float_Sg__append(std::vector< float > *self,std::vector< float >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,std::vector< float >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,std::vector< float >::iterator first,std::vector< float >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__insert__SWIG_0(std::vector< float > *self,std::vector< float >::iterator pos,std::vector< float >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_float_Sg__insert__SWIG_1(std::vector< float > *self,std::vector< float >::iterator pos,std::vector< float >::size_type n,std::vector< float >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,SWIGPY_SLICEOBJECT *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< double,std::allocator< double > >::difference_type id = i;
      std::vector< double,std::allocator< double > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::array< int,2 >, std::allocator< std::array< int,2 > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::array< int,2 >" "," "std::allocator< std::array< int,2 > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__iterator(std::vector< std::array< int,2 > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____nonzero__(std::vector< std::array< int,2 > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____bool__(std::vector< std::array< int,2 > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::array< int,2 > >::size_type std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____len__(std::vector< std::array< int,2 > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____getslice__(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::difference_type i,std::vector< std::array< int,2 > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____setslice____SWIG_0(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::difference_type i,std::vector< std::array< int,2 > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >());
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____setslice____SWIG_1(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::difference_type i,std::vector< std::array< int,2 > >::difference_type j,std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____delslice__(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::difference_type i,std::vector< std::array< int,2 > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____delitem____SWIG_0(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____getitem____SWIG_0(std::vector< std::array< int,2 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >::difference_type id = i;
      std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____setitem____SWIG_0(std::vector< std::array< int,2 > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >::difference_type id = i;
      std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____setitem____SWIG_1(std::vector< std::array< int,2 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >::difference_type id = i;
      std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____delitem____SWIG_1(std::vector< std::array< int,2 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >::difference_type id = i;
      std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::array< int,2 > >::value_type const &std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____getitem____SWIG_1(std::vector< std::array< int,2 > > const *self,std::vector< std::array< int,2 > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____setitem____SWIG_2(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::difference_type i,std::vector< std::array< int,2 > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::array< int,2 > >::value_type std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__pop(std::vector< std::array< int,2 > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__append(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::array< int,2 > >::iterator std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__erase__SWIG_0(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::array< int,2 > >::iterator std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__erase__SWIG_1(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::iterator first,std::vector< std::array< int,2 > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::array< int,2 > >::iterator std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__insert__SWIG_0(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::iterator pos,std::vector< std::array< int,2 > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__insert__SWIG_1(std::vector< std::array< int,2 > > *self,std::vector< std::array< int,2 > >::iterator pos,std::vector< std::array< int,2 > >::size_type n,std::vector< std::array< int,2 > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::array< int,3 >, std::allocator< std::array< int,3 > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::array< int,3 >" "," "std::allocator< std::array< int,3 > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__iterator(std::vector< std::array< int,3 > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____nonzero__(std::vector< std::array< int,3 > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____bool__(std::vector< std::array< int,3 > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::array< int,3 > >::size_type std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____len__(std::vector< std::array< int,3 > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____getslice__(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::difference_type i,std::vector< std::array< int,3 > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____setslice____SWIG_0(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::difference_type i,std::vector< std::array< int,3 > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >());
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____setslice____SWIG_1(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::difference_type i,std::vector< std::array< int,3 > >::difference_type j,std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____delslice__(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::difference_type i,std::vector< std::array< int,3 > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____delitem____SWIG_0(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____getitem____SWIG_0(std::vector< std::array< int,3 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >::difference_type id = i;
      std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____setitem____SWIG_0(std::vector< std::array< int,3 > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >::difference_type id = i;
      std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____setitem____SWIG_1(std::vector< std::array< int,3 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >::difference_type id = i;
      std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____delitem____SWIG_1(std::vector< std::array< int,3 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >::difference_type id = i;
      std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::array< int,3 > >::value_type const &std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____getitem____SWIG_1(std::vector< std::array< int,3 > > const *self,std::vector< std::array< int,3 > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____setitem____SWIG_2(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::difference_type i,std::vector< std::array< int,3 > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::array< int,3 > >::value_type std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__pop(std::vector< std::array< int,3 > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__append(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::array< int,3 > >::iterator std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__erase__SWIG_0(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::array< int,3 > >::iterator std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__erase__SWIG_1(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::iterator first,std::vector< std::array< int,3 > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::array< int,3 > >::iterator std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__insert__SWIG_0(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::iterator pos,std::vector< std::array< int,3 > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__insert__SWIG_1(std::vector< std::array< int,3 > > *self,std::vector< std::array< int,3 > >::iterator pos,std::vector< std::array< int,3 > >::size_type n,std::vector< std::array< int,3 > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::array< int,6 >, std::allocator< std::array< int,6 > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::array< int,6 >" "," "std::allocator< std::array< int,6 > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__iterator(std::vector< std::array< int,6 > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____nonzero__(std::vector< std::array< int,6 > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____bool__(std::vector< std::array< int,6 > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::array< int,6 > >::size_type std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____len__(std::vector< std::array< int,6 > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____getslice__(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::difference_type i,std::vector< std::array< int,6 > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____setslice____SWIG_0(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::difference_type i,std::vector< std::array< int,6 > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >());
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____setslice____SWIG_1(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::difference_type i,std::vector< std::array< int,6 > >::difference_type j,std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____delslice__(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::difference_type i,std::vector< std::array< int,6 > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____delitem____SWIG_0(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____getitem____SWIG_0(std::vector< std::array< int,6 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >::difference_type id = i;
      std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____setitem____SWIG_0(std::vector< std::array< int,6 > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >::difference_type id = i;
      std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____setitem____SWIG_1(std::vector< std::array< int,6 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >::difference_type id = i;
      std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____delitem____SWIG_1(std::vector< std::array< int,6 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >::difference_type id = i;
      std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::array< int,6 > >::value_type const &std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____getitem____SWIG_1(std::vector< std::array< int,6 > > const *self,std::vector< std::array< int,6 > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____setitem____SWIG_2(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::difference_type i,std::vector< std::array< int,6 > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::array< int,6 > >::value_type std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__pop(std::vector< std::array< int,6 > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__append(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::array< int,6 > >::iterator std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__erase__SWIG_0(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::array< int,6 > >::iterator std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__erase__SWIG_1(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::iterator first,std::vector< std::array< int,6 > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::array< int,6 > >::iterator std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__insert__SWIG_0(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::iterator pos,std::vector< std::array< int,6 > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__insert__SWIG_1(std::vector< std::array< int,6 > > *self,std::vector< std::array< int,6 > >::iterator pos,std::vector< std::array< int,6 > >::size_type n,std::vector< std::array< int,6 > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::array< double,2 >, std::allocator< std::array< double,2 > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::array< double,2 >" "," "std::allocator< std::array< double,2 > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__iterator(std::vector< std::array< double,2 > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____nonzero__(std::vector< std::array< double,2 > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____bool__(std::vector< std::array< double,2 > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::array< double,2 > >::size_type std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____len__(std::vector< std::array< double,2 > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____getslice__(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::difference_type i,std::vector< std::array< double,2 > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____setslice____SWIG_0(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::difference_type i,std::vector< std::array< double,2 > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >());
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____setslice____SWIG_1(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::difference_type i,std::vector< std::array< double,2 > >::difference_type j,std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____delslice__(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::difference_type i,std::vector< std::array< double,2 > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____delitem____SWIG_0(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____getitem____SWIG_0(std::vector< std::array< double,2 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >::difference_type id = i;
      std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____setitem____SWIG_0(std::vector< std::array< double,2 > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >::difference_type id = i;
      std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____setitem____SWIG_1(std::vector< std::array< double,2 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >::difference_type id = i;
      std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____delitem____SWIG_1(std::vector< std::array< double,2 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >::difference_type id = i;
      std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::array< double,2 > >::value_type const &std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____getitem____SWIG_1(std::vector< std::array< double,2 > > const *self,std::vector< std::array< double,2 > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____setitem____SWIG_2(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::difference_type i,std::vector< std::array< double,2 > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::array< double,2 > >::value_type std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__pop(std::vector< std::array< double,2 > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__append(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::array< double,2 > >::iterator std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__erase__SWIG_0(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::array< double,2 > >::iterator std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__erase__SWIG_1(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::iterator first,std::vector< std::array< double,2 > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::array< double,2 > >::iterator std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__insert__SWIG_0(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::iterator pos,std::vector< std::array< double,2 > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__insert__SWIG_1(std::vector< std::array< double,2 > > *self,std::vector< std::array< double,2 > >::iterator pos,std::vector< std::array< double,2 > >::size_type n,std::vector< std::array< double,2 > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::array< double,3 >, std::allocator< std::array< double,3 > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::array< double,3 >" "," "std::allocator< std::array< double,3 > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__iterator(std::vector< std::array< double,3 > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____nonzero__(std::vector< std::array< double,3 > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____bool__(std::vector< std::array< double,3 > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::array< double,3 > >::size_type std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____len__(std::vector< std::array< double,3 > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____getslice__(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::difference_type i,std::vector< std::array< double,3 > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____setslice____SWIG_0(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::difference_type i,std::vector< std::array< double,3 > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >());
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____setslice____SWIG_1(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::difference_type i,std::vector< std::array< double,3 > >::difference_type j,std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____delslice__(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::difference_type i,std::vector< std::array< double,3 > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____delitem____SWIG_0(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____getitem____SWIG_0(std::vector< std::array< double,3 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >::difference_type id = i;
      std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____setitem____SWIG_0(std::vector< std::array< double,3 > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >::difference_type id = i;
      std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____setitem____SWIG_1(std::vector< std::array< double,3 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >::difference_type id = i;
      std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____delitem____SWIG_1(std::vector< std::array< double,3 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >::difference_type id = i;
      std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::array< double,3 > >::value_type const &std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____getitem____SWIG_1(std::vector< std::array< double,3 > > const *self,std::vector< std::array< double,3 > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____setitem____SWIG_2(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::difference_type i,std::vector< std::array< double,3 > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::array< double,3 > >::value_type std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__pop(std::vector< std::array< double,3 > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__append(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::array< double,3 > >::iterator std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__erase__SWIG_0(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::array< double,3 > >::iterator std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__erase__SWIG_1(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::iterator first,std::vector< std::array< double,3 > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::array< double,3 > >::iterator std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__insert__SWIG_0(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::iterator pos,std::vector< std::array< double,3 > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__insert__SWIG_1(std::vector< std::array< double,3 > > *self,std::vector< std::array< double,3 > >::iterator pos,std::vector< std::array< double,3 > >::size_type n,std::vector< std::array< double,3 > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::array< double,6 >, std::allocator< std::array< double,6 > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::array< double,6 >" "," "std::allocator< std::array< double,6 > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__iterator(std::vector< std::array< double,6 > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____nonzero__(std::vector< std::array< double,6 > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____bool__(std::vector< std::array< double,6 > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::array< double,6 > >::size_type std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____len__(std::vector< std::array< double,6 > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____getslice__(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::difference_type i,std::vector< std::array< double,6 > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____setslice____SWIG_0(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::difference_type i,std::vector< std::array< double,6 > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >());
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____setslice____SWIG_1(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::difference_type i,std::vector< std::array< double,6 > >::difference_type j,std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____delslice__(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::difference_type i,std::vector< std::array< double,6 > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____delitem____SWIG_0(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____getitem____SWIG_0(std::vector< std::array< double,6 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >::difference_type id = i;
      std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____setitem____SWIG_0(std::vector< std::array< double,6 > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >::difference_type id = i;
      std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____setitem____SWIG_1(std::vector< std::array< double,6 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >::difference_type id = i;
      std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____delitem____SWIG_1(std::vector< std::array< double,6 > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >::difference_type id = i;
      std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::array< double,6 > >::value_type const &std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____getitem____SWIG_1(std::vector< std::array< double,6 > > const *self,std::vector< std::array< double,6 > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____setitem____SWIG_2(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::difference_type i,std::vector< std::array< double,6 > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::array< double,6 > >::value_type std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__pop(std::vector< std::array< double,6 > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__append(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::array< double,6 > >::iterator std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__erase__SWIG_0(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::array< double,6 > >::iterator std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__erase__SWIG_1(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::iterator first,std::vector< std::array< double,6 > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::array< double,6 > >::iterator std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__insert__SWIG_0(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::iterator pos,std::vector< std::array< double,6 > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__insert__SWIG_1(std::vector< std::array< double,6 > > *self,std::vector< std::array< double,6 > >::iterator pos,std::vector< std::array< double,6 > >::size_type n,std::vector< std::array< double,6 > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >, std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >" "," "std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__iterator(std::vector< std::vector< std::array< double,2 > > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____nonzero__(std::vector< std::vector< std::array< double,2 > > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____bool__(std::vector< std::vector< std::array< double,2 > > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< std::array< double,2 > > >::size_type std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____len__(std::vector< std::vector< std::array< double,2 > > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____getslice__(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::difference_type i,std::vector< std::vector< std::array< double,2 > > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____setslice____SWIG_0(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::difference_type i,std::vector< std::vector< std::array< double,2 > > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____setslice____SWIG_1(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::difference_type i,std::vector< std::vector< std::array< double,2 > > >::difference_type j,std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____delslice__(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::difference_type i,std::vector< std::vector< std::array< double,2 > > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____delitem____SWIG_0(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____getitem____SWIG_0(std::vector< std::vector< std::array< double,2 > > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >::difference_type id = i;
      std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____setitem____SWIG_0(std::vector< std::vector< std::array< double,2 > > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >::difference_type id = i;
      std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____setitem____SWIG_1(std::vector< std::vector< std::array< double,2 > > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >::difference_type id = i;
      std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____delitem____SWIG_1(std::vector< std::vector< std::array< double,2 > > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >::difference_type id = i;
      std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< std::array< double,2 > > >::value_type const &std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____getitem____SWIG_1(std::vector< std::vector< std::array< double,2 > > > const *self,std::vector< std::vector< std::array< double,2 > > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____setitem____SWIG_2(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::difference_type i,std::vector< std::vector< std::array< double,2 > > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< std::array< double,2 > > >::value_type std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__pop(std::vector< std::vector< std::array< double,2 > > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__append(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< std::array< double,2 > > >::iterator std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__erase__SWIG_0(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< std::array< double,2 > > >::iterator std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__erase__SWIG_1(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::iterator first,std::vector< std::vector< std::array< double,2 > > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< std::array< double,2 > > >::iterator std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__insert__SWIG_0(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::iterator pos,std::vector< std::vector< std::array< double,2 > > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__insert__SWIG_1(std::vector< std::vector< std::array< double,2 > > > *self,std::vector< std::vector< std::array< double,2 > > >::iterator pos,std::vector< std::vector< std::array< double,2 > > >::size_type n,std::vector< std::vector< std::array< double,2 > > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >, std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >" "," "std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__iterator(std::vector< std::vector< std::array< int,2 > > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____nonzero__(std::vector< std::vector< std::array< int,2 > > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____bool__(std::vector< std::vector< std::array< int,2 > > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< std::array< int,2 > > >::size_type std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____len__(std::vector< std::vector< std::array< int,2 > > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____getslice__(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::difference_type i,std::vector< std::vector< std::array< int,2 > > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____setslice____SWIG_0(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::difference_type i,std::vector< std::vector< std::array< int,2 > > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____setslice____SWIG_1(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::difference_type i,std::vector< std::vector< std::array< int,2 > > >::difference_type j,std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____delslice__(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::difference_type i,std::vector< std::vector< std::array< int,2 > > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____delitem____SWIG_0(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____getitem____SWIG_0(std::vector< std::vector< std::array< int,2 > > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >::difference_type id = i;
      std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____setitem____SWIG_0(std::vector< std::vector< std::array< int,2 > > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >::difference_type id = i;
      std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____setitem____SWIG_1(std::vector< std::vector< std::array< int,2 > > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >::difference_type id = i;
      std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____delitem____SWIG_1(std::vector< std::vector< std::array< int,2 > > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >::difference_type id = i;
      std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< std::array< int,2 > > >::value_type const &std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____getitem____SWIG_1(std::vector< std::vector< std::array< int,2 > > > const *self,std::vector< std::vector< std::array< int,2 > > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____setitem____SWIG_2(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::difference_type i,std::vector< std::vector< std::array< int,2 > > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< std::array< int,2 > > >::value_type std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__pop(std::vector< std::vector< std::array< int,2 > > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__append(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< std::array< int,2 > > >::iterator std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__erase__SWIG_0(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< std::array< int,2 > > >::iterator std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__erase__SWIG_1(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::iterator first,std::vector< std::vector< std::array< int,2 > > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< std::array< int,2 > > >::iterator std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__insert__SWIG_0(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::iterator pos,std::vector< std::vector< std::array< int,2 > > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__insert__SWIG_1(std::vector< std::vector< std::array< int,2 > > > *self,std::vector< std::vector< std::array< int,2 > > >::iterator pos,std::vector< std::vector< std::array< int,2 > > >::size_type n,std::vector< std::vector< std::array< int,2 > > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< int,std::allocator< int > >, std::allocator< std::vector< int,std::allocator< int > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< int,std::allocator< int > >" "," "std::allocator< std::vector< int,std::allocator< int > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_int_Sg__Sg__iterator(std::vector< std::vector< int > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_int_Sg__Sg____bool__(std::vector< std::vector< int > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< int > >::size_type std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__(std::vector< std::vector< int > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice____SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice____SWIG_1(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< int > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type id = i;
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< int > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type id = i;
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< int > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type id = i;
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< int > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type id = i;
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< int > >::value_type const &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< int > > const *self,std::vector< std::vector< int > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::difference_type i,std::vector< std::vector< int > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< int > >::value_type std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(std::vector< std::vector< int > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< int > >::iterator std_vector_Sl_std_vector_Sl_int_Sg__Sg__erase__SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< int > >::iterator std_vector_Sl_std_vector_Sl_int_Sg__Sg__erase__SWIG_1(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::iterator first,std::vector< std::vector< int > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< int > >::iterator std_vector_Sl_std_vector_Sl_int_Sg__Sg__insert__SWIG_0(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::iterator pos,std::vector< std::vector< int > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__insert__SWIG_1(std::vector< std::vector< int > > *self,std::vector< std::vector< int > >::iterator pos,std::vector< std::vector< int > >::size_type n,std::vector< std::vector< int > >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< double,std::allocator< double > >, std::allocator< std::vector< double,std::allocator< double > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< double,std::allocator< double > >" "," "std::allocator< std::vector< double,std::allocator< double > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_double_Sg__Sg__iterator(std::vector< std::vector< double > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_double_Sg__Sg____nonzero__(std::vector< std::vector< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_double_Sg__Sg____bool__(std::vector< std::vector< double > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< double > >::size_type std_vector_Sl_std_vector_Sl_double_Sg__Sg____len__(std::vector< std::vector< double > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg____getslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delslice__(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< double > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< double > > *self,SWIGPY_SLICEOBJECT *slice,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< double > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< double > > *self,SWIGPY_SLICEOBJECT *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type id = i;
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< double > >::value_type const &std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< double > > const *self,std::vector< std::vector< double > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::difference_type i,std::vector< std::vector< double > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< double > >::value_type std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(std::vector< std::vector< double > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator first,std::vector< std::vector< double > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< double > >::iterator std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_0(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos,std::vector< std::vector< double > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_1(std::vector< std::vector< double > > *self,std::vector< std::vector< double > >::iterator pos,std::vector< std::vector< double > >::size_type n,std::vector< std::vector< double > >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


namespace swig {
  template <> struct traits< bool > {
    typedef value_category category;
    static const char* type_name() { return"bool"; }
  };
  template <>  struct traits_asval< bool > {
    typedef bool value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_bool (obj, val);
    }
  };
  template <>  struct traits_from< bool > {
    typedef bool value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_bool  (val);
    }
  };
}


  namespace swig {


















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>());
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) {
	    delete vp;
	    return res1;
	  }
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) {
	    delete vp;
	    return res2;
	  }
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<value_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair< std::string, bool > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "bool" " >";
	  }
	};
      }
    

  namespace swig {
    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct SwigPyMapIterator_T : SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      SwigPyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct SwigPyMapKeyIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct SwigPyMapValueIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapValueIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapValueIterator_T<OutIter>(current, begin, end, seq);
    }
  }


  namespace swig {
    template <class SwigPySeq, class K, class T, class Compare, class Alloc >
    inline void
    assign(const SwigPySeq& swigpyseq, std::map<K,T,Compare,Alloc > *map) {
      typedef typename std::map<K,T,Compare,Alloc >::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T, class Compare, class Alloc>
    struct traits_asptr<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	if (PyDict_Check(obj)) {
	  SwigVar_PyObject items = PyObject_CallMethod(obj,(char *)"items",NULL);
#if PY_VERSION_HEX >= 0x03000000
          /* In Python 3.x the ".items()" method returns a dict_items object */
          items = PySequence_Fast(items, ".items() didn't return a sequence!");
#endif
	  res = traits_asptr_stdseq<map_type, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<map_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return res;
      }      
    };
      
    template <class K, class T, class Compare, class Alloc >
    struct traits_from<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;

      static PyObject *asdict(const map_type& map) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	size_type size = map.size();
	Py_ssize_t pysize = (size <= (size_type) INT_MAX) ? (Py_ssize_t) size : -1;
	if (pysize < 0) {
	  PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	  SWIG_PYTHON_THREAD_END_BLOCK;
	  return NULL;
	}
	PyObject *obj = PyDict_New();
	for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	  swig::SwigVar_PyObject key = swig::from(i->first);
	  swig::SwigVar_PyObject val = swig::from(i->second);
	  PyDict_SetItem(obj, key, val);
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return obj;
      }
                
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_InternalNewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  return asdict(map);
	}
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::map< std::string, bool, std::less< std::string >, std::allocator< std::pair< std::string const,bool > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "bool" "," "std::less< std::string >" "," "std::allocator< std::pair< std::string const,bool > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_bool_Sg__iterator(std::map< std::string,bool > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_bool_Sg____nonzero__(std::map< std::string,bool > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_bool_Sg____bool__(std::map< std::string,bool > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::string,bool >::size_type std_map_Sl_std_string_Sc_bool_Sg____len__(std::map< std::string,bool > const *self){
      return self->size();
    }
SWIGINTERN std::map< std::string,bool >::mapped_type const &std_map_Sl_std_string_Sc_bool_Sg____getitem__(std::map< std::string,bool > *self,std::map< std::string,bool >::key_type const &key){
      std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg____delitem__(std::map< std::string,bool > *self,std::map< std::string,bool >::key_type const &key){
      std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_bool_Sg__has_key(std::map< std::string,bool > const *self,std::map< std::string,bool >::key_type const &key){
      std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_bool_Sg__keys(std::map< std::string,bool > *self){
      std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_bool_Sg__values(std::map< std::string,bool > *self){
      std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_bool_Sg__items(std::map< std::string,bool > *self){
      std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_bool_Sg____contains__(std::map< std::string,bool > *self,std::map< std::string,bool >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_bool_Sg__key_iterator(std::map< std::string,bool > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_bool_Sg__value_iterator(std::map< std::string,bool > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg____setitem____SWIG_0(std::map< std::string,bool > *self,std::map< std::string,bool >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg____setitem____SWIG_1(std::map< std::string,bool > *self,std::map< std::string,bool >::key_type const &key,std::map< std::string,bool >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_bool_Sg__asdict(std::map< std::string,bool > *self){
      return swig::traits_from< std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > > >::asdict(*self);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg__erase__SWIG_1(std::map< std::string,bool > *self,std::map< std::string,bool >::iterator position){ self->erase(position); }
SWIGINTERN void std_map_Sl_std_string_Sc_bool_Sg__erase__SWIG_2(std::map< std::string,bool > *self,std::map< std::string,bool >::iterator first,std::map< std::string,bool >::iterator last){ self->erase(first, last); }

      namespace swig {
	template <>  struct traits<std::pair< int, std::vector< std::string,std::allocator< std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "std::vector< std::string,std::allocator< std::string > >" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map< int, std::vector< std::string,std::allocator< std::string > >, std::less< int >, std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "int" "," "std::vector< std::string,std::allocator< std::string > >" "," "std::less< int >" "," "std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__iterator(std::map< int,std::vector< std::string > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____nonzero__(std::map< int,std::vector< std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____bool__(std::map< int,std::vector< std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< int,std::vector< std::string > >::size_type std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____len__(std::map< int,std::vector< std::string > > const *self){
      return self->size();
    }
SWIGINTERN std::map< int,std::vector< std::string > >::mapped_type const &std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____getitem__(std::map< int,std::vector< std::string > > *self,std::map< int,std::vector< std::string > >::key_type const &key){
      std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____delitem__(std::map< int,std::vector< std::string > > *self,std::map< int,std::vector< std::string > >::key_type const &key){
      std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__has_key(std::map< int,std::vector< std::string > > const *self,std::map< int,std::vector< std::string > >::key_type const &key){
      std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__keys(std::map< int,std::vector< std::string > > *self){
      std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__values(std::map< int,std::vector< std::string > > *self){
      std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__items(std::map< int,std::vector< std::string > > *self){
      std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____contains__(std::map< int,std::vector< std::string > > *self,std::map< int,std::vector< std::string > >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__key_iterator(std::map< int,std::vector< std::string > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__value_iterator(std::map< int,std::vector< std::string > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____setitem____SWIG_0(std::map< int,std::vector< std::string > > *self,std::map< int,std::vector< std::string > >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____setitem____SWIG_1(std::map< int,std::vector< std::string > > *self,std::map< int,std::vector< std::string > >::key_type const &key,std::map< int,std::vector< std::string > >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN PyObject *std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__asdict(std::map< int,std::vector< std::string > > *self){
      return swig::traits_from< std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > > >::asdict(*self);
    }
SWIGINTERN void std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_1(std::map< int,std::vector< std::string > > *self,std::map< int,std::vector< std::string > >::iterator position){ self->erase(position); }
SWIGINTERN void std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_2(std::map< int,std::vector< std::string > > *self,std::map< int,std::vector< std::string > >::iterator first,std::map< int,std::vector< std::string > >::iterator last){ self->erase(first, last); }

SWIGINTERN int
SWIG_AsPtr_MPI_Comm (PyObject * input, MPI_Comm **p) {
  if (input == Py_None) {
    if (p) *p = NULL;
    return SWIG_OK;
  } else if (PyObject_TypeCheck(input,&PyMPIComm_Type)) {
    if (p) *p = PyMPIComm_Get(input);
    return SWIG_OK;
  } else {
    void *argp = NULL;
    int res = SWIG_ConvertPtr(input,&argp,SWIGTYPE_p_MPI_Comm, 0);
    if (!SWIG_IsOK(res)) return res;
    if (!argp) return SWIG_ValueError;
    if (p) *p = static_cast< MPI_Comm* >(argp);
    return SWIG_OK;
  }
}





#include "senseiConfig.h"
#include "MeshMetadata.h"
#include "DataAdaptor.h"
#include "InTransitDataAdaptor.h"
#include "ConfigurableInTransitDataAdaptor.h"
#include "Partitioner.h"
#include "BlockPartitioner.h"
#include "PlanarPartitioner.h"
#include "MappedPartitioner.h"
#include "PlanarSlicePartitioner.h"
#include "IsoSurfacePartitioner.h"
#include "ConfigurablePartitioner.h"
#include "SVTKUtils.h"
#include "Error.h"
#include "senseiPyString.h"
#include <sstream>
#include <string>
#include <vector>

SWIGINTERN PyObject *sensei_MeshMetadataFlags___str__(sensei::MeshMetadataFlags *self){
    std::ostringstream oss;
    self->ToStream(oss);
    return C_STRING_TO_PY_STRING(oss.str().c_str());
    }
SWIGINTERN PyObject *sensei_MeshMetadata___str__(sensei::MeshMetadata *self){
    std::ostringstream oss;
    self->ToStream(oss);
    return C_STRING_TO_PY_STRING(oss.str().c_str());
    }

#include <DataAdaptor.h>


SWIGINTERN PyObject *
SWIG_From_MPI_Comm  (MPI_Comm v) {
  return PyMPIComm_New(v);
}

SWIGINTERN std::string sensei_DataAdaptor___str__(sensei::DataAdaptor *self){
    std::ostringstream oss;
    oss <<"sensei::DataAdaptor" << std::endl;
    self->Print(oss);
    return oss.str();
}
SWIGINTERN unsigned int sensei_DataAdaptor_GetNumberOfMeshes(sensei::DataAdaptor *self){
  unsigned int nMeshes = 0;
  if (self->GetNumberOfMeshes(nMeshes))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::DataAdaptor" " : Failed to get the number of meshes");
    PyErr_Print();
    }
  return nMeshes;
}

SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN sensei::MeshMetadataPtr sensei_DataAdaptor_GetMeshMetadata__SWIG_0(sensei::DataAdaptor *self,unsigned int id,sensei::MeshMetadataFlags flags=sensei::MeshMetadataFlags()){
  sensei::MeshMetadataPtr pmd = sensei::MeshMetadata::New(flags);

  if (self->GetMeshMetadata(id, pmd) || !pmd)
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::DataAdaptor" " : Failed to get metadata for mesh %d", id);
    PyErr_Print();
    }

  return pmd;
}
SWIGINTERN svtkDataObject *sensei_DataAdaptor_GetMesh(sensei::DataAdaptor *self,std::string const &meshName,bool structureOnly){
  svtkDataObject *mesh = nullptr;
  if (self->GetMesh(meshName, structureOnly, mesh))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::DataAdaptor" " : Failed to get mesh \"%s\"", meshName.c_str());
    PyErr_Print();
    }
  return mesh;
}
SWIGINTERN void sensei_DataAdaptor_AddArray(sensei::DataAdaptor *self,svtkDataObject *mesh,std::string const &meshName,int association,std::string const &arrayName){
   if (self->AddArray(mesh, meshName, association, arrayName))
     {
     PyErr_Format(PyExc_RuntimeError,
"sensei::DataAdaptor" " : Failed to add %s data array \"%s\" to mesh \"%s\"",
       sensei::SVTKUtils::GetAttributesName(association),
       arrayName.c_str(), meshName.c_str());
     PyErr_Print();
     }
}
SWIGINTERN void sensei_DataAdaptor_ReleaseData(sensei::DataAdaptor *self){
  if (self->ReleaseData())
    {
    SENSEI_ERROR("sensei::DataAdaptor" " : Failed to release data")
    }
}

SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN sensei::MeshMetadataPtr sensei_Partitioner_GetPartition(sensei::Partitioner *self,MPI_Comm comm,sensei::MeshMetadataPtr const &in){
    sensei::MeshMetadataPtr out = sensei::MeshMetadata::New();
    if (self->GetPartition(comm, in, out))
    {
      PyErr_Format(PyExc_RuntimeError,
        "Failed to get partition");
    }
    return out;
  }
SWIGINTERN sensei::MeshMetadataPtr sensei_BlockPartitioner_GetPartition(sensei::BlockPartitioner *self,MPI_Comm comm,sensei::MeshMetadataPtr const &in){
    sensei::MeshMetadataPtr out = sensei::MeshMetadata::New();
    if (self->GetPartition(comm, in, out))
    {
      PyErr_Format(PyExc_RuntimeError,
        "Failed to get partition");
    }
    return out;
  }
SWIGINTERN sensei::MeshMetadataPtr sensei_PlanarPartitioner_GetPartition(sensei::PlanarPartitioner *self,MPI_Comm comm,sensei::MeshMetadataPtr const &in){
    sensei::MeshMetadataPtr out = sensei::MeshMetadata::New();
    if (self->GetPartition(comm, in, out))
    {
      PyErr_Format(PyExc_RuntimeError,
        "Failed to get partition");
    }
    return out;
  }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#define SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT

SWIGINTERN sensei::MeshMetadataPtr sensei_MappedPartitioner_GetPartition(sensei::MappedPartitioner *self,MPI_Comm comm,sensei::MeshMetadataPtr const &in){
    sensei::MeshMetadataPtr out = sensei::MeshMetadata::New();
    if (self->GetPartition(comm, in, out))
    {
      PyErr_Format(PyExc_RuntimeError,
        "Failed to get partition");
    }
    return out;
  }
SWIGINTERN sensei::MeshMetadataPtr sensei_PlanarSlicePartitioner_GetPartition(sensei::PlanarSlicePartitioner *self,MPI_Comm comm,sensei::MeshMetadataPtr const &in){
    sensei::MeshMetadataPtr out = sensei::MeshMetadata::New();
    if (self->GetPartition(comm, in, out))
    {
      PyErr_Format(PyExc_RuntimeError,
        "Failed to get partition");
    }
    return out;
  }
SWIGINTERN sensei::MeshMetadataPtr sensei_IsoSurfacePartitioner_GetPartition(sensei::IsoSurfacePartitioner *self,MPI_Comm comm,sensei::MeshMetadataPtr const &in){
    sensei::MeshMetadataPtr out = sensei::MeshMetadata::New();
    if (self->GetPartition(comm, in, out))
    {
      PyErr_Format(PyExc_RuntimeError,
        "Failed to get partition");
    }
    return out;
  }
SWIGINTERN sensei::MeshMetadataPtr sensei_ConfigurablePartitioner_GetPartition(sensei::ConfigurablePartitioner *self,MPI_Comm comm,sensei::MeshMetadataPtr const &in){
    sensei::MeshMetadataPtr out = sensei::MeshMetadata::New();
    if (self->GetPartition(comm, in, out))
    {
      PyErr_Format(PyExc_RuntimeError,
        "Failed to get partition");
    }
    return out;
  }

#include <InTransitDataAdaptor.h>

SWIGINTERN unsigned int sensei_InTransitDataAdaptor_GetNumberOfMeshes(sensei::InTransitDataAdaptor *self){
  unsigned int nMeshes = 0;
  if (self->GetNumberOfMeshes(nMeshes))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::InTransitDataAdaptor" " : Failed to get the number of meshes");
    PyErr_Print();
    }
  return nMeshes;
}
SWIGINTERN sensei::MeshMetadataPtr sensei_InTransitDataAdaptor_GetMeshMetadata__SWIG_0(sensei::InTransitDataAdaptor *self,unsigned int id,sensei::MeshMetadataFlags flags=sensei::MeshMetadataFlags()){
  sensei::MeshMetadataPtr pmd = sensei::MeshMetadata::New(flags);

  if (self->GetMeshMetadata(id, pmd) || !pmd)
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::InTransitDataAdaptor" " : Failed to get metadata for mesh %d", id);
    PyErr_Print();
    }

  return pmd;
}
SWIGINTERN svtkDataObject *sensei_InTransitDataAdaptor_GetMesh(sensei::InTransitDataAdaptor *self,std::string const &meshName,bool structureOnly){
  svtkDataObject *mesh = nullptr;
  if (self->GetMesh(meshName, structureOnly, mesh))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::InTransitDataAdaptor" " : Failed to get mesh \"%s\"", meshName.c_str());
    PyErr_Print();
    }
  return mesh;
}
SWIGINTERN void sensei_InTransitDataAdaptor_AddArray(sensei::InTransitDataAdaptor *self,svtkDataObject *mesh,std::string const &meshName,int association,std::string const &arrayName){
   if (self->AddArray(mesh, meshName, association, arrayName))
     {
     PyErr_Format(PyExc_RuntimeError,
"sensei::InTransitDataAdaptor" " : Failed to add %s data array \"%s\" to mesh \"%s\"",
       sensei::SVTKUtils::GetAttributesName(association),
       arrayName.c_str(), meshName.c_str());
     PyErr_Print();
     }
}
SWIGINTERN void sensei_InTransitDataAdaptor_ReleaseData(sensei::InTransitDataAdaptor *self){
  if (self->ReleaseData())
    {
    SENSEI_ERROR("sensei::InTransitDataAdaptor" " : Failed to release data")
    }
}
SWIGINTERN sensei::MeshMetadataPtr sensei_InTransitDataAdaptor_GetSenderMeshMetadata(sensei::InTransitDataAdaptor *self,unsigned int id){
  sensei::MeshMetadataPtr pmd = sensei::MeshMetadata::New();

  if (self->GetSenderMeshMetadata(id, pmd) || !pmd)
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::InTransitDataAdaptor" " : Failed to get sender metadata for mesh %d", id);
    PyErr_Print();
    }

  return pmd;
}
SWIGINTERN sensei::MeshMetadataPtr sensei_InTransitDataAdaptor_GetReceiverMeshMetadata(sensei::InTransitDataAdaptor *self,unsigned int id){
  sensei::MeshMetadataPtr pmd = sensei::MeshMetadata::New();

  if (self->GetReceiverMeshMetadata(id, pmd) || !pmd)
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::InTransitDataAdaptor" " : Failed to get receiver metadata for mesh %d", id);
    PyErr_Print();
    }

  return pmd;
}
SWIGINTERN void sensei_InTransitDataAdaptor_SetReceiverMeshMetadata(sensei::InTransitDataAdaptor *self,unsigned int id,sensei::MeshMetadataPtr &md){
  if (self->SetReceiverMeshMetadata(id, md))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::InTransitDataAdaptor" " : Failed to set receiver metadata for mesh %d", id);
    PyErr_Print();
    }
}
SWIGINTERN std::string sensei_InTransitDataAdaptor___str__(sensei::InTransitDataAdaptor *self){
    std::ostringstream oss;
    oss <<"sensei::InTransitDataAdaptor" << std::endl;
    self->Print(oss);
    return oss.str();
}

// **************************************************************************
sensei::InTransitDataAdaptor *AsInTransitDataAdaptor(sensei::DataAdaptor *da)
{
  return dynamic_cast<sensei::InTransitDataAdaptor*>(da);
}


#include <ConfigurableInTransitDataAdaptor.h>

SWIGINTERN sensei::ConfigurableInTransitDataAdaptor *new_sensei_ConfigurableInTransitDataAdaptor(){
  using sensei::ConfigurableInTransitDataAdaptor;
  ConfigurableInTransitDataAdaptor *inst = dynamic_cast<ConfigurableInTransitDataAdaptor*>(ConfigurableInTransitDataAdaptor::New());
  return inst;
}
SWIGINTERN unsigned int sensei_ConfigurableInTransitDataAdaptor_GetNumberOfMeshes(sensei::ConfigurableInTransitDataAdaptor *self){
  unsigned int nMeshes = 0;
  if (self->GetNumberOfMeshes(nMeshes))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::ConfigurableInTransitDataAdaptor" " : Failed to get the number of meshes");
    PyErr_Print();
    }
  return nMeshes;
}
SWIGINTERN sensei::MeshMetadataPtr sensei_ConfigurableInTransitDataAdaptor_GetMeshMetadata__SWIG_0(sensei::ConfigurableInTransitDataAdaptor *self,unsigned int id,sensei::MeshMetadataFlags flags=sensei::MeshMetadataFlags()){
  sensei::MeshMetadataPtr pmd = sensei::MeshMetadata::New(flags);

  if (self->GetMeshMetadata(id, pmd) || !pmd)
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::ConfigurableInTransitDataAdaptor" " : Failed to get metadata for mesh %d", id);
    PyErr_Print();
    }

  return pmd;
}
SWIGINTERN svtkDataObject *sensei_ConfigurableInTransitDataAdaptor_GetMesh(sensei::ConfigurableInTransitDataAdaptor *self,std::string const &meshName,bool structureOnly){
  svtkDataObject *mesh = nullptr;
  if (self->GetMesh(meshName, structureOnly, mesh))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::ConfigurableInTransitDataAdaptor" " : Failed to get mesh \"%s\"", meshName.c_str());
    PyErr_Print();
    }
  return mesh;
}
SWIGINTERN void sensei_ConfigurableInTransitDataAdaptor_AddArray(sensei::ConfigurableInTransitDataAdaptor *self,svtkDataObject *mesh,std::string const &meshName,int association,std::string const &arrayName){
   if (self->AddArray(mesh, meshName, association, arrayName))
     {
     PyErr_Format(PyExc_RuntimeError,
"sensei::ConfigurableInTransitDataAdaptor" " : Failed to add %s data array \"%s\" to mesh \"%s\"",
       sensei::SVTKUtils::GetAttributesName(association),
       arrayName.c_str(), meshName.c_str());
     PyErr_Print();
     }
}
SWIGINTERN void sensei_ConfigurableInTransitDataAdaptor_ReleaseData(sensei::ConfigurableInTransitDataAdaptor *self){
  if (self->ReleaseData())
    {
    SENSEI_ERROR("sensei::ConfigurableInTransitDataAdaptor" " : Failed to release data")
    }
}
SWIGINTERN sensei::MeshMetadataPtr sensei_ConfigurableInTransitDataAdaptor_GetSenderMeshMetadata(sensei::ConfigurableInTransitDataAdaptor *self,unsigned int id){
  sensei::MeshMetadataPtr pmd = sensei::MeshMetadata::New();

  if (self->GetSenderMeshMetadata(id, pmd) || !pmd)
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::ConfigurableInTransitDataAdaptor" " : Failed to get sender metadata for mesh %d", id);
    PyErr_Print();
    }

  return pmd;
}
SWIGINTERN sensei::MeshMetadataPtr sensei_ConfigurableInTransitDataAdaptor_GetReceiverMeshMetadata(sensei::ConfigurableInTransitDataAdaptor *self,unsigned int id){
  sensei::MeshMetadataPtr pmd = sensei::MeshMetadata::New();

  if (self->GetReceiverMeshMetadata(id, pmd) || !pmd)
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::ConfigurableInTransitDataAdaptor" " : Failed to get receiver metadata for mesh %d", id);
    PyErr_Print();
    }

  return pmd;
}
SWIGINTERN void sensei_ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata(sensei::ConfigurableInTransitDataAdaptor *self,unsigned int id,sensei::MeshMetadataPtr &md){
  if (self->SetReceiverMeshMetadata(id, md))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::ConfigurableInTransitDataAdaptor" " : Failed to set receiver metadata for mesh %d", id);
    PyErr_Print();
    }
}
SWIGINTERN std::string sensei_ConfigurableInTransitDataAdaptor___str__(sensei::ConfigurableInTransitDataAdaptor *self){
    std::ostringstream oss;
    oss <<"sensei::ConfigurableInTransitDataAdaptor" << std::endl;
    self->Print(oss);
    return oss.str();
}
SWIGINTERN int sensei_MeshRequirementsIterator___bool__(sensei::MeshRequirementsIterator *self){
    return static_cast<bool>(*self);
  }
SWIGINTERN sensei::MeshRequirementsIterator &sensei_MeshRequirementsIterator___iadd__(sensei::MeshRequirementsIterator *self,int n){
    for (int i = 0; (i < n) && *self; ++i)
      self->operator++();
    return *self;
  }
SWIGINTERN int sensei_ArrayRequirementsIterator___bool__(sensei::ArrayRequirementsIterator *self){
    return static_cast<bool>(*self);
  }
SWIGINTERN sensei::ArrayRequirementsIterator &sensei_ArrayRequirementsIterator___iadd__(sensei::ArrayRequirementsIterator *self,int n){
    for (int i = 0; i < n; ++i)
      self->operator++();
    return *self;
  }

#include <AnalysisAdaptor.h>

SWIGINTERN std::string sensei_AnalysisAdaptor___str__(sensei::AnalysisAdaptor *self){
    std::ostringstream oss;
    oss <<"sensei::AnalysisAdaptor" << std::endl;
    self->Print(oss);
    return oss.str();
}

#include <SVTKDataAdaptor.h>

SWIGINTERN sensei::SVTKDataAdaptor *new_sensei_SVTKDataAdaptor(){
  using sensei::SVTKDataAdaptor;
  SVTKDataAdaptor *inst = dynamic_cast<SVTKDataAdaptor*>(SVTKDataAdaptor::New());
  return inst;
}
SWIGINTERN std::string sensei_SVTKDataAdaptor___str__(sensei::SVTKDataAdaptor *self){
    std::ostringstream oss;
    oss <<"sensei::SVTKDataAdaptor" << std::endl;
    self->Print(oss);
    return oss.str();
}
SWIGINTERN unsigned int sensei_SVTKDataAdaptor_GetNumberOfMeshes(sensei::SVTKDataAdaptor *self){
  unsigned int nMeshes = 0;
  if (self->GetNumberOfMeshes(nMeshes))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::SVTKDataAdaptor" " : Failed to get the number of meshes");
    PyErr_Print();
    }
  return nMeshes;
}
SWIGINTERN sensei::MeshMetadataPtr sensei_SVTKDataAdaptor_GetMeshMetadata__SWIG_0(sensei::SVTKDataAdaptor *self,unsigned int id,sensei::MeshMetadataFlags flags=sensei::MeshMetadataFlags()){
  sensei::MeshMetadataPtr pmd = sensei::MeshMetadata::New(flags);

  if (self->GetMeshMetadata(id, pmd) || !pmd)
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::SVTKDataAdaptor" " : Failed to get metadata for mesh %d", id);
    PyErr_Print();
    }

  return pmd;
}
SWIGINTERN svtkDataObject *sensei_SVTKDataAdaptor_GetMesh(sensei::SVTKDataAdaptor *self,std::string const &meshName,bool structureOnly){
  svtkDataObject *mesh = nullptr;
  if (self->GetMesh(meshName, structureOnly, mesh))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::SVTKDataAdaptor" " : Failed to get mesh \"%s\"", meshName.c_str());
    PyErr_Print();
    }
  return mesh;
}
SWIGINTERN void sensei_SVTKDataAdaptor_AddArray(sensei::SVTKDataAdaptor *self,svtkDataObject *mesh,std::string const &meshName,int association,std::string const &arrayName){
   if (self->AddArray(mesh, meshName, association, arrayName))
     {
     PyErr_Format(PyExc_RuntimeError,
"sensei::SVTKDataAdaptor" " : Failed to add %s data array \"%s\" to mesh \"%s\"",
       sensei::SVTKUtils::GetAttributesName(association),
       arrayName.c_str(), meshName.c_str());
     PyErr_Print();
     }
}
SWIGINTERN void sensei_SVTKDataAdaptor_ReleaseData(sensei::SVTKDataAdaptor *self){
  if (self->ReleaseData())
    {
    SENSEI_ERROR("sensei::SVTKDataAdaptor" " : Failed to release data")
    }
}

#include <ProgrammableDataAdaptor.h>

SWIGINTERN sensei::ProgrammableDataAdaptor *new_sensei_ProgrammableDataAdaptor(){
  using sensei::ProgrammableDataAdaptor;
  ProgrammableDataAdaptor *inst = dynamic_cast<ProgrammableDataAdaptor*>(ProgrammableDataAdaptor::New());
  return inst;
}
SWIGINTERN std::string sensei_ProgrammableDataAdaptor___str__(sensei::ProgrammableDataAdaptor *self){
    std::ostringstream oss;
    oss <<"sensei::ProgrammableDataAdaptor" << std::endl;
    self->Print(oss);
    return oss.str();
}
SWIGINTERN unsigned int sensei_ProgrammableDataAdaptor_GetNumberOfMeshes(sensei::ProgrammableDataAdaptor *self){
  unsigned int nMeshes = 0;
  if (self->GetNumberOfMeshes(nMeshes))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::ProgrammableDataAdaptor" " : Failed to get the number of meshes");
    PyErr_Print();
    }
  return nMeshes;
}
SWIGINTERN sensei::MeshMetadataPtr sensei_ProgrammableDataAdaptor_GetMeshMetadata__SWIG_0(sensei::ProgrammableDataAdaptor *self,unsigned int id,sensei::MeshMetadataFlags flags=sensei::MeshMetadataFlags()){
  sensei::MeshMetadataPtr pmd = sensei::MeshMetadata::New(flags);

  if (self->GetMeshMetadata(id, pmd) || !pmd)
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::ProgrammableDataAdaptor" " : Failed to get metadata for mesh %d", id);
    PyErr_Print();
    }

  return pmd;
}
SWIGINTERN svtkDataObject *sensei_ProgrammableDataAdaptor_GetMesh(sensei::ProgrammableDataAdaptor *self,std::string const &meshName,bool structureOnly){
  svtkDataObject *mesh = nullptr;
  if (self->GetMesh(meshName, structureOnly, mesh))
    {
    PyErr_Format(PyExc_RuntimeError,
"sensei::ProgrammableDataAdaptor" " : Failed to get mesh \"%s\"", meshName.c_str());
    PyErr_Print();
    }
  return mesh;
}
SWIGINTERN void sensei_ProgrammableDataAdaptor_AddArray(sensei::ProgrammableDataAdaptor *self,svtkDataObject *mesh,std::string const &meshName,int association,std::string const &arrayName){
   if (self->AddArray(mesh, meshName, association, arrayName))
     {
     PyErr_Format(PyExc_RuntimeError,
"sensei::ProgrammableDataAdaptor" " : Failed to add %s data array \"%s\" to mesh \"%s\"",
       sensei::SVTKUtils::GetAttributesName(association),
       arrayName.c_str(), meshName.c_str());
     PyErr_Print();
     }
}
SWIGINTERN void sensei_ProgrammableDataAdaptor_ReleaseData(sensei::ProgrammableDataAdaptor *self){
  if (self->ReleaseData())
    {
    SENSEI_ERROR("sensei::ProgrammableDataAdaptor" " : Failed to release data")
    }
}
SWIGINTERN void sensei_ProgrammableDataAdaptor_SetGetNumberOfMeshesCallback(sensei::ProgrammableDataAdaptor *self,PyObject *f){
    self->SetGetNumberOfMeshesCallback(
      senseiPyDataAdaptor::PyGetNumberOfMeshesCallback(f));
  }
SWIGINTERN void sensei_ProgrammableDataAdaptor_SetGetMeshMetadataCallback(sensei::ProgrammableDataAdaptor *self,PyObject *f){
    self->SetGetMeshMetadataCallback(
      senseiPyDataAdaptor::PyGetMeshMetadataCallback(f));
  }
SWIGINTERN void sensei_ProgrammableDataAdaptor_SetGetMeshCallback(sensei::ProgrammableDataAdaptor *self,PyObject *f){
    self->SetGetMeshCallback(
      senseiPyDataAdaptor::PyGetMeshCallback(f));
  }
SWIGINTERN void sensei_ProgrammableDataAdaptor_SetAddArrayCallback(sensei::ProgrammableDataAdaptor *self,PyObject *f){
    self->SetAddArrayCallback(
      senseiPyDataAdaptor::PyAddArrayCallback(f));
  }
SWIGINTERN void sensei_ProgrammableDataAdaptor_SetReleaseDataCallback(sensei::ProgrammableDataAdaptor *self,PyObject *f){
    self->SetReleaseDataCallback(
      senseiPyDataAdaptor::PyReleaseDataCallback(f));
  }

#include <ConfigurableAnalysis.h>

SWIGINTERN sensei::ConfigurableAnalysis *new_sensei_ConfigurableAnalysis(){
  using sensei::ConfigurableAnalysis;
  ConfigurableAnalysis *inst = dynamic_cast<ConfigurableAnalysis*>(ConfigurableAnalysis::New());
  return inst;
}
SWIGINTERN std::string sensei_ConfigurableAnalysis___str__(sensei::ConfigurableAnalysis *self){
    std::ostringstream oss;
    oss <<"sensei::ConfigurableAnalysis" << std::endl;
    self->Print(oss);
    return oss.str();
}
SWIGINTERN PyObject *sensei_ConfigurableAnalysis_Execute(sensei::ConfigurableAnalysis *self,sensei::DataAdaptor *daIn){
        sensei::DataAdaptor *daOut = nullptr;

        // invoke the analysis
        int execOk = self->Execute(daIn, &daOut);

        // package the returned optional data adaptor.
        PyObject *pyDaOut = nullptr;
        if (daOut)
        {
            pyDaOut = SWIG_NewPointerObj((void*)daOut,
                SWIGTYPE_p_sensei__DataAdaptor, SWIG_POINTER_OWN);
        }
        else
        {
            pyDaOut = Py_None;
            Py_INCREF(pyDaOut);
        }

        PyObject *res = Py_BuildValue("(IN)", execOk, pyDaOut);
        return res;
    }

#include <Histogram.h>

SWIGINTERN sensei::Histogram *new_sensei_Histogram(){
  using sensei::Histogram;
  Histogram *inst = dynamic_cast<Histogram*>(Histogram::New());
  return inst;
}
SWIGINTERN std::string sensei_Histogram___str__(sensei::Histogram *self){
    std::ostringstream oss;
    oss <<"sensei::Histogram" << std::endl;
    self->Print(oss);
    return oss.str();
}

#include <Autocorrelation.h>

SWIGINTERN sensei::Autocorrelation *new_sensei_Autocorrelation(){
  using sensei::Autocorrelation;
  Autocorrelation *inst = dynamic_cast<Autocorrelation*>(Autocorrelation::New());
  return inst;
}
SWIGINTERN std::string sensei_Autocorrelation___str__(sensei::Autocorrelation *self){
    std::ostringstream oss;
    oss <<"sensei::Autocorrelation" << std::endl;
    self->Print(oss);
    return oss.str();
}
SWIGINTERN PyObject *sensei_Autocorrelation_Execute(sensei::Autocorrelation *self,sensei::DataAdaptor *daIn){
        sensei::DataAdaptor *daOut = nullptr;

        // invoke the analysis
        int execOk = self->Execute(daIn, &daOut);

        // package the returned optional data adaptor.
        PyObject *pyDaOut = nullptr;
        if (daOut)
        {
            pyDaOut = SWIG_NewPointerObj((void*)daOut,
                SWIGTYPE_p_sensei__DataAdaptor, SWIG_POINTER_OWN);
        }
        else
        {
            pyDaOut = Py_None;
            Py_INCREF(pyDaOut);
        }

        PyObject *res = Py_BuildValue("(IN)", execOk, pyDaOut);
        return res;
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_array_int_2_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_iterator" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = (swig::SwigPyIterator *)std_array_Sl_int_Sc_2_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___nonzero__" "', argument " "1"" of type '" "std::array< int,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = (bool)std_array_Sl_int_Sc_2_Sg____nonzero__((std::array< int,2 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___bool__" "', argument " "1"" of type '" "std::array< int,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = (bool)std_array_Sl_int_Sc_2_Sg____bool__((std::array< int,2 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,2 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___len__" "', argument " "1"" of type '" "std::array< int,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = std_array_Sl_int_Sc_2_Sg____len__((std::array< int,2 > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  std::array< int,2 >::difference_type arg2 ;
  std::array< int,2 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::array< int,2 > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_2___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___getslice__" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_2___getslice__" "', argument " "2"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,2 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_2___getslice__" "', argument " "3"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,2 >::difference_type >(val3);
  try {
    result = (std::array< int,2 > *)std_array_Sl_int_Sc_2_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  std::array< int,2 >::difference_type arg2 ;
  std::array< int,2 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___setslice__" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_2___setslice__" "', argument " "2"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,2 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_2___setslice__" "', argument " "3"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,2 >::difference_type >(val3);
  try {
    std_array_Sl_int_Sc_2_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  std::array< int,2 >::difference_type arg2 ;
  std::array< int,2 >::difference_type arg3 ;
  std::array< int,2 > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___setslice__" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_2___setslice__" "', argument " "2"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,2 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_2___setslice__" "', argument " "3"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,2 >::difference_type >(val3);
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "array_int_2___setslice__" "', argument " "4"" of type '" "std::array< int,2 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_int_2___setslice__" "', argument " "4"" of type '" "std::array< int,2 > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_array_Sl_int_Sc_2_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< int,2 > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_2___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_int_2___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< int,2 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_array_int_2___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_2___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,2 >::__setslice__(std::array< int,2 >::difference_type,std::array< int,2 >::difference_type)\n"
    "    std::array< int,2 >::__setslice__(std::array< int,2 >::difference_type,std::array< int,2 >::difference_type,std::array< int,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_2___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  std::array< int,2 >::difference_type arg2 ;
  std::array< int,2 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_2___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___delslice__" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_2___delslice__" "', argument " "2"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,2 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_2___delslice__" "', argument " "3"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,2 >::difference_type >(val3);
  try {
    std_array_Sl_int_Sc_2_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  std::array< int,2 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___delitem__" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_2___delitem__" "', argument " "2"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,2 >::difference_type >(val2);
  try {
    std_array_Sl_int_Sc_2_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< int,2 > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___getitem__" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_2___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::array< int,2 > *)std_array_Sl_int_Sc_2_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::array< int,2 > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___setitem__" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "array_int_2___setitem__" "', argument " "3"" of type '" "std::array< int,2 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_int_2___setitem__" "', argument " "3"" of type '" "std::array< int,2 > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_array_Sl_int_Sc_2_Sg____setitem____SWIG_0(arg1,arg2,(std::array< int,2 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___setitem__" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_int_Sc_2_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___delitem__" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_2___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_int_Sc_2_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_2___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_int_2___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_int_2___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_2___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,2 >::__delitem__(std::array< int,2 >::difference_type)\n"
    "    std::array< int,2 >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_2___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  std::array< int,2 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< int,2 >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___getitem__" "', argument " "1"" of type '" "std::array< int,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_2___getitem__" "', argument " "2"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,2 >::difference_type >(val2);
  try {
    result = (std::array< int,2 >::value_type *) &std_array_Sl_int_Sc_2_Sg____getitem____SWIG_1((std::array< int,2 > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::array< int,2 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_2___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_int_2___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_int_2___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_2___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,2 >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< int,2 >::__getitem__(std::array< int,2 >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_2___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  std::array< int,2 >::difference_type arg2 ;
  std::array< int,2 >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< int,2 >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2___setitem__" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_2___setitem__" "', argument " "2"" of type '" "std::array< int,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,2 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_2___setitem__" "', argument " "3"" of type '" "std::array< int,2 >::value_type""'");
  } 
  temp3 = static_cast< std::array< int,2 >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_array_Sl_int_Sc_2_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_2___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_int_2___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,2 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_array_int_2___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_int_2___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_2___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,2 >::__setitem__(SWIGPY_SLICEOBJECT *,std::array< int,2 > const &)\n"
    "    std::array< int,2 >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< int,2 >::__setitem__(std::array< int,2 >::difference_type,std::array< int,2 >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_array_int_2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::array< int,2 > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::array< int,2 > *)new std::array< int,2 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_int_2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::array< int,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_array_int_2" "', argument " "1"" of type '" "std::array< int,2 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_array_int_2" "', argument " "1"" of type '" "std::array< int,2 > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::array< int,2 > *)new std::array< int,2 >((std::array< int,2 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_2_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_int_2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_array_int_2", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_array_int_2__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_array_int_2__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_array_int_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,2 >::array()\n"
    "    std::array< int,2 >::array(std::array< int,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_2_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_empty" "', argument " "1"" of type '" "std::array< int,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = (bool)((std::array< int,2 > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,2 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_size" "', argument " "1"" of type '" "std::array< int,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = ((std::array< int,2 > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  std::array< int,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_2_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_swap" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__arrayT_int_2_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "array_int_2_swap" "', argument " "2"" of type '" "std::array< int,2 > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_int_2_swap" "', argument " "2"" of type '" "std::array< int,2 > &""'"); 
  }
  arg2 = reinterpret_cast< std::array< int,2 > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,2 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_begin" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,2 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,2 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_end" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,2 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,2 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_rbegin" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,2 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,2 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_rend" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,2 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,2 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_front" "', argument " "1"" of type '" "std::array< int,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = (std::array< int,2 >::value_type *) &((std::array< int,2 > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::array< int,2 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,2 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_back" "', argument " "1"" of type '" "std::array< int,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  result = (std::array< int,2 >::value_type *) &((std::array< int,2 > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::array< int,2 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_2_fill(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  std::array< int,2 >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< int,2 >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_2_fill", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_2_fill" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_2_fill" "', argument " "2"" of type '" "std::array< int,2 >::value_type""'");
  } 
  temp2 = static_cast< std::array< int,2 >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->fill((std::array< int,2 >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_array_int_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,2 > *arg1 = (std::array< int,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_array_int_2" "', argument " "1"" of type '" "std::array< int,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,2 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *array_int_2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__arrayT_int_2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *array_int_2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_array_int_3_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_iterator" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = (swig::SwigPyIterator *)std_array_Sl_int_Sc_3_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___nonzero__" "', argument " "1"" of type '" "std::array< int,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = (bool)std_array_Sl_int_Sc_3_Sg____nonzero__((std::array< int,3 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___bool__" "', argument " "1"" of type '" "std::array< int,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = (bool)std_array_Sl_int_Sc_3_Sg____bool__((std::array< int,3 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,3 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___len__" "', argument " "1"" of type '" "std::array< int,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = std_array_Sl_int_Sc_3_Sg____len__((std::array< int,3 > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  std::array< int,3 >::difference_type arg2 ;
  std::array< int,3 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::array< int,3 > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_3___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___getslice__" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_3___getslice__" "', argument " "2"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,3 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_3___getslice__" "', argument " "3"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,3 >::difference_type >(val3);
  try {
    result = (std::array< int,3 > *)std_array_Sl_int_Sc_3_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  std::array< int,3 >::difference_type arg2 ;
  std::array< int,3 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___setslice__" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_3___setslice__" "', argument " "2"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,3 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_3___setslice__" "', argument " "3"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,3 >::difference_type >(val3);
  try {
    std_array_Sl_int_Sc_3_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  std::array< int,3 >::difference_type arg2 ;
  std::array< int,3 >::difference_type arg3 ;
  std::array< int,3 > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___setslice__" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_3___setslice__" "', argument " "2"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,3 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_3___setslice__" "', argument " "3"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,3 >::difference_type >(val3);
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "array_int_3___setslice__" "', argument " "4"" of type '" "std::array< int,3 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_int_3___setslice__" "', argument " "4"" of type '" "std::array< int,3 > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_array_Sl_int_Sc_3_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< int,3 > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_3___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_int_3___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< int,3 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_array_int_3___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_3___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,3 >::__setslice__(std::array< int,3 >::difference_type,std::array< int,3 >::difference_type)\n"
    "    std::array< int,3 >::__setslice__(std::array< int,3 >::difference_type,std::array< int,3 >::difference_type,std::array< int,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_3___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  std::array< int,3 >::difference_type arg2 ;
  std::array< int,3 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_3___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___delslice__" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_3___delslice__" "', argument " "2"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,3 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_3___delslice__" "', argument " "3"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,3 >::difference_type >(val3);
  try {
    std_array_Sl_int_Sc_3_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  std::array< int,3 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___delitem__" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_3___delitem__" "', argument " "2"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,3 >::difference_type >(val2);
  try {
    std_array_Sl_int_Sc_3_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< int,3 > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___getitem__" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_3___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::array< int,3 > *)std_array_Sl_int_Sc_3_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::array< int,3 > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___setitem__" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_3___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "array_int_3___setitem__" "', argument " "3"" of type '" "std::array< int,3 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_int_3___setitem__" "', argument " "3"" of type '" "std::array< int,3 > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_array_Sl_int_Sc_3_Sg____setitem____SWIG_0(arg1,arg2,(std::array< int,3 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___setitem__" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_3___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_int_Sc_3_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___delitem__" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_3___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_int_Sc_3_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_3___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_int_3___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_int_3___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_3___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,3 >::__delitem__(std::array< int,3 >::difference_type)\n"
    "    std::array< int,3 >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_3___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  std::array< int,3 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< int,3 >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___getitem__" "', argument " "1"" of type '" "std::array< int,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_3___getitem__" "', argument " "2"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,3 >::difference_type >(val2);
  try {
    result = (std::array< int,3 >::value_type *) &std_array_Sl_int_Sc_3_Sg____getitem____SWIG_1((std::array< int,3 > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::array< int,3 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_3___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_int_3___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_int_3___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_3___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,3 >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< int,3 >::__getitem__(std::array< int,3 >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_3___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  std::array< int,3 >::difference_type arg2 ;
  std::array< int,3 >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< int,3 >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3___setitem__" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_3___setitem__" "', argument " "2"" of type '" "std::array< int,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,3 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_3___setitem__" "', argument " "3"" of type '" "std::array< int,3 >::value_type""'");
  } 
  temp3 = static_cast< std::array< int,3 >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_array_Sl_int_Sc_3_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_3___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_int_3___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,3 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_array_int_3___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_int_3___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_3___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,3 >::__setitem__(SWIGPY_SLICEOBJECT *,std::array< int,3 > const &)\n"
    "    std::array< int,3 >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< int,3 >::__setitem__(std::array< int,3 >::difference_type,std::array< int,3 >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_array_int_3__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::array< int,3 > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::array< int,3 > *)new std::array< int,3 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_int_3__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::array< int,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_array_int_3" "', argument " "1"" of type '" "std::array< int,3 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_array_int_3" "', argument " "1"" of type '" "std::array< int,3 > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::array< int,3 > *)new std::array< int,3 >((std::array< int,3 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_3_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_int_3(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_array_int_3", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_array_int_3__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_array_int_3__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_array_int_3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,3 >::array()\n"
    "    std::array< int,3 >::array(std::array< int,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_3_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_empty" "', argument " "1"" of type '" "std::array< int,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = (bool)((std::array< int,3 > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,3 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_size" "', argument " "1"" of type '" "std::array< int,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = ((std::array< int,3 > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  std::array< int,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_3_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_swap" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__arrayT_int_3_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "array_int_3_swap" "', argument " "2"" of type '" "std::array< int,3 > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_int_3_swap" "', argument " "2"" of type '" "std::array< int,3 > &""'"); 
  }
  arg2 = reinterpret_cast< std::array< int,3 > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,3 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_begin" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,3 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,3 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_end" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,3 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,3 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_rbegin" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,3 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,3 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_rend" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,3 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,3 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_front" "', argument " "1"" of type '" "std::array< int,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = (std::array< int,3 >::value_type *) &((std::array< int,3 > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::array< int,3 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,3 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_back" "', argument " "1"" of type '" "std::array< int,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  result = (std::array< int,3 >::value_type *) &((std::array< int,3 > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::array< int,3 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_3_fill(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  std::array< int,3 >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< int,3 >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_3_fill", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_3_fill" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_3_fill" "', argument " "2"" of type '" "std::array< int,3 >::value_type""'");
  } 
  temp2 = static_cast< std::array< int,3 >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->fill((std::array< int,3 >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_array_int_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,3 > *arg1 = (std::array< int,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_array_int_3" "', argument " "1"" of type '" "std::array< int,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,3 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *array_int_3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__arrayT_int_3_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *array_int_3_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_array_int_6_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_iterator" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = (swig::SwigPyIterator *)std_array_Sl_int_Sc_6_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___nonzero__" "', argument " "1"" of type '" "std::array< int,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = (bool)std_array_Sl_int_Sc_6_Sg____nonzero__((std::array< int,6 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___bool__" "', argument " "1"" of type '" "std::array< int,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = (bool)std_array_Sl_int_Sc_6_Sg____bool__((std::array< int,6 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,6 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___len__" "', argument " "1"" of type '" "std::array< int,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = std_array_Sl_int_Sc_6_Sg____len__((std::array< int,6 > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  std::array< int,6 >::difference_type arg2 ;
  std::array< int,6 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::array< int,6 > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_6___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___getslice__" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_6___getslice__" "', argument " "2"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,6 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_6___getslice__" "', argument " "3"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,6 >::difference_type >(val3);
  try {
    result = (std::array< int,6 > *)std_array_Sl_int_Sc_6_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_6_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  std::array< int,6 >::difference_type arg2 ;
  std::array< int,6 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___setslice__" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_6___setslice__" "', argument " "2"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,6 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_6___setslice__" "', argument " "3"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,6 >::difference_type >(val3);
  try {
    std_array_Sl_int_Sc_6_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  std::array< int,6 >::difference_type arg2 ;
  std::array< int,6 >::difference_type arg3 ;
  std::array< int,6 > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___setslice__" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_6___setslice__" "', argument " "2"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,6 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_6___setslice__" "', argument " "3"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,6 >::difference_type >(val3);
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "array_int_6___setslice__" "', argument " "4"" of type '" "std::array< int,6 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_int_6___setslice__" "', argument " "4"" of type '" "std::array< int,6 > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_array_Sl_int_Sc_6_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< int,6 > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_6___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_int_6___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< int,6 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_array_int_6___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_6___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,6 >::__setslice__(std::array< int,6 >::difference_type,std::array< int,6 >::difference_type)\n"
    "    std::array< int,6 >::__setslice__(std::array< int,6 >::difference_type,std::array< int,6 >::difference_type,std::array< int,6 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_6___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  std::array< int,6 >::difference_type arg2 ;
  std::array< int,6 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_6___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___delslice__" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_6___delslice__" "', argument " "2"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,6 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_6___delslice__" "', argument " "3"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< int,6 >::difference_type >(val3);
  try {
    std_array_Sl_int_Sc_6_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  std::array< int,6 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___delitem__" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_6___delitem__" "', argument " "2"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,6 >::difference_type >(val2);
  try {
    std_array_Sl_int_Sc_6_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< int,6 > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___getitem__" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_6___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::array< int,6 > *)std_array_Sl_int_Sc_6_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_6_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::array< int,6 > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___setitem__" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_6___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "array_int_6___setitem__" "', argument " "3"" of type '" "std::array< int,6 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_int_6___setitem__" "', argument " "3"" of type '" "std::array< int,6 > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_array_Sl_int_Sc_6_Sg____setitem____SWIG_0(arg1,arg2,(std::array< int,6 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___setitem__" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_6___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_int_Sc_6_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___delitem__" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_int_6___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_int_Sc_6_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_6___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_int_6___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_int_6___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_6___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,6 >::__delitem__(std::array< int,6 >::difference_type)\n"
    "    std::array< int,6 >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_6___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  std::array< int,6 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< int,6 >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___getitem__" "', argument " "1"" of type '" "std::array< int,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_6___getitem__" "', argument " "2"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,6 >::difference_type >(val2);
  try {
    result = (std::array< int,6 >::value_type *) &std_array_Sl_int_Sc_6_Sg____getitem____SWIG_1((std::array< int,6 > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::array< int,6 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_6___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_int_6___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_int_6___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_6___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,6 >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< int,6 >::__getitem__(std::array< int,6 >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_6___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  std::array< int,6 >::difference_type arg2 ;
  std::array< int,6 >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< int,6 >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6___setitem__" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_6___setitem__" "', argument " "2"" of type '" "std::array< int,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< int,6 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_int_6___setitem__" "', argument " "3"" of type '" "std::array< int,6 >::value_type""'");
  } 
  temp3 = static_cast< std::array< int,6 >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_array_Sl_int_Sc_6_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_int_6___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_int_6___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,6 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_array_int_6___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_int_6___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_int_6___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,6 >::__setitem__(SWIGPY_SLICEOBJECT *,std::array< int,6 > const &)\n"
    "    std::array< int,6 >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< int,6 >::__setitem__(std::array< int,6 >::difference_type,std::array< int,6 >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_array_int_6__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::array< int,6 > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::array< int,6 > *)new std::array< int,6 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_6_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_int_6__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::array< int,6 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_array_int_6" "', argument " "1"" of type '" "std::array< int,6 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_array_int_6" "', argument " "1"" of type '" "std::array< int,6 > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::array< int,6 > *)new std::array< int,6 >((std::array< int,6 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_int_6_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_int_6(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_array_int_6", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_array_int_6__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< int,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_array_int_6__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_array_int_6'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< int,6 >::array()\n"
    "    std::array< int,6 >::array(std::array< int,6 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_int_6_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_empty" "', argument " "1"" of type '" "std::array< int,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = (bool)((std::array< int,6 > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,6 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_size" "', argument " "1"" of type '" "std::array< int,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = ((std::array< int,6 > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  std::array< int,6 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_6_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_swap" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__arrayT_int_6_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "array_int_6_swap" "', argument " "2"" of type '" "std::array< int,6 > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_int_6_swap" "', argument " "2"" of type '" "std::array< int,6 > &""'"); 
  }
  arg2 = reinterpret_cast< std::array< int,6 > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,6 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_begin" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,6 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,6 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_end" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,6 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,6 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_rbegin" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,6 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,6 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_rend" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< int,6 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,6 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_front" "', argument " "1"" of type '" "std::array< int,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = (std::array< int,6 >::value_type *) &((std::array< int,6 > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::array< int,6 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,6 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_back" "', argument " "1"" of type '" "std::array< int,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  result = (std::array< int,6 >::value_type *) &((std::array< int,6 > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::array< int,6 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_int_6_fill(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  std::array< int,6 >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< int,6 >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_int_6_fill", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_int_6_fill" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_int_6_fill" "', argument " "2"" of type '" "std::array< int,6 >::value_type""'");
  } 
  temp2 = static_cast< std::array< int,6 >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->fill((std::array< int,6 >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_array_int_6(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< int,6 > *arg1 = (std::array< int,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_int_6_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_array_int_6" "', argument " "1"" of type '" "std::array< int,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< int,6 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *array_int_6_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__arrayT_int_6_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *array_int_6_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_array_double_2_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_iterator" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = (swig::SwigPyIterator *)std_array_Sl_double_Sc_2_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___nonzero__" "', argument " "1"" of type '" "std::array< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = (bool)std_array_Sl_double_Sc_2_Sg____nonzero__((std::array< double,2 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___bool__" "', argument " "1"" of type '" "std::array< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = (bool)std_array_Sl_double_Sc_2_Sg____bool__((std::array< double,2 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,2 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___len__" "', argument " "1"" of type '" "std::array< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = std_array_Sl_double_Sc_2_Sg____len__((std::array< double,2 > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  std::array< double,2 >::difference_type arg2 ;
  std::array< double,2 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::array< double,2 > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_2___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___getslice__" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_2___getslice__" "', argument " "2"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,2 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_2___getslice__" "', argument " "3"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,2 >::difference_type >(val3);
  try {
    result = (std::array< double,2 > *)std_array_Sl_double_Sc_2_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  std::array< double,2 >::difference_type arg2 ;
  std::array< double,2 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___setslice__" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_2___setslice__" "', argument " "2"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,2 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_2___setslice__" "', argument " "3"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,2 >::difference_type >(val3);
  try {
    std_array_Sl_double_Sc_2_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  std::array< double,2 >::difference_type arg2 ;
  std::array< double,2 >::difference_type arg3 ;
  std::array< double,2 > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___setslice__" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_2___setslice__" "', argument " "2"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,2 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_2___setslice__" "', argument " "3"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,2 >::difference_type >(val3);
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "array_double_2___setslice__" "', argument " "4"" of type '" "std::array< double,2 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_double_2___setslice__" "', argument " "4"" of type '" "std::array< double,2 > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_array_Sl_double_Sc_2_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< double,2 > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_2___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_double_2___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< double,2 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_array_double_2___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_2___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,2 >::__setslice__(std::array< double,2 >::difference_type,std::array< double,2 >::difference_type)\n"
    "    std::array< double,2 >::__setslice__(std::array< double,2 >::difference_type,std::array< double,2 >::difference_type,std::array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_2___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  std::array< double,2 >::difference_type arg2 ;
  std::array< double,2 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_2___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___delslice__" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_2___delslice__" "', argument " "2"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,2 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_2___delslice__" "', argument " "3"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,2 >::difference_type >(val3);
  try {
    std_array_Sl_double_Sc_2_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  std::array< double,2 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___delitem__" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_2___delitem__" "', argument " "2"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,2 >::difference_type >(val2);
  try {
    std_array_Sl_double_Sc_2_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< double,2 > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___getitem__" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_2___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::array< double,2 > *)std_array_Sl_double_Sc_2_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::array< double,2 > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___setitem__" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "array_double_2___setitem__" "', argument " "3"" of type '" "std::array< double,2 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_double_2___setitem__" "', argument " "3"" of type '" "std::array< double,2 > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_array_Sl_double_Sc_2_Sg____setitem____SWIG_0(arg1,arg2,(std::array< double,2 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___setitem__" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_double_Sc_2_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___delitem__" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_2___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_double_Sc_2_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_2___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_double_2___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_double_2___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_2___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,2 >::__delitem__(std::array< double,2 >::difference_type)\n"
    "    std::array< double,2 >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_2___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  std::array< double,2 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< double,2 >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___getitem__" "', argument " "1"" of type '" "std::array< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_2___getitem__" "', argument " "2"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,2 >::difference_type >(val2);
  try {
    result = (std::array< double,2 >::value_type *) &std_array_Sl_double_Sc_2_Sg____getitem____SWIG_1((std::array< double,2 > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::array< double,2 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_2___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_double_2___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_double_2___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_2___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,2 >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< double,2 >::__getitem__(std::array< double,2 >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_2___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  std::array< double,2 >::difference_type arg2 ;
  std::array< double,2 >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< double,2 >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2___setitem__" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_2___setitem__" "', argument " "2"" of type '" "std::array< double,2 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,2 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_2___setitem__" "', argument " "3"" of type '" "std::array< double,2 >::value_type""'");
  } 
  temp3 = static_cast< std::array< double,2 >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_array_Sl_double_Sc_2_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_2___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_double_2___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,2 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_array_double_2___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_double_2___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_2___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,2 >::__setitem__(SWIGPY_SLICEOBJECT *,std::array< double,2 > const &)\n"
    "    std::array< double,2 >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< double,2 >::__setitem__(std::array< double,2 >::difference_type,std::array< double,2 >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_array_double_2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::array< double,2 > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::array< double,2 > *)new std::array< double,2 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_2_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_double_2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::array< double,2 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_array_double_2" "', argument " "1"" of type '" "std::array< double,2 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_array_double_2" "', argument " "1"" of type '" "std::array< double,2 > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::array< double,2 > *)new std::array< double,2 >((std::array< double,2 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_2_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_double_2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_array_double_2", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_array_double_2__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,2 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_array_double_2__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_array_double_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,2 >::array()\n"
    "    std::array< double,2 >::array(std::array< double,2 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_2_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_empty" "', argument " "1"" of type '" "std::array< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = (bool)((std::array< double,2 > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,2 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_size" "', argument " "1"" of type '" "std::array< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = ((std::array< double,2 > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  std::array< double,2 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_2_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_swap" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__arrayT_double_2_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "array_double_2_swap" "', argument " "2"" of type '" "std::array< double,2 > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_double_2_swap" "', argument " "2"" of type '" "std::array< double,2 > &""'"); 
  }
  arg2 = reinterpret_cast< std::array< double,2 > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,2 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_begin" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,2 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,2 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_end" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,2 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,2 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_rbegin" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,2 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,2 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_rend" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,2 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,2 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_front" "', argument " "1"" of type '" "std::array< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = (std::array< double,2 >::value_type *) &((std::array< double,2 > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::array< double,2 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,2 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_back" "', argument " "1"" of type '" "std::array< double,2 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  result = (std::array< double,2 >::value_type *) &((std::array< double,2 > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::array< double,2 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_2_fill(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  std::array< double,2 >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< double,2 >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_2_fill", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_2_fill" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_2_fill" "', argument " "2"" of type '" "std::array< double,2 >::value_type""'");
  } 
  temp2 = static_cast< std::array< double,2 >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->fill((std::array< double,2 >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_array_double_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,2 > *arg1 = (std::array< double,2 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_2_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_array_double_2" "', argument " "1"" of type '" "std::array< double,2 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,2 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *array_double_2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__arrayT_double_2_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *array_double_2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_array_double_3_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_iterator" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = (swig::SwigPyIterator *)std_array_Sl_double_Sc_3_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___nonzero__" "', argument " "1"" of type '" "std::array< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = (bool)std_array_Sl_double_Sc_3_Sg____nonzero__((std::array< double,3 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___bool__" "', argument " "1"" of type '" "std::array< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = (bool)std_array_Sl_double_Sc_3_Sg____bool__((std::array< double,3 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,3 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___len__" "', argument " "1"" of type '" "std::array< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = std_array_Sl_double_Sc_3_Sg____len__((std::array< double,3 > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  std::array< double,3 >::difference_type arg2 ;
  std::array< double,3 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::array< double,3 > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_3___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___getslice__" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_3___getslice__" "', argument " "2"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,3 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_3___getslice__" "', argument " "3"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,3 >::difference_type >(val3);
  try {
    result = (std::array< double,3 > *)std_array_Sl_double_Sc_3_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  std::array< double,3 >::difference_type arg2 ;
  std::array< double,3 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___setslice__" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_3___setslice__" "', argument " "2"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,3 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_3___setslice__" "', argument " "3"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,3 >::difference_type >(val3);
  try {
    std_array_Sl_double_Sc_3_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  std::array< double,3 >::difference_type arg2 ;
  std::array< double,3 >::difference_type arg3 ;
  std::array< double,3 > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___setslice__" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_3___setslice__" "', argument " "2"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,3 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_3___setslice__" "', argument " "3"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,3 >::difference_type >(val3);
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "array_double_3___setslice__" "', argument " "4"" of type '" "std::array< double,3 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_double_3___setslice__" "', argument " "4"" of type '" "std::array< double,3 > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_array_Sl_double_Sc_3_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< double,3 > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_3___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_double_3___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< double,3 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_array_double_3___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_3___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,3 >::__setslice__(std::array< double,3 >::difference_type,std::array< double,3 >::difference_type)\n"
    "    std::array< double,3 >::__setslice__(std::array< double,3 >::difference_type,std::array< double,3 >::difference_type,std::array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_3___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  std::array< double,3 >::difference_type arg2 ;
  std::array< double,3 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_3___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___delslice__" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_3___delslice__" "', argument " "2"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,3 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_3___delslice__" "', argument " "3"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,3 >::difference_type >(val3);
  try {
    std_array_Sl_double_Sc_3_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  std::array< double,3 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___delitem__" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_3___delitem__" "', argument " "2"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,3 >::difference_type >(val2);
  try {
    std_array_Sl_double_Sc_3_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< double,3 > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___getitem__" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_3___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::array< double,3 > *)std_array_Sl_double_Sc_3_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_3_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::array< double,3 > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___setitem__" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_3___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "array_double_3___setitem__" "', argument " "3"" of type '" "std::array< double,3 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_double_3___setitem__" "', argument " "3"" of type '" "std::array< double,3 > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_array_Sl_double_Sc_3_Sg____setitem____SWIG_0(arg1,arg2,(std::array< double,3 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___setitem__" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_3___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_double_Sc_3_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___delitem__" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_3___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_double_Sc_3_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_3___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_double_3___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_double_3___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_3___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,3 >::__delitem__(std::array< double,3 >::difference_type)\n"
    "    std::array< double,3 >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_3___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  std::array< double,3 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< double,3 >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___getitem__" "', argument " "1"" of type '" "std::array< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_3___getitem__" "', argument " "2"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,3 >::difference_type >(val2);
  try {
    result = (std::array< double,3 >::value_type *) &std_array_Sl_double_Sc_3_Sg____getitem____SWIG_1((std::array< double,3 > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::array< double,3 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_3___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_double_3___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_double_3___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_3___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,3 >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< double,3 >::__getitem__(std::array< double,3 >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_3___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  std::array< double,3 >::difference_type arg2 ;
  std::array< double,3 >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< double,3 >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3___setitem__" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_3___setitem__" "', argument " "2"" of type '" "std::array< double,3 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,3 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_3___setitem__" "', argument " "3"" of type '" "std::array< double,3 >::value_type""'");
  } 
  temp3 = static_cast< std::array< double,3 >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_array_Sl_double_Sc_3_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_3___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_double_3___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,3 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_array_double_3___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_double_3___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_3___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,3 >::__setitem__(SWIGPY_SLICEOBJECT *,std::array< double,3 > const &)\n"
    "    std::array< double,3 >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< double,3 >::__setitem__(std::array< double,3 >::difference_type,std::array< double,3 >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_array_double_3__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::array< double,3 > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::array< double,3 > *)new std::array< double,3 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_3_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_double_3__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::array< double,3 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_array_double_3" "', argument " "1"" of type '" "std::array< double,3 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_array_double_3" "', argument " "1"" of type '" "std::array< double,3 > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::array< double,3 > *)new std::array< double,3 >((std::array< double,3 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_3_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_double_3(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_array_double_3", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_array_double_3__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,3 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_array_double_3__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_array_double_3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,3 >::array()\n"
    "    std::array< double,3 >::array(std::array< double,3 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_3_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_empty" "', argument " "1"" of type '" "std::array< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = (bool)((std::array< double,3 > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,3 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_size" "', argument " "1"" of type '" "std::array< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = ((std::array< double,3 > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  std::array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_3_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_swap" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__arrayT_double_3_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "array_double_3_swap" "', argument " "2"" of type '" "std::array< double,3 > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_double_3_swap" "', argument " "2"" of type '" "std::array< double,3 > &""'"); 
  }
  arg2 = reinterpret_cast< std::array< double,3 > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,3 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_begin" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,3 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,3 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_end" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,3 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,3 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_rbegin" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,3 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,3 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_rend" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,3 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,3 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_front" "', argument " "1"" of type '" "std::array< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = (std::array< double,3 >::value_type *) &((std::array< double,3 > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::array< double,3 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,3 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_back" "', argument " "1"" of type '" "std::array< double,3 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  result = (std::array< double,3 >::value_type *) &((std::array< double,3 > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::array< double,3 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_3_fill(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  std::array< double,3 >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< double,3 >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_3_fill", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_3_fill" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_3_fill" "', argument " "2"" of type '" "std::array< double,3 >::value_type""'");
  } 
  temp2 = static_cast< std::array< double,3 >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->fill((std::array< double,3 >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_array_double_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,3 > *arg1 = (std::array< double,3 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_3_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_array_double_3" "', argument " "1"" of type '" "std::array< double,3 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,3 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *array_double_3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__arrayT_double_3_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *array_double_3_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_array_double_6_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_iterator" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = (swig::SwigPyIterator *)std_array_Sl_double_Sc_6_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___nonzero__" "', argument " "1"" of type '" "std::array< double,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = (bool)std_array_Sl_double_Sc_6_Sg____nonzero__((std::array< double,6 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___bool__" "', argument " "1"" of type '" "std::array< double,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = (bool)std_array_Sl_double_Sc_6_Sg____bool__((std::array< double,6 > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,6 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___len__" "', argument " "1"" of type '" "std::array< double,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = std_array_Sl_double_Sc_6_Sg____len__((std::array< double,6 > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  std::array< double,6 >::difference_type arg2 ;
  std::array< double,6 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::array< double,6 > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_6___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___getslice__" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_6___getslice__" "', argument " "2"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,6 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_6___getslice__" "', argument " "3"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,6 >::difference_type >(val3);
  try {
    result = (std::array< double,6 > *)std_array_Sl_double_Sc_6_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_6_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  std::array< double,6 >::difference_type arg2 ;
  std::array< double,6 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___setslice__" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_6___setslice__" "', argument " "2"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,6 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_6___setslice__" "', argument " "3"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,6 >::difference_type >(val3);
  try {
    std_array_Sl_double_Sc_6_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  std::array< double,6 >::difference_type arg2 ;
  std::array< double,6 >::difference_type arg3 ;
  std::array< double,6 > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___setslice__" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_6___setslice__" "', argument " "2"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,6 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_6___setslice__" "', argument " "3"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,6 >::difference_type >(val3);
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "array_double_6___setslice__" "', argument " "4"" of type '" "std::array< double,6 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_double_6___setslice__" "', argument " "4"" of type '" "std::array< double,6 > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_array_Sl_double_Sc_6_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< double,6 > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_6___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_double_6___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< double,6 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_array_double_6___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_6___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,6 >::__setslice__(std::array< double,6 >::difference_type,std::array< double,6 >::difference_type)\n"
    "    std::array< double,6 >::__setslice__(std::array< double,6 >::difference_type,std::array< double,6 >::difference_type,std::array< double,6 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_6___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  std::array< double,6 >::difference_type arg2 ;
  std::array< double,6 >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_6___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___delslice__" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_6___delslice__" "', argument " "2"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,6 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_6___delslice__" "', argument " "3"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg3 = static_cast< std::array< double,6 >::difference_type >(val3);
  try {
    std_array_Sl_double_Sc_6_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  std::array< double,6 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___delitem__" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_6___delitem__" "', argument " "2"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,6 >::difference_type >(val2);
  try {
    std_array_Sl_double_Sc_6_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< double,6 > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___getitem__" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_6___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::array< double,6 > *)std_array_Sl_double_Sc_6_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_6_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::array< double,6 > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___setitem__" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_6___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "array_double_6___setitem__" "', argument " "3"" of type '" "std::array< double,6 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_double_6___setitem__" "', argument " "3"" of type '" "std::array< double,6 > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_array_Sl_double_Sc_6_Sg____setitem____SWIG_0(arg1,arg2,(std::array< double,6 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___setitem__" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_6___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_double_Sc_6_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___delitem__" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "array_double_6___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_array_Sl_double_Sc_6_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_6___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_double_6___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_double_6___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_6___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,6 >::__delitem__(std::array< double,6 >::difference_type)\n"
    "    std::array< double,6 >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_6___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  std::array< double,6 >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< double,6 >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___getitem__" "', argument " "1"" of type '" "std::array< double,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_6___getitem__" "', argument " "2"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,6 >::difference_type >(val2);
  try {
    result = (std::array< double,6 >::value_type *) &std_array_Sl_double_Sc_6_Sg____getitem____SWIG_1((std::array< double,6 > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::array< double,6 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_6___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_double_6___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_array_double_6___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_6___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,6 >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< double,6 >::__getitem__(std::array< double,6 >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_6___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  std::array< double,6 >::difference_type arg2 ;
  std::array< double,6 >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::array< double,6 >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6___setitem__" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_6___setitem__" "', argument " "2"" of type '" "std::array< double,6 >::difference_type""'");
  } 
  arg2 = static_cast< std::array< double,6 >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "array_double_6___setitem__" "', argument " "3"" of type '" "std::array< double,6 >::value_type""'");
  } 
  temp3 = static_cast< std::array< double,6 >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_array_Sl_double_Sc_6_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "array_double_6___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_array_double_6___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,6 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_array_double_6___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_array_double_6___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'array_double_6___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,6 >::__setitem__(SWIGPY_SLICEOBJECT *,std::array< double,6 > const &)\n"
    "    std::array< double,6 >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::array< double,6 >::__setitem__(std::array< double,6 >::difference_type,std::array< double,6 >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_array_double_6__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::array< double,6 > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::array< double,6 > *)new std::array< double,6 >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_6_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_double_6__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::array< double,6 > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_array_double_6" "', argument " "1"" of type '" "std::array< double,6 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_array_double_6" "', argument " "1"" of type '" "std::array< double,6 > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::array< double,6 > *)new std::array< double,6 >((std::array< double,6 > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__arrayT_double_6_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_array_double_6(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_array_double_6", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_array_double_6__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::array< double,6 >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_array_double_6__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_array_double_6'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::array< double,6 >::array()\n"
    "    std::array< double,6 >::array(std::array< double,6 > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_array_double_6_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_empty" "', argument " "1"" of type '" "std::array< double,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = (bool)((std::array< double,6 > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,6 >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_size" "', argument " "1"" of type '" "std::array< double,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = ((std::array< double,6 > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  std::array< double,6 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_6_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_swap" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__arrayT_double_6_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "array_double_6_swap" "', argument " "2"" of type '" "std::array< double,6 > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "array_double_6_swap" "', argument " "2"" of type '" "std::array< double,6 > &""'"); 
  }
  arg2 = reinterpret_cast< std::array< double,6 > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,6 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_begin" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,6 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,6 >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_end" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,6 >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,6 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_rbegin" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,6 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,6 >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_rend" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::array< double,6 >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,6 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_front" "', argument " "1"" of type '" "std::array< double,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = (std::array< double,6 >::value_type *) &((std::array< double,6 > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::array< double,6 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,6 >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_back" "', argument " "1"" of type '" "std::array< double,6 > const *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  result = (std::array< double,6 >::value_type *) &((std::array< double,6 > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::array< double,6 >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_array_double_6_fill(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  std::array< double,6 >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::array< double,6 >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "array_double_6_fill", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "array_double_6_fill" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "array_double_6_fill" "', argument " "2"" of type '" "std::array< double,6 >::value_type""'");
  } 
  temp2 = static_cast< std::array< double,6 >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->fill((std::array< double,6 >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_array_double_6(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::array< double,6 > *arg1 = (std::array< double,6 > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__arrayT_double_6_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_array_double_6" "', argument " "1"" of type '" "std::array< double,6 > *""'"); 
  }
  arg1 = reinterpret_cast< std::array< double,6 > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *array_double_6_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__arrayT_double_6_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *array_double_6_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_string_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_string___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_string___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__delitem__(std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::string >::__getitem__(std::vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_string___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_string__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_string__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_string__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::string >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::string >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_string_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_string_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_string__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_string" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_string" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_string" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_string", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_string__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_string__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_string__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_string__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_string_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_string_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::string >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_string_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_string_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_string_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_string_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_string_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_string_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_string_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_string_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_string_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_string_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_string_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_string_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_string_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_string(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_string" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_string_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_string_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_char_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_iterator" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_char_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___nonzero__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (bool)std_vector_Sl_char_Sg____nonzero__((std::vector< char > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___bool__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (bool)std_vector_Sl_char_Sg____bool__((std::vector< char > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< char >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___len__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = std_vector_Sl_char_Sg____len__((std::vector< char > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< char,std::allocator< char > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_char___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___getslice__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char___getslice__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_char___getslice__" "', argument " "3"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< char >::difference_type >(val3);
  try {
    result = (std::vector< char,std::allocator< char > > *)std_vector_Sl_char_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___setslice__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char___setslice__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_char___setslice__" "', argument " "3"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< char >::difference_type >(val3);
  try {
    std_vector_Sl_char_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::difference_type arg3 ;
  std::vector< char,std::allocator< char > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___setslice__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char___setslice__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_char___setslice__" "', argument " "3"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< char >::difference_type >(val3);
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_char___setslice__" "', argument " "4"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_char___setslice__" "', argument " "4"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_char_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< char,std::allocator< char > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_char___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_char___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< char,std::allocator< char > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_char___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_char___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::__setslice__(std::vector< char >::difference_type,std::vector< char >::difference_type)\n"
    "    std::vector< char >::__setslice__(std::vector< char >::difference_type,std::vector< char >::difference_type,std::vector< char,std::allocator< char > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_char___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_char___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___delslice__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char___delslice__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_char___delslice__" "', argument " "3"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< char >::difference_type >(val3);
  try {
    std_vector_Sl_char_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___delitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char___delitem__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  try {
    std_vector_Sl_char_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< char,std::allocator< char > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___getitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< char,std::allocator< char > > *)std_vector_Sl_char_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< char,std::allocator< char > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___setitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_char___setitem__" "', argument " "3"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_char___setitem__" "', argument " "3"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_char_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< char,std::allocator< char > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___setitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_char_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___delitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_char_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_char___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_char___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_char___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_char___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::__delitem__(std::vector< char >::difference_type)\n"
    "    std::vector< char >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_char___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< char >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___getitem__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char___getitem__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg____getitem____SWIG_1((std::vector< char > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_char(static_cast< char >(*result));
  (void)swig::container_owner<swig::traits<std::vector< char >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_char___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_char___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_char___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_char___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< char >::__getitem__(std::vector< char >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_char___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char___setitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char___setitem__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_char___setitem__" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_char_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(char const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_char___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_char___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< char,std::allocator< char > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_char___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_char___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_char___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< char,std::allocator< char > > const &)\n"
    "    std::vector< char >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< char >::__setitem__(std::vector< char >::difference_type,std::vector< char >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_char_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< char >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_pop" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  try {
    result = (std::vector< char >::value_type)std_vector_Sl_char_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< char >::value_type temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_char_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_append" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char_append" "', argument " "2"" of type '" "std::vector< char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< char >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_char_Sg__append(arg1,(char const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_char__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< char > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< char > *)new std::vector< char >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_char__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< char > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< char,std::allocator< char > > *ptr = (std::vector< char,std::allocator< char > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_char" "', argument " "1"" of type '" "std::vector< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_char" "', argument " "1"" of type '" "std::vector< char > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_empty" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (bool)((std::vector< char > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< char >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_size" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_char_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_swap" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_char_swap" "', argument " "2"" of type '" "std::vector< char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_char_swap" "', argument " "2"" of type '" "std::vector< char > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< char > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< char >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_begin" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< char >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_end" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< char >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_rbegin" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< char >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_rend" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_clear" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< char > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_get_allocator" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< char >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_char_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_char__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< char > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_char" "', argument " "1"" of type '" "std::vector< char >::size_type""'");
  } 
  arg1 = static_cast< std::vector< char >::size_type >(val1);
  result = (std::vector< char > *)new std::vector< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_pop_back" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_resize" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char_resize" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< char >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_erase" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char_erase" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char_erase" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
    }
  }
  result = std_vector_Sl_char_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::iterator arg2 ;
  std::vector< char >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< char >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_erase" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char_erase" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char_erase" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char_erase" "', argument " "3"" of type '" "std::vector< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char_erase" "', argument " "3"" of type '" "std::vector< char >::iterator""'");
    }
  }
  result = std_vector_Sl_char_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_char_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_char_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_char_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_char_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::erase(std::vector< char >::iterator)\n"
    "    std::vector< char >::erase(std::vector< char >::iterator,std::vector< char >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_char__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char >::size_type arg1 ;
  std::vector< char >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< char >::value_type temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  std::vector< char > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_char" "', argument " "1"" of type '" "std::vector< char >::size_type""'");
  } 
  arg1 = static_cast< std::vector< char >::size_type >(val1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_char" "', argument " "2"" of type '" "std::vector< char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< char >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< char > *)new std::vector< char >(arg1,(std::vector< char >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_char(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_char", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_char__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_char__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_char__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_char__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_char'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::vector()\n"
    "    std::vector< char >::vector(std::vector< char > const &)\n"
    "    std::vector< char >::vector(std::vector< char >::size_type)\n"
    "    std::vector< char >::vector(std::vector< char >::size_type,std::vector< char >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_char_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< char >::value_type temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_char_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_push_back" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char_push_back" "', argument " "2"" of type '" "std::vector< char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< char >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< char >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_front" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (std::vector< char >::value_type *) &((std::vector< char > const *)arg1)->front();
  resultobj = SWIG_From_char(static_cast< char >(*result));
  (void)swig::container_owner<swig::traits<std::vector< char >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< char >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_back" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (std::vector< char >::value_type *) &((std::vector< char > const *)arg1)->back();
  resultobj = SWIG_From_char(static_cast< char >(*result));
  (void)swig::container_owner<swig::traits<std::vector< char >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_char_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_assign" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char_assign" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_char_assign" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< char >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_resize" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char_resize" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_char_resize" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< char >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_char_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_char_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_char_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_char_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::resize(std::vector< char >::size_type)\n"
    "    std::vector< char >::resize(std::vector< char >::size_type,std::vector< char >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_char_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::iterator arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  std::vector< char >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_insert" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char_insert" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char_insert" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_char(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_char_insert" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_char_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(char const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::iterator arg2 ;
  std::vector< char >::size_type arg3 ;
  std::vector< char >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< char >::value_type temp4 ;
  char val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_insert" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char_insert" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_char_insert" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_char_insert" "', argument " "3"" of type '" "std::vector< char >::size_type""'");
  } 
  arg3 = static_cast< std::vector< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_char(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_char_insert" "', argument " "4"" of type '" "std::vector< char >::value_type""'");
  } 
  temp4 = static_cast< std::vector< char >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_char_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(char const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_char_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_char_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_char_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_char_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >::insert(std::vector< char >::iterator,std::vector< char >::value_type const &)\n"
    "    std::vector< char >::insert(std::vector< char >::iterator,std::vector< char >::size_type,std::vector< char >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_char_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_char_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_reserve" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_char_reserve" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_char_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< char >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_char_capacity" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_char(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_char" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_char_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_char_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_int_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_int___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< int,std::allocator< int > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_int___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type)\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_int" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_int" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_int" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_int_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_int_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_int__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_int" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_int" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_int", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_int__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_int__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_int__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_int__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_int'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_int_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(int const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_int_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_int_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(int const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_int_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_int(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_int" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_int_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_int_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_long_long_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_iterator" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_long_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___nonzero__" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (bool)std_vector_Sl_long_Sg____nonzero__((std::vector< long > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___bool__" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (bool)std_vector_Sl_long_Sg____bool__((std::vector< long > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___len__" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = std_vector_Sl_long_Sg____len__((std::vector< long > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  std::vector< long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< long,std::allocator< long > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_long___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___getslice__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long___getslice__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_long___getslice__" "', argument " "3"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long >::difference_type >(val3);
  try {
    result = (std::vector< long,std::allocator< long > > *)std_vector_Sl_long_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  std::vector< long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___setslice__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long___setslice__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_long___setslice__" "', argument " "3"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long >::difference_type >(val3);
  try {
    std_vector_Sl_long_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  std::vector< long >::difference_type arg3 ;
  std::vector< long,std::allocator< long > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___setslice__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long___setslice__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_long___setslice__" "', argument " "3"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long >::difference_type >(val3);
  {
    std::vector< long,std::allocator< long > > *ptr = (std::vector< long,std::allocator< long > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_long_long___setslice__" "', argument " "4"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_long_long___setslice__" "', argument " "4"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_long_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< long,std::allocator< long > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long_long___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_long_long___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< long,std::allocator< long > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_long_long___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long_long___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::__setslice__(std::vector< long >::difference_type,std::vector< long >::difference_type)\n"
    "    std::vector< long >::__setslice__(std::vector< long >::difference_type,std::vector< long >::difference_type,std::vector< long,std::allocator< long > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_long___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  std::vector< long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_long___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___delslice__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long___delslice__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_long___delslice__" "', argument " "3"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long >::difference_type >(val3);
  try {
    std_vector_Sl_long_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___delitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long___delitem__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  try {
    std_vector_Sl_long_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long,std::allocator< long > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___getitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< long,std::allocator< long > > *)std_vector_Sl_long_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< long,std::allocator< long > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___setitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< long,std::allocator< long > > *ptr = (std::vector< long,std::allocator< long > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_long_long___setitem__" "', argument " "3"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_long_long___setitem__" "', argument " "3"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_long_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< long,std::allocator< long > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___setitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_long_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___delitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_long_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long_long___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_long_long___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_long_long___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long_long___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::__delitem__(std::vector< long >::difference_type)\n"
    "    std::vector< long >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_long___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< long >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___getitem__" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long___getitem__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  try {
    result = (std::vector< long >::value_type *) &std_vector_Sl_long_Sg____getitem____SWIG_1((std::vector< long > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_long(static_cast< long >(*result));
  (void)swig::container_owner<swig::traits<std::vector< long >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long_long___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_long_long___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_long_long___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long_long___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< long >::__getitem__(std::vector< long >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_long___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long___setitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long___setitem__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_long___setitem__" "', argument " "3"" of type '" "std::vector< long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_long_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long_long___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_long_long___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< long,std::allocator< long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_long_long___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_long_long___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long_long___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< long,std::allocator< long > > const &)\n"
    "    std::vector< long >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< long >::__setitem__(std::vector< long >::difference_type,std::vector< long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_long_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_pop" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  try {
    result = (std::vector< long >::value_type)std_vector_Sl_long_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_long_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_append" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long_append" "', argument " "2"" of type '" "std::vector< long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< long >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_long_Sg__append(arg1,(long const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_long_long__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< long > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< long > *)new std::vector< long >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_long_long__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< long > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< long,std::allocator< long > > *ptr = (std::vector< long,std::allocator< long > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_long_long" "', argument " "1"" of type '" "std::vector< long > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_long_long" "', argument " "1"" of type '" "std::vector< long > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< long > *)new std::vector< long >((std::vector< long > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_empty" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (bool)((std::vector< long > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_size" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_long_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_swap" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_long_long_swap" "', argument " "2"" of type '" "std::vector< long > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_long_long_swap" "', argument " "2"" of type '" "std::vector< long > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< long > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_begin" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_end" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_rbegin" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_rend" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_clear" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< long > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_get_allocator" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< long >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_long_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_long_long__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< long > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_long_long" "', argument " "1"" of type '" "std::vector< long >::size_type""'");
  } 
  arg1 = static_cast< std::vector< long >::size_type >(val1);
  result = (std::vector< long > *)new std::vector< long >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_pop_back" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_resize" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long_resize" "', argument " "2"" of type '" "std::vector< long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< long >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_erase" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long_erase" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long_erase" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
    }
  }
  result = std_vector_Sl_long_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::iterator arg2 ;
  std::vector< long >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< long >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_erase" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long_erase" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long_erase" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long_erase" "', argument " "3"" of type '" "std::vector< long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long_erase" "', argument " "3"" of type '" "std::vector< long >::iterator""'");
    }
  }
  result = std_vector_Sl_long_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long_long_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_long_long_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_long_long_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long_long_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::erase(std::vector< long >::iterator)\n"
    "    std::vector< long >::erase(std::vector< long >::iterator,std::vector< long >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_long_long__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long >::size_type arg1 ;
  std::vector< long >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  std::vector< long > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_long_long" "', argument " "1"" of type '" "std::vector< long >::size_type""'");
  } 
  arg1 = static_cast< std::vector< long >::size_type >(val1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_long_long" "', argument " "2"" of type '" "std::vector< long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< long >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< long > *)new std::vector< long >(arg1,(std::vector< long >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_long_long(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_long_long", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_long_long__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_long_long__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_long_long__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_long_long__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_long_long'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::vector()\n"
    "    std::vector< long >::vector(std::vector< long > const &)\n"
    "    std::vector< long >::vector(std::vector< long >::size_type)\n"
    "    std::vector< long >::vector(std::vector< long >::size_type,std::vector< long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_long_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_long_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_push_back" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long_push_back" "', argument " "2"" of type '" "std::vector< long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< long >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< long >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_front" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (std::vector< long >::value_type *) &((std::vector< long > const *)arg1)->front();
  resultobj = SWIG_From_long(static_cast< long >(*result));
  (void)swig::container_owner<swig::traits<std::vector< long >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_back" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (std::vector< long >::value_type *) &((std::vector< long > const *)arg1)->back();
  resultobj = SWIG_From_long(static_cast< long >(*result));
  (void)swig::container_owner<swig::traits<std::vector< long >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_long_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_assign" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long_assign" "', argument " "2"" of type '" "std::vector< long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long >::size_type >(val2);
  ecode3 = SWIG_AsVal_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_long_assign" "', argument " "3"" of type '" "std::vector< long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< long >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_resize" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long_resize" "', argument " "2"" of type '" "std::vector< long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long >::size_type >(val2);
  ecode3 = SWIG_AsVal_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_long_resize" "', argument " "3"" of type '" "std::vector< long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< long >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long_long_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_long_long_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_long_long_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long_long_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::resize(std::vector< long >::size_type)\n"
    "    std::vector< long >::resize(std::vector< long >::size_type,std::vector< long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_long_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::iterator arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  std::vector< long >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_insert" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long_insert" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long_insert" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_long_insert" "', argument " "3"" of type '" "std::vector< long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_long_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(long const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::iterator arg2 ;
  std::vector< long >::size_type arg3 ;
  std::vector< long >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< long >::value_type temp4 ;
  long val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_insert" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long_insert" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_long_insert" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_long_insert" "', argument " "3"" of type '" "std::vector< long >::size_type""'");
  } 
  arg3 = static_cast< std::vector< long >::size_type >(val3);
  ecode4 = SWIG_AsVal_long(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_long_long_insert" "', argument " "4"" of type '" "std::vector< long >::value_type""'");
  } 
  temp4 = static_cast< std::vector< long >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_long_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(long const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long_long_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_long_long_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_long_long_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long_long_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >::insert(std::vector< long >::iterator,std::vector< long >::value_type const &)\n"
    "    std::vector< long >::insert(std::vector< long >::iterator,std::vector< long >::size_type,std::vector< long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_long_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_long_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_reserve" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_long_reserve" "', argument " "2"" of type '" "std::vector< long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_long_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_long_capacity" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_long_long(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_long_long" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_long_long_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_long_long_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_long_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_iterator" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_long_SS_long_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___nonzero__" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = (bool)std_vector_Sl_long_SS_long_Sg____nonzero__((std::vector< long long > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___bool__" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = (bool)std_vector_Sl_long_SS_long_Sg____bool__((std::vector< long long > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long long >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___len__" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = std_vector_Sl_long_SS_long_Sg____len__((std::vector< long long > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::difference_type arg2 ;
  std::vector< long long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< long long,std::allocator< long long > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___getslice__" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long___getslice__" "', argument " "2"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long___getslice__" "', argument " "3"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long long >::difference_type >(val3);
  try {
    result = (std::vector< long long,std::allocator< long long > > *)std_vector_Sl_long_SS_long_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::difference_type arg2 ;
  std::vector< long long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___setslice__" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long___setslice__" "', argument " "2"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long___setslice__" "', argument " "3"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long long >::difference_type >(val3);
  try {
    std_vector_Sl_long_SS_long_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::difference_type arg2 ;
  std::vector< long long >::difference_type arg3 ;
  std::vector< long long,std::allocator< long long > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___setslice__" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long___setslice__" "', argument " "2"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long___setslice__" "', argument " "3"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long long >::difference_type >(val3);
  {
    std::vector< long long,std::allocator< long long > > *ptr = (std::vector< long long,std::allocator< long long > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_long___setslice__" "', argument " "4"" of type '" "std::vector< long long,std::allocator< long long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_long___setslice__" "', argument " "4"" of type '" "std::vector< long long,std::allocator< long long > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_long_SS_long_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< long long,std::allocator< long long > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_long___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< long long,std::allocator< long long > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_long___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long long >::__setslice__(std::vector< long long >::difference_type,std::vector< long long >::difference_type)\n"
    "    std::vector< long long >::__setslice__(std::vector< long long >::difference_type,std::vector< long long >::difference_type,std::vector< long long,std::allocator< long long > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::difference_type arg2 ;
  std::vector< long long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___delslice__" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long___delslice__" "', argument " "2"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long___delslice__" "', argument " "3"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long long >::difference_type >(val3);
  try {
    std_vector_Sl_long_SS_long_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___delitem__" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long___delitem__" "', argument " "2"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::difference_type >(val2);
  try {
    std_vector_Sl_long_SS_long_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long long,std::allocator< long long > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___getitem__" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< long long,std::allocator< long long > > *)std_vector_Sl_long_SS_long_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< long long,std::allocator< long long > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___setitem__" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< long long,std::allocator< long long > > *ptr = (std::vector< long long,std::allocator< long long > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_long___setitem__" "', argument " "3"" of type '" "std::vector< long long,std::allocator< long long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_long___setitem__" "', argument " "3"" of type '" "std::vector< long long,std::allocator< long long > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_long_SS_long_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< long long,std::allocator< long long > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___setitem__" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_long_SS_long_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___delitem__" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_long_SS_long_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_long___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_long___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long long >::__delitem__(std::vector< long long >::difference_type)\n"
    "    std::vector< long long >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< long long >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___getitem__" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long___getitem__" "', argument " "2"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::difference_type >(val2);
  try {
    result = (std::vector< long long >::value_type *) &std_vector_Sl_long_SS_long_Sg____getitem____SWIG_1((std::vector< long long > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(*result));
  (void)swig::container_owner<swig::traits<std::vector< long long >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_long___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_long___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long long >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< long long >::__getitem__(std::vector< long long >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::difference_type arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< long long >::value_type temp3 ;
  long long val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long___setitem__" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long___setitem__" "', argument " "2"" of type '" "std::vector< long long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long___setitem__" "', argument " "3"" of type '" "std::vector< long long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long long >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_long_SS_long_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(long long const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_long___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< long long,std::allocator< long long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_long___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_long___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long long >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< long long,std::allocator< long long > > const &)\n"
    "    std::vector< long long >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< long long >::__setitem__(std::vector< long long >::difference_type,std::vector< long long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long long >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_pop" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  try {
    result = (std::vector< long long >::value_type)std_vector_Sl_long_SS_long_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long long >::value_type temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_append" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_append" "', argument " "2"" of type '" "std::vector< long long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< long long >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_long_SS_long_Sg__append(arg1,(long long const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_long__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< long long > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< long long > *)new std::vector< long long >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_long__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< long long > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< long long,std::allocator< long long > > *ptr = (std::vector< long long,std::allocator< long long > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_long" "', argument " "1"" of type '" "std::vector< long long > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_long" "', argument " "1"" of type '" "std::vector< long long > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< long long > *)new std::vector< long long >((std::vector< long long > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_empty" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = (bool)((std::vector< long long > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long long >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_size" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = ((std::vector< long long > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_swap" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_long_swap" "', argument " "2"" of type '" "std::vector< long long > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_long_swap" "', argument " "2"" of type '" "std::vector< long long > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< long long > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long long >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_begin" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long long >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_end" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long long >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_rbegin" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long long >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long long >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_rend" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long long >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_clear" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< long long > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_get_allocator" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = ((std::vector< long long > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< long long >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_long_long_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_long__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< long long > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_long" "', argument " "1"" of type '" "std::vector< long long >::size_type""'");
  } 
  arg1 = static_cast< std::vector< long long >::size_type >(val1);
  result = (std::vector< long long > *)new std::vector< long long >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_pop_back" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_resize" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_resize" "', argument " "2"" of type '" "std::vector< long long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< long long >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_erase" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_erase" "', argument " "2"" of type '" "std::vector< long long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_erase" "', argument " "2"" of type '" "std::vector< long long >::iterator""'");
    }
  }
  result = std_vector_Sl_long_SS_long_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::iterator arg2 ;
  std::vector< long long >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< long long >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_erase" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_erase" "', argument " "2"" of type '" "std::vector< long long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_erase" "', argument " "2"" of type '" "std::vector< long long >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_erase" "', argument " "3"" of type '" "std::vector< long long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long long >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_erase" "', argument " "3"" of type '" "std::vector< long long >::iterator""'");
    }
  }
  result = std_vector_Sl_long_SS_long_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long long >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_long_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long long >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long long >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_long_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long long >::erase(std::vector< long long >::iterator)\n"
    "    std::vector< long long >::erase(std::vector< long long >::iterator,std::vector< long long >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_long__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long >::size_type arg1 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< long long >::value_type temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  std::vector< long long > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_long" "', argument " "1"" of type '" "std::vector< long long >::size_type""'");
  } 
  arg1 = static_cast< std::vector< long long >::size_type >(val1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_long" "', argument " "2"" of type '" "std::vector< long long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< long long >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< long long > *)new std::vector< long long >(arg1,(std::vector< long long >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_long(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_long", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_long__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_long__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_long__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_long__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_long'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long long >::vector()\n"
    "    std::vector< long long >::vector(std::vector< long long > const &)\n"
    "    std::vector< long long >::vector(std::vector< long long >::size_type)\n"
    "    std::vector< long long >::vector(std::vector< long long >::size_type,std::vector< long long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long long >::value_type temp2 ;
  long long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_push_back" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_push_back" "', argument " "2"" of type '" "std::vector< long long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< long long >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long long >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_front" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = (std::vector< long long >::value_type *) &((std::vector< long long > const *)arg1)->front();
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(*result));
  (void)swig::container_owner<swig::traits<std::vector< long long >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long long >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_back" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = (std::vector< long long >::value_type *) &((std::vector< long long > const *)arg1)->back();
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(*result));
  (void)swig::container_owner<swig::traits<std::vector< long long >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< long long >::value_type temp3 ;
  long long val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_assign" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_assign" "', argument " "2"" of type '" "std::vector< long long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::size_type >(val2);
  ecode3 = SWIG_AsVal_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_assign" "', argument " "3"" of type '" "std::vector< long long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long long >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< long long >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< long long >::value_type temp3 ;
  long long val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_resize" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_resize" "', argument " "2"" of type '" "std::vector< long long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::size_type >(val2);
  ecode3 = SWIG_AsVal_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_resize" "', argument " "3"" of type '" "std::vector< long long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long long >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< long long >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_long_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_long_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long long >::resize(std::vector< long long >::size_type)\n"
    "    std::vector< long long >::resize(std::vector< long long >::size_type,std::vector< long long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::iterator arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< long long >::value_type temp3 ;
  long long val3 ;
  int ecode3 = 0 ;
  std::vector< long long >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_insert" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_insert" "', argument " "2"" of type '" "std::vector< long long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_insert" "', argument " "2"" of type '" "std::vector< long long >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_long_SS_long(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_insert" "', argument " "3"" of type '" "std::vector< long long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long long >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_long_SS_long_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(long long const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::iterator arg2 ;
  std::vector< long long >::size_type arg3 ;
  std::vector< long long >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< long long >::value_type temp4 ;
  long long val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_insert" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_insert" "', argument " "2"" of type '" "std::vector< long long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_long_insert" "', argument " "2"" of type '" "std::vector< long long >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_long_insert" "', argument " "3"" of type '" "std::vector< long long >::size_type""'");
  } 
  arg3 = static_cast< std::vector< long long >::size_type >(val3);
  ecode4 = SWIG_AsVal_long_SS_long(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_long_insert" "', argument " "4"" of type '" "std::vector< long long >::value_type""'");
  } 
  temp4 = static_cast< std::vector< long long >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_long_SS_long_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(long long const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_long_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long long >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_long_SS_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_long_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< long long,std::allocator< long long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long long >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long_SS_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_long_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_long_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long long >::insert(std::vector< long long >::iterator,std::vector< long long >::value_type const &)\n"
    "    std::vector< long long >::insert(std::vector< long long >::iterator,std::vector< long long >::size_type,std::vector< long long >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_long_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_long_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_reserve" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_long_reserve" "', argument " "2"" of type '" "std::vector< long long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long long >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_long_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long long >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_long_capacity" "', argument " "1"" of type '" "std::vector< long long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  result = ((std::vector< long long > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_long(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_long" "', argument " "1"" of type '" "std::vector< long long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long long > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_long_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_long_long_std__allocatorT_long_long_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_long_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_float_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_iterator" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_float_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___nonzero__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)std_vector_Sl_float_Sg____nonzero__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___bool__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)std_vector_Sl_float_Sg____bool__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___len__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = std_vector_Sl_float_Sg____len__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_float___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___getslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___getslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___getslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    result = (std::vector< float,std::allocator< float > > *)std_vector_Sl_float_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    std_vector_Sl_float_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  std::vector< float,std::allocator< float > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_float___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_float___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_float_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< float,std::allocator< float > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_float___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_float___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< float,std::allocator< float > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_float___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_float___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__setslice__(std::vector< float >::difference_type,std::vector< float >::difference_type)\n"
    "    std::vector< float >::__setslice__(std::vector< float >::difference_type,std::vector< float >::difference_type,std::vector< float,std::allocator< float > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_float___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___delslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___delslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___delslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    std_vector_Sl_float_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___delitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  try {
    std_vector_Sl_float_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___getitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< float,std::allocator< float > > *)std_vector_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< float,std::allocator< float > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_float___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_float___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< float,std::allocator< float > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_float_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_float___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_float___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_float___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_float___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__delitem__(std::vector< float >::difference_type)\n"
    "    std::vector< float >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___getitem__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___getitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg____getitem____SWIG_1((std::vector< float > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_float(static_cast< float >(*result));
  (void)swig::container_owner<swig::traits<std::vector< float >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_float___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_float___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_float___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_float___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< float >::__getitem__(std::vector< float >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float___setitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float___setitem__" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_float___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_float___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< float,std::allocator< float > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_float___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_float___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_float___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< float,std::allocator< float > > const &)\n"
    "    std::vector< float >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< float >::__setitem__(std::vector< float >::difference_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_pop" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  try {
    result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_float_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_append" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_append" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_float_Sg__append(arg1,(float const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_float__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< float > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< float > *)new std::vector< float >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_float__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< float > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_float" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_float" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_empty" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)((std::vector< float > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_size" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_float_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_swap" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_float_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_float_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< float > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_begin" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_end" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_rbegin" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_rend" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_clear" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< float > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_get_allocator" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< float >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_float__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< float > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_float" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
  } 
  arg1 = static_cast< std::vector< float >::size_type >(val1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_pop_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< float >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_erase" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  result = std_vector_Sl_float_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< float >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_erase" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "3"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_erase" "', argument " "3"" of type '" "std::vector< float >::iterator""'");
    }
  }
  result = std_vector_Sl_float_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_float_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_float_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_float_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_float_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(std::vector< float >::iterator)\n"
    "    std::vector< float >::erase(std::vector< float >::iterator,std::vector< float >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_float__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float >::size_type arg1 ;
  std::vector< float >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  std::vector< float > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_float" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
  } 
  arg1 = static_cast< std::vector< float >::size_type >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_float" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(std::vector< float >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_float(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_float", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_float__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_float__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_float__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_float__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_float'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector()\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n"
    "    std::vector< float >::vector(std::vector< float >::size_type)\n"
    "    std::vector< float >::vector(std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_float_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_push_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_push_back" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_front" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->front();
  resultobj = SWIG_From_float(static_cast< float >(*result));
  (void)swig::container_owner<swig::traits<std::vector< float >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_back" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->back();
  resultobj = SWIG_From_float(static_cast< float >(*result));
  (void)swig::container_owner<swig::traits<std::vector< float >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_float_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_assign" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_assign" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float_assign" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< float >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float_resize" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< float >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_float_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_float_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_float_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_float_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::resize(std::vector< float >::size_type)\n"
    "    std::vector< float >::resize(std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  std::vector< float >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_insert" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float_insert" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_float_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(float const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::size_type arg3 ;
  std::vector< float >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< float >::value_type temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_insert" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_float_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_float_insert" "', argument " "3"" of type '" "std::vector< float >::size_type""'");
  } 
  arg3 = static_cast< std::vector< float >::size_type >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_float_insert" "', argument " "4"" of type '" "std::vector< float >::value_type""'");
  } 
  temp4 = static_cast< std::vector< float >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_float_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(float const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_float_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_float_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_float_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_float_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::insert(std::vector< float >::iterator,std::vector< float >::value_type const &)\n"
    "    std::vector< float >::insert(std::vector< float >::iterator,std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_float_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_float_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_reserve" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_float_reserve" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_float_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_float_capacity" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_float(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_float" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_float_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_float_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_double_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_double___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< double,std::allocator< double > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_double___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\n"
    "    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__delitem__(std::vector< double >::difference_type)\n"
    "    std::vector< double >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< double,std::allocator< double > > const &)\n"
    "    std::vector< double >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_begin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_end" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_rbegin" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_rend" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_double_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_double_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::erase(std::vector< double >::iterator)\n"
    "    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_double__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vector_double" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_double", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_double__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_double__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_double__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_vector_double__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::vector()\n"
    "    std::vector< double >::vector(std::vector< double > const &)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type)\n"
    "    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::resize(std::vector< double >::size_type)\n"
    "    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  std::vector< double >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vector_double_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_double_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(double const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_vector_double_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< double >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_double(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_double" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_double_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_int_array_2_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_iterator" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___nonzero__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____nonzero__((std::vector< std::array< int,2 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___bool__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____bool__((std::vector< std::array< int,2 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,2 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___len__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____len__((std::vector< std::array< int,2 > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::difference_type arg2 ;
  std::vector< std::array< int,2 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_2___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___getslice__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2___getslice__" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_2___getslice__" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val3);
  try {
    result = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::difference_type arg2 ;
  std::vector< std::array< int,2 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___setslice__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2___setslice__" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_2___setslice__" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::difference_type arg2 ;
  std::vector< std::array< int,2 > >::difference_type arg3 ;
  std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___setslice__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2___setslice__" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_2___setslice__" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val3);
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_int_array_2___setslice__" "', argument " "4"" of type '" "std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_2___setslice__" "', argument " "4"" of type '" "std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_2___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int_array_2___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_int_array_2___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_2___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,2 > >::__setslice__(std::vector< std::array< int,2 > >::difference_type,std::vector< std::array< int,2 > >::difference_type)\n"
    "    std::vector< std::array< int,2 > >::__setslice__(std::vector< std::array< int,2 > >::difference_type,std::vector< std::array< int,2 > >::difference_type,std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::difference_type arg2 ;
  std::vector< std::array< int,2 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_2___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___delslice__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2___delslice__" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_2___delslice__" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___delitem__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2___delitem__" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val2);
  try {
    std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___getitem__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___delitem__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_2___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int_array_2___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_array_2___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_2___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,2 > >::__delitem__(std::vector< std::array< int,2 > >::difference_type)\n"
    "    std::vector< std::array< int,2 > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::array< int,2 > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___getitem__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2___getitem__" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val2);
  try {
    result = (std::vector< std::array< int,2 > >::value_type *) &std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____getitem____SWIG_1((std::vector< std::array< int,2 > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< int,2 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< int,2 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_2___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int_array_2___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_array_2___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_2___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,2 > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< int,2 > >::__getitem__(std::vector< std::array< int,2 > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::difference_type arg2 ;
  std::vector< std::array< int,2 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2___setitem__" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::difference_type >(val2);
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::array< int,2 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_2___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int_array_2___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_2___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,2 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_2___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_2___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,2 > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &)\n"
    "    std::vector< std::array< int,2 > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< int,2 > >::__setitem__(std::vector< std::array< int,2 > >::difference_type,std::vector< std::array< int,2 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,2 > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_pop" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  try {
    result = std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< int,2 > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_2_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_append" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_array_2_append" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_2_append" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__append(arg1,(std::array< int,2 > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::array< int,2 > > *)new std::vector< std::array< int,2 > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::array< int,2 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_int_array_2" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_int_array_2" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::array< int,2 > > *)new std::vector< std::array< int,2 > >((std::vector< std::array< int,2 > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_empty" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = (bool)((std::vector< std::array< int,2 > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,2 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_size" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = ((std::vector< std::array< int,2 > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_2_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_swap" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_array_2_swap" "', argument " "2"" of type '" "std::vector< std::array< int,2 > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_2_swap" "', argument " "2"" of type '" "std::vector< std::array< int,2 > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,2 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_begin" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,2 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,2 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_end" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,2 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,2 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_rbegin" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,2 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,2 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_rend" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,2 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_clear" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::array< int,2 > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_get_allocator" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = ((std::vector< std::array< int,2 > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::array< int,2 > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__arrayT_int_2_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_2__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::array< int,2 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_int_array_2" "', argument " "1"" of type '" "std::vector< std::array< int,2 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< int,2 > >::size_type >(val1);
  result = (std::vector< std::array< int,2 > > *)new std::vector< std::array< int,2 > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_pop_back" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_resize" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2_resize" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::array< int,2 > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_erase" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2_erase" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2_erase" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,2 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::iterator arg2 ;
  std::vector< std::array< int,2 > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::array< int,2 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_erase" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2_erase" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2_erase" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2_erase" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2_erase" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,2 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_2_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_int_array_2_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_int_array_2_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_2_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,2 > >::erase(std::vector< std::array< int,2 > >::iterator)\n"
    "    std::vector< std::array< int,2 > >::erase(std::vector< std::array< int,2 > >::iterator,std::vector< std::array< int,2 > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_2__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > >::size_type arg1 ;
  std::vector< std::array< int,2 > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::array< int,2 > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_int_array_2" "', argument " "1"" of type '" "std::vector< std::array< int,2 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< int,2 > >::size_type >(val1);
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_int_array_2" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_int_array_2" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::array< int,2 > > *)new std::vector< std::array< int,2 > >(arg1,(std::vector< std::array< int,2 > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_int_array_2", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_int_array_2__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_int_array_2__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_int_array_2__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::array< int,2 >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_int_array_2__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_int_array_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,2 > >::vector()\n"
    "    std::vector< std::array< int,2 > >::vector(std::vector< std::array< int,2 > > const &)\n"
    "    std::vector< std::array< int,2 > >::vector(std::vector< std::array< int,2 > >::size_type)\n"
    "    std::vector< std::array< int,2 > >::vector(std::vector< std::array< int,2 > >::size_type,std::vector< std::array< int,2 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_2_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_push_back" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_array_2_push_back" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_2_push_back" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::array< int,2 > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,2 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_front" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = (std::vector< std::array< int,2 > >::value_type *) &((std::vector< std::array< int,2 > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::array< int,2 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< int,2 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,2 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_back" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = (std::vector< std::array< int,2 > >::value_type *) &((std::vector< std::array< int,2 > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::array< int,2 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< int,2 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::size_type arg2 ;
  std::vector< std::array< int,2 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_2_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_assign" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2_assign" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::size_type >(val2);
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_2_assign" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_2_assign" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::array< int,2 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::size_type arg2 ;
  std::vector< std::array< int,2 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_resize" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2_resize" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::size_type >(val2);
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_2_resize" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_2_resize" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::array< int,2 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_2_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_array_2_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,2 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_2_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_2_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,2 > >::resize(std::vector< std::array< int,2 > >::size_type)\n"
    "    std::vector< std::array< int,2 > >::resize(std::vector< std::array< int,2 > >::size_type,std::vector< std::array< int,2 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::iterator arg2 ;
  std::vector< std::array< int,2 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::array< int,2 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_insert" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2_insert" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2_insert" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::iterator""'");
    }
  }
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_2_insert" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_2_insert" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::array< int,2 > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,2 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::iterator arg2 ;
  std::vector< std::array< int,2 > >::size_type arg3 ;
  std::vector< std::array< int,2 > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_insert" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2_insert" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_2_insert" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_2_insert" "', argument " "3"" of type '" "std::vector< std::array< int,2 > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,2 > >::size_type >(val3);
  {
    std::array< int,2 > *ptr = (std::array< int,2 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_int_array_2_insert" "', argument " "4"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_2_insert" "', argument " "4"" of type '" "std::vector< std::array< int,2 > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< int,2 > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_2_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,2 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_2_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,2 > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< int,2 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_int_array_2_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_2_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,2 > >::insert(std::vector< std::array< int,2 > >::iterator,std::vector< std::array< int,2 > >::value_type const &)\n"
    "    std::vector< std::array< int,2 > >::insert(std::vector< std::array< int,2 > >::iterator,std::vector< std::array< int,2 > >::size_type,std::vector< std::array< int,2 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  std::vector< std::array< int,2 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_2_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_reserve" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_2_reserve" "', argument " "2"" of type '" "std::vector< std::array< int,2 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,2 > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_2_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,2 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_2_capacity" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  result = ((std::vector< std::array< int,2 > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_int_array_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,2 > > *arg1 = (std::vector< std::array< int,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_int_array_2" "', argument " "1"" of type '" "std::vector< std::array< int,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,2 > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_int_array_2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_int_array_2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_int_array_3_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_iterator" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___nonzero__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____nonzero__((std::vector< std::array< int,3 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___bool__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____bool__((std::vector< std::array< int,3 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___len__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____len__((std::vector< std::array< int,3 > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::difference_type arg2 ;
  std::vector< std::array< int,3 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_3___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___getslice__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3___getslice__" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_3___getslice__" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val3);
  try {
    result = (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *)std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::difference_type arg2 ;
  std::vector< std::array< int,3 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___setslice__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3___setslice__" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_3___setslice__" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::difference_type arg2 ;
  std::vector< std::array< int,3 > >::difference_type arg3 ;
  std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___setslice__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3___setslice__" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_3___setslice__" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val3);
  {
    std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *ptr = (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_int_array_3___setslice__" "', argument " "4"" of type '" "std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_3___setslice__" "', argument " "4"" of type '" "std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_3___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int_array_3___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_int_array_3___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_3___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,3 > >::__setslice__(std::vector< std::array< int,3 > >::difference_type,std::vector< std::array< int,3 > >::difference_type)\n"
    "    std::vector< std::array< int,3 > >::__setslice__(std::vector< std::array< int,3 > >::difference_type,std::vector< std::array< int,3 > >::difference_type,std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::difference_type arg2 ;
  std::vector< std::array< int,3 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_3___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___delslice__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3___delslice__" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_3___delslice__" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___delitem__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3___delitem__" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val2);
  try {
    std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___getitem__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *)std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___setitem__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *ptr = (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_3___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_3___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___setitem__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___delitem__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_3___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int_array_3___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_array_3___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_3___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,3 > >::__delitem__(std::vector< std::array< int,3 > >::difference_type)\n"
    "    std::vector< std::array< int,3 > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::array< int,3 > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___getitem__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3___getitem__" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val2);
  try {
    result = (std::vector< std::array< int,3 > >::value_type *) &std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____getitem____SWIG_1((std::vector< std::array< int,3 > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< int,3 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< int,3 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_3___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int_array_3___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_array_3___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_3___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,3 > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< int,3 > >::__getitem__(std::vector< std::array< int,3 > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::difference_type arg2 ;
  std::vector< std::array< int,3 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3___setitem__" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3___setitem__" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::difference_type >(val2);
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_3___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_3___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::array< int,3 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_3___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int_array_3___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_3___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,3 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_3___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_3___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,3 > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &)\n"
    "    std::vector< std::array< int,3 > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< int,3 > >::__setitem__(std::vector< std::array< int,3 > >::difference_type,std::vector< std::array< int,3 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_pop" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  try {
    result = std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< int,3 > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_3_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_append" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_array_3_append" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_3_append" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__append(arg1,(std::array< int,3 > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_3__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::array< int,3 > > *)new std::vector< std::array< int,3 > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_3__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::array< int,3 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *ptr = (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_int_array_3" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_int_array_3" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::array< int,3 > > *)new std::vector< std::array< int,3 > >((std::vector< std::array< int,3 > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_empty" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = (bool)((std::vector< std::array< int,3 > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_size" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = ((std::vector< std::array< int,3 > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_3_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_swap" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_array_3_swap" "', argument " "2"" of type '" "std::vector< std::array< int,3 > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_3_swap" "', argument " "2"" of type '" "std::vector< std::array< int,3 > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_begin" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,3 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_end" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,3 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_rbegin" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,3 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_rend" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,3 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_clear" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::array< int,3 > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_get_allocator" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = ((std::vector< std::array< int,3 > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::array< int,3 > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__arrayT_int_3_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_3__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::array< int,3 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_int_array_3" "', argument " "1"" of type '" "std::vector< std::array< int,3 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< int,3 > >::size_type >(val1);
  result = (std::vector< std::array< int,3 > > *)new std::vector< std::array< int,3 > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_pop_back" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_resize" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3_resize" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::array< int,3 > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_erase" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3_erase" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3_erase" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,3 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::iterator arg2 ;
  std::vector< std::array< int,3 > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::array< int,3 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_erase" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3_erase" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3_erase" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3_erase" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3_erase" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,3 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_3_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_int_array_3_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_int_array_3_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_3_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,3 > >::erase(std::vector< std::array< int,3 > >::iterator)\n"
    "    std::vector< std::array< int,3 > >::erase(std::vector< std::array< int,3 > >::iterator,std::vector< std::array< int,3 > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_3__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > >::size_type arg1 ;
  std::vector< std::array< int,3 > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::array< int,3 > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_int_array_3" "', argument " "1"" of type '" "std::vector< std::array< int,3 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< int,3 > >::size_type >(val1);
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_int_array_3" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_int_array_3" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::array< int,3 > > *)new std::vector< std::array< int,3 > >(arg1,(std::vector< std::array< int,3 > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_3(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_int_array_3", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_int_array_3__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_int_array_3__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_int_array_3__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::array< int,3 >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_int_array_3__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_int_array_3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,3 > >::vector()\n"
    "    std::vector< std::array< int,3 > >::vector(std::vector< std::array< int,3 > > const &)\n"
    "    std::vector< std::array< int,3 > >::vector(std::vector< std::array< int,3 > >::size_type)\n"
    "    std::vector< std::array< int,3 > >::vector(std::vector< std::array< int,3 > >::size_type,std::vector< std::array< int,3 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_3_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_push_back" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_array_3_push_back" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_3_push_back" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::array< int,3 > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_front" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = (std::vector< std::array< int,3 > >::value_type *) &((std::vector< std::array< int,3 > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::array< int,3 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< int,3 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_back" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = (std::vector< std::array< int,3 > >::value_type *) &((std::vector< std::array< int,3 > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::array< int,3 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< int,3 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::size_type arg2 ;
  std::vector< std::array< int,3 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_3_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_assign" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3_assign" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::size_type >(val2);
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_3_assign" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_3_assign" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::array< int,3 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::size_type arg2 ;
  std::vector< std::array< int,3 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_resize" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3_resize" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::size_type >(val2);
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_3_resize" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_3_resize" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::array< int,3 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_3_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_array_3_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,3 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_3_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_3_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,3 > >::resize(std::vector< std::array< int,3 > >::size_type)\n"
    "    std::vector< std::array< int,3 > >::resize(std::vector< std::array< int,3 > >::size_type,std::vector< std::array< int,3 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::iterator arg2 ;
  std::vector< std::array< int,3 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::array< int,3 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_insert" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3_insert" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3_insert" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::iterator""'");
    }
  }
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_3_insert" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_3_insert" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::array< int,3 > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,3 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::iterator arg2 ;
  std::vector< std::array< int,3 > >::size_type arg3 ;
  std::vector< std::array< int,3 > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_insert" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3_insert" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_3_insert" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_3_insert" "', argument " "3"" of type '" "std::vector< std::array< int,3 > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,3 > >::size_type >(val3);
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_int_array_3_insert" "', argument " "4"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_3_insert" "', argument " "4"" of type '" "std::vector< std::array< int,3 > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_array_Sl_int_Sc_3_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< int,3 > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_3_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,3 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_3_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,3 > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< int,3 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_int_array_3_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_3_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,3 > >::insert(std::vector< std::array< int,3 > >::iterator,std::vector< std::array< int,3 > >::value_type const &)\n"
    "    std::vector< std::array< int,3 > >::insert(std::vector< std::array< int,3 > >::iterator,std::vector< std::array< int,3 > >::size_type,std::vector< std::array< int,3 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  std::vector< std::array< int,3 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_3_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_reserve" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_3_reserve" "', argument " "2"" of type '" "std::vector< std::array< int,3 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,3 > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_3_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_3_capacity" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  result = ((std::vector< std::array< int,3 > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_int_array_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,3 > > *arg1 = (std::vector< std::array< int,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_int_array_3" "', argument " "1"" of type '" "std::vector< std::array< int,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,3 > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_int_array_3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_int_array_3_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_int_array_6_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_iterator" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___nonzero__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____nonzero__((std::vector< std::array< int,6 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___bool__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____bool__((std::vector< std::array< int,6 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___len__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____len__((std::vector< std::array< int,6 > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::difference_type arg2 ;
  std::vector< std::array< int,6 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_6___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___getslice__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6___getslice__" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_6___getslice__" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val3);
  try {
    result = (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *)std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::difference_type arg2 ;
  std::vector< std::array< int,6 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___setslice__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6___setslice__" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_6___setslice__" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::difference_type arg2 ;
  std::vector< std::array< int,6 > >::difference_type arg3 ;
  std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___setslice__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6___setslice__" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_6___setslice__" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val3);
  {
    std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *ptr = (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_int_array_6___setslice__" "', argument " "4"" of type '" "std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_6___setslice__" "', argument " "4"" of type '" "std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_6___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_int_array_6___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_int_array_6___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_6___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,6 > >::__setslice__(std::vector< std::array< int,6 > >::difference_type,std::vector< std::array< int,6 > >::difference_type)\n"
    "    std::vector< std::array< int,6 > >::__setslice__(std::vector< std::array< int,6 > >::difference_type,std::vector< std::array< int,6 > >::difference_type,std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::difference_type arg2 ;
  std::vector< std::array< int,6 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_6___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___delslice__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6___delslice__" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_6___delslice__" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___delitem__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6___delitem__" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val2);
  try {
    std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___getitem__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *)std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___setitem__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *ptr = (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_6___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_6___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___setitem__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___delitem__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_6___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int_array_6___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_array_6___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_6___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,6 > >::__delitem__(std::vector< std::array< int,6 > >::difference_type)\n"
    "    std::vector< std::array< int,6 > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::array< int,6 > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___getitem__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6___getitem__" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val2);
  try {
    result = (std::vector< std::array< int,6 > >::value_type *) &std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____getitem____SWIG_1((std::vector< std::array< int,6 > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< int,6 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< int,6 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_6___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int_array_6___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_array_6___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_6___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,6 > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< int,6 > >::__getitem__(std::vector< std::array< int,6 > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::difference_type arg2 ;
  std::vector< std::array< int,6 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6___setitem__" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6___setitem__" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::difference_type >(val2);
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_6___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_6___setitem__" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::array< int,6 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_6___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_int_array_6___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_6___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,6 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_6___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_6___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,6 > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &)\n"
    "    std::vector< std::array< int,6 > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< int,6 > >::__setitem__(std::vector< std::array< int,6 > >::difference_type,std::vector< std::array< int,6 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_pop" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  try {
    result = std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< int,6 > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_6_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_append" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_array_6_append" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_6_append" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__append(arg1,(std::array< int,6 > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_6__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::array< int,6 > > *)new std::vector< std::array< int,6 > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_6__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::array< int,6 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *ptr = (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_int_array_6" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_int_array_6" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::array< int,6 > > *)new std::vector< std::array< int,6 > >((std::vector< std::array< int,6 > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_empty" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = (bool)((std::vector< std::array< int,6 > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_size" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = ((std::vector< std::array< int,6 > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_6_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_swap" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_array_6_swap" "', argument " "2"" of type '" "std::vector< std::array< int,6 > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_6_swap" "', argument " "2"" of type '" "std::vector< std::array< int,6 > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_begin" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,6 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_end" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,6 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_rbegin" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,6 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_rend" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,6 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_clear" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::array< int,6 > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_get_allocator" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = ((std::vector< std::array< int,6 > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::array< int,6 > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__arrayT_int_6_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_6__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::array< int,6 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_int_array_6" "', argument " "1"" of type '" "std::vector< std::array< int,6 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< int,6 > >::size_type >(val1);
  result = (std::vector< std::array< int,6 > > *)new std::vector< std::array< int,6 > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_pop_back" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_resize" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6_resize" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::array< int,6 > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_erase" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6_erase" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6_erase" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,6 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::iterator arg2 ;
  std::vector< std::array< int,6 > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::array< int,6 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_erase" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6_erase" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6_erase" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6_erase" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6_erase" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,6 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_6_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_int_array_6_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_int_array_6_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_6_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,6 > >::erase(std::vector< std::array< int,6 > >::iterator)\n"
    "    std::vector< std::array< int,6 > >::erase(std::vector< std::array< int,6 > >::iterator,std::vector< std::array< int,6 > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_6__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > >::size_type arg1 ;
  std::vector< std::array< int,6 > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::array< int,6 > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_int_array_6" "', argument " "1"" of type '" "std::vector< std::array< int,6 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< int,6 > >::size_type >(val1);
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_int_array_6" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_int_array_6" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::array< int,6 > > *)new std::vector< std::array< int,6 > >(arg1,(std::vector< std::array< int,6 > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_int_array_6(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_int_array_6", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_int_array_6__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_int_array_6__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_int_array_6__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::array< int,6 >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_int_array_6__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_int_array_6'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,6 > >::vector()\n"
    "    std::vector< std::array< int,6 > >::vector(std::vector< std::array< int,6 > > const &)\n"
    "    std::vector< std::array< int,6 > >::vector(std::vector< std::array< int,6 > >::size_type)\n"
    "    std::vector< std::array< int,6 > >::vector(std::vector< std::array< int,6 > >::size_type,std::vector< std::array< int,6 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_6_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_push_back" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_int_array_6_push_back" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_6_push_back" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::array< int,6 > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_front" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = (std::vector< std::array< int,6 > >::value_type *) &((std::vector< std::array< int,6 > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::array< int,6 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< int,6 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_back" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = (std::vector< std::array< int,6 > >::value_type *) &((std::vector< std::array< int,6 > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::array< int,6 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< int,6 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::size_type arg2 ;
  std::vector< std::array< int,6 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_6_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_assign" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6_assign" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::size_type >(val2);
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_6_assign" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_6_assign" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::array< int,6 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::size_type arg2 ;
  std::vector< std::array< int,6 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_resize" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6_resize" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::size_type >(val2);
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_6_resize" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_6_resize" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::array< int,6 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_6_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_int_array_6_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,6 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_6_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_6_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,6 > >::resize(std::vector< std::array< int,6 > >::size_type)\n"
    "    std::vector< std::array< int,6 > >::resize(std::vector< std::array< int,6 > >::size_type,std::vector< std::array< int,6 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::iterator arg2 ;
  std::vector< std::array< int,6 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::array< int,6 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_insert" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6_insert" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6_insert" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::iterator""'");
    }
  }
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_int_array_6_insert" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_6_insert" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::array< int,6 > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< int,6 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::iterator arg2 ;
  std::vector< std::array< int,6 > >::size_type arg3 ;
  std::vector< std::array< int,6 > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_insert" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6_insert" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_int_array_6_insert" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_int_array_6_insert" "', argument " "3"" of type '" "std::vector< std::array< int,6 > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< int,6 > >::size_type >(val3);
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_int_array_6_insert" "', argument " "4"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_int_array_6_insert" "', argument " "4"" of type '" "std::vector< std::array< int,6 > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_array_Sl_int_Sc_6_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< int,6 > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_int_array_6_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< int,6 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_int_array_6_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< int,6 > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< int,6 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_int_array_6_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_int_array_6_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< int,6 > >::insert(std::vector< std::array< int,6 > >::iterator,std::vector< std::array< int,6 > >::value_type const &)\n"
    "    std::vector< std::array< int,6 > >::insert(std::vector< std::array< int,6 > >::iterator,std::vector< std::array< int,6 > >::size_type,std::vector< std::array< int,6 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  std::vector< std::array< int,6 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_int_array_6_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_reserve" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_int_array_6_reserve" "', argument " "2"" of type '" "std::vector< std::array< int,6 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< int,6 > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_int_array_6_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_int_array_6_capacity" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  result = ((std::vector< std::array< int,6 > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_int_array_6(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< int,6 > > *arg1 = (std::vector< std::array< int,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_int_array_6" "', argument " "1"" of type '" "std::vector< std::array< int,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< int,6 > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_int_array_6_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_int_array_6_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_double_array_2_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_iterator" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___nonzero__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____nonzero__((std::vector< std::array< double,2 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___bool__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____bool__((std::vector< std::array< double,2 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___len__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____len__((std::vector< std::array< double,2 > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::difference_type arg2 ;
  std::vector< std::array< double,2 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_2___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___getslice__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2___getslice__" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_2___getslice__" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val3);
  try {
    result = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::difference_type arg2 ;
  std::vector< std::array< double,2 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___setslice__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2___setslice__" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_2___setslice__" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::difference_type arg2 ;
  std::vector< std::array< double,2 > >::difference_type arg3 ;
  std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___setslice__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2___setslice__" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_2___setslice__" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val3);
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_double_array_2___setslice__" "', argument " "4"" of type '" "std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_2___setslice__" "', argument " "4"" of type '" "std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_2___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double_array_2___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_double_array_2___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_2___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,2 > >::__setslice__(std::vector< std::array< double,2 > >::difference_type,std::vector< std::array< double,2 > >::difference_type)\n"
    "    std::vector< std::array< double,2 > >::__setslice__(std::vector< std::array< double,2 > >::difference_type,std::vector< std::array< double,2 > >::difference_type,std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::difference_type arg2 ;
  std::vector< std::array< double,2 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_2___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___delslice__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2___delslice__" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_2___delslice__" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___delitem__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2___delitem__" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val2);
  try {
    std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___getitem__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___delitem__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_2___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double_array_2___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_array_2___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_2___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,2 > >::__delitem__(std::vector< std::array< double,2 > >::difference_type)\n"
    "    std::vector< std::array< double,2 > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::array< double,2 > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___getitem__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2___getitem__" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val2);
  try {
    result = (std::vector< std::array< double,2 > >::value_type *) &std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____getitem____SWIG_1((std::vector< std::array< double,2 > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< double,2 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< double,2 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_2___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double_array_2___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_array_2___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_2___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,2 > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< double,2 > >::__getitem__(std::vector< std::array< double,2 > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::difference_type arg2 ;
  std::vector< std::array< double,2 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2___setitem__" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::difference_type >(val2);
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::array< double,2 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_2___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double_array_2___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_2___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,2 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_2___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_2___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,2 > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &)\n"
    "    std::vector< std::array< double,2 > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< double,2 > >::__setitem__(std::vector< std::array< double,2 > >::difference_type,std::vector< std::array< double,2 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_pop" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  try {
    result = std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< double,2 > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_2_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_append" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_array_2_append" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_2_append" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__append(arg1,(std::array< double,2 > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::array< double,2 > > *)new std::vector< std::array< double,2 > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::array< double,2 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_double_array_2" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_double_array_2" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::array< double,2 > > *)new std::vector< std::array< double,2 > >((std::vector< std::array< double,2 > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_empty" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = (bool)((std::vector< std::array< double,2 > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_size" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = ((std::vector< std::array< double,2 > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_2_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_swap" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_array_2_swap" "', argument " "2"" of type '" "std::vector< std::array< double,2 > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_2_swap" "', argument " "2"" of type '" "std::vector< std::array< double,2 > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_begin" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,2 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_end" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,2 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_rbegin" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,2 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_rend" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,2 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_clear" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::array< double,2 > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_get_allocator" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = ((std::vector< std::array< double,2 > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::array< double,2 > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__arrayT_double_2_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_2__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::array< double,2 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double_array_2" "', argument " "1"" of type '" "std::vector< std::array< double,2 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< double,2 > >::size_type >(val1);
  result = (std::vector< std::array< double,2 > > *)new std::vector< std::array< double,2 > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_pop_back" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_resize" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2_resize" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::array< double,2 > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_erase" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2_erase" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2_erase" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,2 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::iterator arg2 ;
  std::vector< std::array< double,2 > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::array< double,2 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_erase" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2_erase" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2_erase" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2_erase" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2_erase" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,2 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_2_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_double_array_2_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_double_array_2_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_2_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,2 > >::erase(std::vector< std::array< double,2 > >::iterator)\n"
    "    std::vector< std::array< double,2 > >::erase(std::vector< std::array< double,2 > >::iterator,std::vector< std::array< double,2 > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_2__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > >::size_type arg1 ;
  std::vector< std::array< double,2 > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::array< double,2 > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double_array_2" "', argument " "1"" of type '" "std::vector< std::array< double,2 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< double,2 > >::size_type >(val1);
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_double_array_2" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_double_array_2" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::array< double,2 > > *)new std::vector< std::array< double,2 > >(arg1,(std::vector< std::array< double,2 > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_double_array_2", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_double_array_2__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_double_array_2__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_double_array_2__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::array< double,2 >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_double_array_2__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_double_array_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,2 > >::vector()\n"
    "    std::vector< std::array< double,2 > >::vector(std::vector< std::array< double,2 > > const &)\n"
    "    std::vector< std::array< double,2 > >::vector(std::vector< std::array< double,2 > >::size_type)\n"
    "    std::vector< std::array< double,2 > >::vector(std::vector< std::array< double,2 > >::size_type,std::vector< std::array< double,2 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_2_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_push_back" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_array_2_push_back" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_2_push_back" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::array< double,2 > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_front" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = (std::vector< std::array< double,2 > >::value_type *) &((std::vector< std::array< double,2 > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::array< double,2 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< double,2 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_back" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = (std::vector< std::array< double,2 > >::value_type *) &((std::vector< std::array< double,2 > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::array< double,2 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< double,2 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::size_type arg2 ;
  std::vector< std::array< double,2 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_2_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_assign" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2_assign" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::size_type >(val2);
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_2_assign" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_2_assign" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::array< double,2 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::size_type arg2 ;
  std::vector< std::array< double,2 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_resize" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2_resize" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::size_type >(val2);
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_2_resize" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_2_resize" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::array< double,2 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_2_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_array_2_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,2 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_2_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_2_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,2 > >::resize(std::vector< std::array< double,2 > >::size_type)\n"
    "    std::vector< std::array< double,2 > >::resize(std::vector< std::array< double,2 > >::size_type,std::vector< std::array< double,2 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::iterator arg2 ;
  std::vector< std::array< double,2 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::array< double,2 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_insert" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2_insert" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2_insert" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::iterator""'");
    }
  }
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_2_insert" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_2_insert" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::array< double,2 > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,2 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::iterator arg2 ;
  std::vector< std::array< double,2 > >::size_type arg3 ;
  std::vector< std::array< double,2 > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_insert" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2_insert" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_2_insert" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_2_insert" "', argument " "3"" of type '" "std::vector< std::array< double,2 > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,2 > >::size_type >(val3);
  {
    std::array< double,2 > *ptr = (std::array< double,2 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_double_array_2_insert" "', argument " "4"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_2_insert" "', argument " "4"" of type '" "std::vector< std::array< double,2 > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< double,2 > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_2_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,2 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_2_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,2 > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< double,2 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_double_array_2_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_2_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,2 > >::insert(std::vector< std::array< double,2 > >::iterator,std::vector< std::array< double,2 > >::value_type const &)\n"
    "    std::vector< std::array< double,2 > >::insert(std::vector< std::array< double,2 > >::iterator,std::vector< std::array< double,2 > >::size_type,std::vector< std::array< double,2 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  std::vector< std::array< double,2 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_2_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_reserve" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_2_reserve" "', argument " "2"" of type '" "std::vector< std::array< double,2 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,2 > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_2_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_2_capacity" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  result = ((std::vector< std::array< double,2 > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_double_array_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,2 > > *arg1 = (std::vector< std::array< double,2 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_double_array_2" "', argument " "1"" of type '" "std::vector< std::array< double,2 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,2 > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_double_array_2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_double_array_2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_double_array_3_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_iterator" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___nonzero__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____nonzero__((std::vector< std::array< double,3 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___bool__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____bool__((std::vector< std::array< double,3 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,3 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___len__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____len__((std::vector< std::array< double,3 > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::difference_type arg2 ;
  std::vector< std::array< double,3 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_3___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___getslice__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3___getslice__" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_3___getslice__" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val3);
  try {
    result = (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *)std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::difference_type arg2 ;
  std::vector< std::array< double,3 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___setslice__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3___setslice__" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_3___setslice__" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::difference_type arg2 ;
  std::vector< std::array< double,3 > >::difference_type arg3 ;
  std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___setslice__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3___setslice__" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_3___setslice__" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val3);
  {
    std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *ptr = (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_double_array_3___setslice__" "', argument " "4"" of type '" "std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_3___setslice__" "', argument " "4"" of type '" "std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_3___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double_array_3___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_double_array_3___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_3___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,3 > >::__setslice__(std::vector< std::array< double,3 > >::difference_type,std::vector< std::array< double,3 > >::difference_type)\n"
    "    std::vector< std::array< double,3 > >::__setslice__(std::vector< std::array< double,3 > >::difference_type,std::vector< std::array< double,3 > >::difference_type,std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::difference_type arg2 ;
  std::vector< std::array< double,3 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_3___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___delslice__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3___delslice__" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_3___delslice__" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___delitem__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3___delitem__" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val2);
  try {
    std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___getitem__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *)std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___setitem__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *ptr = (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_3___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_3___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___setitem__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___delitem__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_3___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double_array_3___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_array_3___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_3___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,3 > >::__delitem__(std::vector< std::array< double,3 > >::difference_type)\n"
    "    std::vector< std::array< double,3 > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::array< double,3 > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___getitem__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3___getitem__" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val2);
  try {
    result = (std::vector< std::array< double,3 > >::value_type *) &std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____getitem____SWIG_1((std::vector< std::array< double,3 > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< double,3 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< double,3 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_3___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double_array_3___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_array_3___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_3___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,3 > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< double,3 > >::__getitem__(std::vector< std::array< double,3 > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::difference_type arg2 ;
  std::vector< std::array< double,3 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3___setitem__" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3___setitem__" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::difference_type >(val2);
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_3___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_3___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::array< double,3 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_3___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double_array_3___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_3___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,3 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_3___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_3___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,3 > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &)\n"
    "    std::vector< std::array< double,3 > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< double,3 > >::__setitem__(std::vector< std::array< double,3 > >::difference_type,std::vector< std::array< double,3 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,3 > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_pop" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  try {
    result = std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< double,3 > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_3_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_append" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_array_3_append" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_3_append" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__append(arg1,(std::array< double,3 > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_3__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::array< double,3 > > *)new std::vector< std::array< double,3 > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_3__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::array< double,3 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *ptr = (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_double_array_3" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_double_array_3" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::array< double,3 > > *)new std::vector< std::array< double,3 > >((std::vector< std::array< double,3 > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_empty" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = (bool)((std::vector< std::array< double,3 > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,3 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_size" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = ((std::vector< std::array< double,3 > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_3_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_swap" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_array_3_swap" "', argument " "2"" of type '" "std::vector< std::array< double,3 > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_3_swap" "', argument " "2"" of type '" "std::vector< std::array< double,3 > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,3 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_begin" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,3 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,3 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_end" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,3 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,3 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_rbegin" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,3 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,3 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_rend" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,3 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_clear" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::array< double,3 > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_get_allocator" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = ((std::vector< std::array< double,3 > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::array< double,3 > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__arrayT_double_3_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_3__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::array< double,3 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double_array_3" "', argument " "1"" of type '" "std::vector< std::array< double,3 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< double,3 > >::size_type >(val1);
  result = (std::vector< std::array< double,3 > > *)new std::vector< std::array< double,3 > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_pop_back" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_resize" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3_resize" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::array< double,3 > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_erase" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3_erase" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3_erase" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,3 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::iterator arg2 ;
  std::vector< std::array< double,3 > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::array< double,3 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_erase" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3_erase" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3_erase" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3_erase" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3_erase" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,3 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_3_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_double_array_3_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_double_array_3_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_3_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,3 > >::erase(std::vector< std::array< double,3 > >::iterator)\n"
    "    std::vector< std::array< double,3 > >::erase(std::vector< std::array< double,3 > >::iterator,std::vector< std::array< double,3 > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_3__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > >::size_type arg1 ;
  std::vector< std::array< double,3 > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::array< double,3 > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double_array_3" "', argument " "1"" of type '" "std::vector< std::array< double,3 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< double,3 > >::size_type >(val1);
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_double_array_3" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_double_array_3" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::array< double,3 > > *)new std::vector< std::array< double,3 > >(arg1,(std::vector< std::array< double,3 > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_3(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_double_array_3", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_double_array_3__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_double_array_3__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_double_array_3__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::array< double,3 >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_double_array_3__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_double_array_3'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,3 > >::vector()\n"
    "    std::vector< std::array< double,3 > >::vector(std::vector< std::array< double,3 > > const &)\n"
    "    std::vector< std::array< double,3 > >::vector(std::vector< std::array< double,3 > >::size_type)\n"
    "    std::vector< std::array< double,3 > >::vector(std::vector< std::array< double,3 > >::size_type,std::vector< std::array< double,3 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_3_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_push_back" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_array_3_push_back" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_3_push_back" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::array< double,3 > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,3 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_front" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = (std::vector< std::array< double,3 > >::value_type *) &((std::vector< std::array< double,3 > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::array< double,3 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< double,3 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,3 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_back" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = (std::vector< std::array< double,3 > >::value_type *) &((std::vector< std::array< double,3 > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::array< double,3 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< double,3 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::size_type arg2 ;
  std::vector< std::array< double,3 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_3_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_assign" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3_assign" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::size_type >(val2);
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_3_assign" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_3_assign" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::array< double,3 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::size_type arg2 ;
  std::vector< std::array< double,3 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_resize" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3_resize" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::size_type >(val2);
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_3_resize" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_3_resize" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::array< double,3 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_3_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_array_3_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,3 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_3_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_3_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,3 > >::resize(std::vector< std::array< double,3 > >::size_type)\n"
    "    std::vector< std::array< double,3 > >::resize(std::vector< std::array< double,3 > >::size_type,std::vector< std::array< double,3 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::iterator arg2 ;
  std::vector< std::array< double,3 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::array< double,3 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_insert" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3_insert" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3_insert" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::iterator""'");
    }
  }
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_3_insert" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_3_insert" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::array< double,3 > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,3 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::iterator arg2 ;
  std::vector< std::array< double,3 > >::size_type arg3 ;
  std::vector< std::array< double,3 > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_insert" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3_insert" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_3_insert" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_3_insert" "', argument " "3"" of type '" "std::vector< std::array< double,3 > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,3 > >::size_type >(val3);
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_double_array_3_insert" "', argument " "4"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_3_insert" "', argument " "4"" of type '" "std::vector< std::array< double,3 > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_array_Sl_double_Sc_3_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< double,3 > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_3_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,3 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_3_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,3 > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< double,3 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_double_array_3_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_3_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,3 > >::insert(std::vector< std::array< double,3 > >::iterator,std::vector< std::array< double,3 > >::value_type const &)\n"
    "    std::vector< std::array< double,3 > >::insert(std::vector< std::array< double,3 > >::iterator,std::vector< std::array< double,3 > >::size_type,std::vector< std::array< double,3 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  std::vector< std::array< double,3 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_3_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_reserve" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_3_reserve" "', argument " "2"" of type '" "std::vector< std::array< double,3 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,3 > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_3_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,3 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_3_capacity" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  result = ((std::vector< std::array< double,3 > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_double_array_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,3 > > *arg1 = (std::vector< std::array< double,3 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_double_array_3" "', argument " "1"" of type '" "std::vector< std::array< double,3 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,3 > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_double_array_3_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_double_array_3_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_double_array_6_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_iterator" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___nonzero__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____nonzero__((std::vector< std::array< double,6 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___bool__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = (bool)std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____bool__((std::vector< std::array< double,6 > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___len__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____len__((std::vector< std::array< double,6 > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::difference_type arg2 ;
  std::vector< std::array< double,6 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_6___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___getslice__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6___getslice__" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_6___getslice__" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val3);
  try {
    result = (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *)std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::difference_type arg2 ;
  std::vector< std::array< double,6 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___setslice__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6___setslice__" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_6___setslice__" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::difference_type arg2 ;
  std::vector< std::array< double,6 > >::difference_type arg3 ;
  std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___setslice__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6___setslice__" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_6___setslice__" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val3);
  {
    std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *ptr = (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_double_array_6___setslice__" "', argument " "4"" of type '" "std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_6___setslice__" "', argument " "4"" of type '" "std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_6___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_double_array_6___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_double_array_6___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_6___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,6 > >::__setslice__(std::vector< std::array< double,6 > >::difference_type,std::vector< std::array< double,6 > >::difference_type)\n"
    "    std::vector< std::array< double,6 > >::__setslice__(std::vector< std::array< double,6 > >::difference_type,std::vector< std::array< double,6 > >::difference_type,std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::difference_type arg2 ;
  std::vector< std::array< double,6 > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_6___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___delslice__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6___delslice__" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_6___delslice__" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val3);
  try {
    std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___delitem__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6___delitem__" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val2);
  try {
    std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___getitem__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *)std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___setitem__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *ptr = (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_6___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_6___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___setitem__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___delitem__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_6___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double_array_6___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_array_6___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_6___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,6 > >::__delitem__(std::vector< std::array< double,6 > >::difference_type)\n"
    "    std::vector< std::array< double,6 > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::array< double,6 > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___getitem__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6___getitem__" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val2);
  try {
    result = (std::vector< std::array< double,6 > >::value_type *) &std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____getitem____SWIG_1((std::vector< std::array< double,6 > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< double,6 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< double,6 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_6___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double_array_6___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_array_6___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_6___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,6 > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< double,6 > >::__getitem__(std::vector< std::array< double,6 > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::difference_type arg2 ;
  std::vector< std::array< double,6 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6___setitem__" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6___setitem__" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::difference_type >(val2);
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_6___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_6___setitem__" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::array< double,6 > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_6___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_double_array_6___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_6___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,6 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_6___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_6___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,6 > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &)\n"
    "    std::vector< std::array< double,6 > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::array< double,6 > >::__setitem__(std::vector< std::array< double,6 > >::difference_type,std::vector< std::array< double,6 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_pop" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  try {
    result = std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::array< double,6 > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_6_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_append" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_array_6_append" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_6_append" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__append(arg1,(std::array< double,6 > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_6__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::array< double,6 > > *)new std::vector< std::array< double,6 > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_6__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::array< double,6 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *ptr = (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_double_array_6" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_double_array_6" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::array< double,6 > > *)new std::vector< std::array< double,6 > >((std::vector< std::array< double,6 > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_empty" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = (bool)((std::vector< std::array< double,6 > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_size" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = ((std::vector< std::array< double,6 > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_6_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_swap" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_array_6_swap" "', argument " "2"" of type '" "std::vector< std::array< double,6 > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_6_swap" "', argument " "2"" of type '" "std::vector< std::array< double,6 > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_begin" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,6 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_end" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,6 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_rbegin" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,6 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_rend" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,6 > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_clear" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::array< double,6 > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_get_allocator" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = ((std::vector< std::array< double,6 > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::array< double,6 > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__arrayT_double_6_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_6__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::array< double,6 > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double_array_6" "', argument " "1"" of type '" "std::vector< std::array< double,6 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< double,6 > >::size_type >(val1);
  result = (std::vector< std::array< double,6 > > *)new std::vector< std::array< double,6 > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_pop_back" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_resize" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6_resize" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::array< double,6 > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_erase" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6_erase" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6_erase" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,6 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::iterator arg2 ;
  std::vector< std::array< double,6 > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::array< double,6 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_erase" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6_erase" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6_erase" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6_erase" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6_erase" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,6 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_6_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_double_array_6_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_double_array_6_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_6_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,6 > >::erase(std::vector< std::array< double,6 > >::iterator)\n"
    "    std::vector< std::array< double,6 > >::erase(std::vector< std::array< double,6 > >::iterator,std::vector< std::array< double,6 > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_6__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > >::size_type arg1 ;
  std::vector< std::array< double,6 > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::array< double,6 > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_double_array_6" "', argument " "1"" of type '" "std::vector< std::array< double,6 > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::array< double,6 > >::size_type >(val1);
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_double_array_6" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_double_array_6" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::array< double,6 > > *)new std::vector< std::array< double,6 > >(arg1,(std::vector< std::array< double,6 > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_double_array_6(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_double_array_6", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_double_array_6__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_double_array_6__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_double_array_6__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::array< double,6 >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_double_array_6__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_double_array_6'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,6 > >::vector()\n"
    "    std::vector< std::array< double,6 > >::vector(std::vector< std::array< double,6 > > const &)\n"
    "    std::vector< std::array< double,6 > >::vector(std::vector< std::array< double,6 > >::size_type)\n"
    "    std::vector< std::array< double,6 > >::vector(std::vector< std::array< double,6 > >::size_type,std::vector< std::array< double,6 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_6_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_push_back" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_double_array_6_push_back" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_6_push_back" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::array< double,6 > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_front" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = (std::vector< std::array< double,6 > >::value_type *) &((std::vector< std::array< double,6 > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::array< double,6 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< double,6 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_back" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = (std::vector< std::array< double,6 > >::value_type *) &((std::vector< std::array< double,6 > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::array< double,6 > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::array< double,6 > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::size_type arg2 ;
  std::vector< std::array< double,6 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_6_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_assign" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6_assign" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::size_type >(val2);
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_6_assign" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_6_assign" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::array< double,6 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::size_type arg2 ;
  std::vector< std::array< double,6 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_resize" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6_resize" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::size_type >(val2);
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_6_resize" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_6_resize" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::array< double,6 > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_6_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_double_array_6_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,6 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_6_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_6_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,6 > >::resize(std::vector< std::array< double,6 > >::size_type)\n"
    "    std::vector< std::array< double,6 > >::resize(std::vector< std::array< double,6 > >::size_type,std::vector< std::array< double,6 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::iterator arg2 ;
  std::vector< std::array< double,6 > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::array< double,6 > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_insert" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6_insert" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6_insert" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::iterator""'");
    }
  }
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_double_array_6_insert" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_6_insert" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::array< double,6 > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::array< double,6 > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::iterator arg2 ;
  std::vector< std::array< double,6 > >::size_type arg3 ;
  std::vector< std::array< double,6 > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_insert" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6_insert" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_double_array_6_insert" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_double_array_6_insert" "', argument " "3"" of type '" "std::vector< std::array< double,6 > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::array< double,6 > >::size_type >(val3);
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_double_array_6_insert" "', argument " "4"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_double_array_6_insert" "', argument " "4"" of type '" "std::vector< std::array< double,6 > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_array_Sl_double_Sc_6_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::array< double,6 > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_double_array_6_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::array< double,6 >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_double_array_6_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::array< double,6 > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::array< double,6 >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_double_array_6_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_double_array_6_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::array< double,6 > >::insert(std::vector< std::array< double,6 > >::iterator,std::vector< std::array< double,6 > >::value_type const &)\n"
    "    std::vector< std::array< double,6 > >::insert(std::vector< std::array< double,6 > >::iterator,std::vector< std::array< double,6 > >::size_type,std::vector< std::array< double,6 > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  std::vector< std::array< double,6 > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_double_array_6_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_reserve" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_double_array_6_reserve" "', argument " "2"" of type '" "std::vector< std::array< double,6 > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::array< double,6 > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_double_array_6_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_double_array_6_capacity" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  result = ((std::vector< std::array< double,6 > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_double_array_6(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::array< double,6 > > *arg1 = (std::vector< std::array< double,6 > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_double_array_6" "', argument " "1"" of type '" "std::vector< std::array< double,6 > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::array< double,6 > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_double_array_6_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_double_array_6_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_iterator" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____nonzero__((std::vector< std::vector< std::array< double,2 > > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___bool__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____bool__((std::vector< std::vector< std::array< double,2 > > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 > > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___len__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____len__((std::vector< std::vector< std::array< double,2 > > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg2 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_double_array_2___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *)std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg2 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_double_array_2___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg2 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg3 ;
  std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_double_array_2___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val3);
  {
    std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *ptr = (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_vector_double_array_2___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_array_2___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_vector_double_array_2___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_vector_double_array_2___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double_array_2___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< double,2 > > >::__setslice__(std::vector< std::vector< std::array< double,2 > > >::difference_type,std::vector< std::vector< std::array< double,2 > > >::difference_type)\n"
    "    std::vector< std::vector< std::array< double,2 > > >::__setslice__(std::vector< std::vector< std::array< double,2 > > >::difference_type,std::vector< std::vector< std::array< double,2 > > >::difference_type,std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg2 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_double_array_2___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *)std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *ptr = (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_double_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_double_array_2___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_double_array_2___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double_array_2___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< double,2 > > >::__delitem__(std::vector< std::vector< std::array< double,2 > > >::difference_type)\n"
    "    std::vector< std::vector< std::array< double,2 > > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< std::array< double,2 > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____getitem____SWIG_1((std::vector< std::vector< std::array< double,2 > > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< std::array< double,2 > > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_double_array_2___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_double_array_2___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double_array_2___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< double,2 > > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< std::array< double,2 > > >::__getitem__(std::vector< std::vector< std::array< double,2 > > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::difference_type arg2 ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::difference_type >(val2);
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_double_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_double_array_2___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_double_array_2___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_double_array_2___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double_array_2___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< double,2 > > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &)\n"
    "    std::vector< std::vector< std::array< double,2 > > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< std::array< double,2 > > >::__setitem__(std::vector< std::vector< std::array< double,2 > > >::difference_type,std::vector< std::vector< std::array< double,2 > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 > > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_pop" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_append" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_double_array_2_append" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_array_2_append" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__append(arg1,(std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_double_array_2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::vector< std::array< double,2 > > > *)new std::vector< std::vector< std::array< double,2 > > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_double_array_2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< std::array< double,2 > > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *ptr = (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_vector_double_array_2" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_vector_double_array_2" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< std::array< double,2 > > > *)new std::vector< std::vector< std::array< double,2 > > >((std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_empty" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = (bool)((std::vector< std::vector< std::array< double,2 > > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 > > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_size" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = ((std::vector< std::vector< std::array< double,2 > > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_swap" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_double_array_2_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_array_2_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 > > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_begin" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< double,2 > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 > > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_end" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< double,2 > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 > > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< double,2 > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 > > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_rend" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< double,2 > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_clear" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = ((std::vector< std::vector< std::array< double,2 > > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< std::array< double,2 > > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_double_array_2__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< std::array< double,2 > > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_vector_double_array_2" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::array< double,2 > > >::size_type >(val1);
  result = (std::vector< std::vector< std::array< double,2 > > > *)new std::vector< std::vector< std::array< double,2 > > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< std::array< double,2 > > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< double,2 > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::iterator arg2 ;
  std::vector< std::vector< std::array< double,2 > > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< std::array< double,2 > > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< double,2 > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_vector_double_array_2_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_vector_double_array_2_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double_array_2_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< double,2 > > >::erase(std::vector< std::vector< std::array< double,2 > > >::iterator)\n"
    "    std::vector< std::vector< std::array< double,2 > > >::erase(std::vector< std::vector< std::array< double,2 > > >::iterator,std::vector< std::vector< std::array< double,2 > > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_double_array_2__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > >::size_type arg1 ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< std::array< double,2 > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_vector_double_array_2" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::array< double,2 > > >::size_type >(val1);
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_vector_double_array_2" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_vector_double_array_2" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< std::array< double,2 > > > *)new std::vector< std::vector< std::array< double,2 > > >(arg1,(std::vector< std::vector< std::array< double,2 > > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_double_array_2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_vector_double_array_2", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_vector_double_array_2__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_vector_double_array_2__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_vector_double_array_2__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_vector_double_array_2__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_vector_double_array_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< double,2 > > >::vector()\n"
    "    std::vector< std::vector< std::array< double,2 > > >::vector(std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > const &)\n"
    "    std::vector< std::vector< std::array< double,2 > > >::vector(std::vector< std::vector< std::array< double,2 > > >::size_type)\n"
    "    std::vector< std::vector< std::array< double,2 > > >::vector(std::vector< std::vector< std::array< double,2 > > >::size_type,std::vector< std::vector< std::array< double,2 > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_push_back" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_double_array_2_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_array_2_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< std::array< double,2 > > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_front" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = (std::vector< std::vector< std::array< double,2 > > >::value_type *) &((std::vector< std::vector< std::array< double,2 > > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< std::array< double,2 > > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_back" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = (std::vector< std::vector< std::array< double,2 > > >::value_type *) &((std::vector< std::vector< std::array< double,2 > > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< std::array< double,2 > > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::size_type arg2 ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_assign" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2_assign" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::size_type >(val2);
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_double_array_2_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_array_2_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< std::array< double,2 > > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::size_type arg2 ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::size_type >(val2);
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_double_array_2_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_array_2_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< std::array< double,2 > > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_double_array_2_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_double_array_2_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double_array_2_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< double,2 > > >::resize(std::vector< std::vector< std::array< double,2 > > >::size_type)\n"
    "    std::vector< std::vector< std::array< double,2 > > >::resize(std::vector< std::vector< std::array< double,2 > > >::size_type,std::vector< std::vector< std::array< double,2 > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::iterator arg2 ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< std::array< double,2 > > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::iterator""'");
    }
  }
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_double_array_2_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_array_2_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< double,2 > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::iterator arg2 ;
  std::vector< std::vector< std::array< double,2 > > >::size_type arg3 ;
  std::vector< std::vector< std::array< double,2 > > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_array_2_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_double_array_2_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::array< double,2 > > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::array< double,2 > > >::size_type >(val3);
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_vector_double_array_2_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_array_2_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::array< double,2 > > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_std_array_Sl_double_Sc_2_Sg__Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_double_array_2_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< double,2 > > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_vector_double_array_2_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double_array_2_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< double,2 > > >::insert(std::vector< std::vector< std::array< double,2 > > >::iterator,std::vector< std::vector< std::array< double,2 > > >::value_type const &)\n"
    "    std::vector< std::vector< std::array< double,2 > > >::insert(std::vector< std::vector< std::array< double,2 > > >::iterator,std::vector< std::vector< std::array< double,2 > > >::size_type,std::vector< std::vector< std::array< double,2 > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  std::vector< std::vector< std::array< double,2 > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_array_2_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_reserve" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_array_2_reserve" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< double,2 > > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_array_2_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 > > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_array_2_capacity" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  result = ((std::vector< std::vector< std::array< double,2 > > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_vector_double_array_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< double,2 > > > *arg1 = (std::vector< std::vector< std::array< double,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_vector_double_array_2" "', argument " "1"" of type '" "std::vector< std::vector< std::array< double,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< double,2 > > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_vector_double_array_2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_vector_double_array_2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_iterator" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____nonzero__((std::vector< std::vector< std::array< int,2 > > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___bool__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____bool__((std::vector< std::vector< std::array< int,2 > > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< int,2 > > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___len__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____len__((std::vector< std::vector< std::array< int,2 > > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg2 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_int_array_2___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *)std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg2 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_int_array_2___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg2 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg3 ;
  std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_int_array_2___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val3);
  {
    std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *ptr = (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_vector_int_array_2___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_array_2___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_vector_int_array_2___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_vector_int_array_2___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int_array_2___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< int,2 > > >::__setslice__(std::vector< std::vector< std::array< int,2 > > >::difference_type,std::vector< std::vector< std::array< int,2 > > >::difference_type)\n"
    "    std::vector< std::vector< std::array< int,2 > > >::__setslice__(std::vector< std::vector< std::array< int,2 > > >::difference_type,std::vector< std::vector< std::array< int,2 > > >::difference_type,std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg2 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_int_array_2___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *)std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *ptr = (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_int_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_int_array_2___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_int_array_2___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int_array_2___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< int,2 > > >::__delitem__(std::vector< std::vector< std::array< int,2 > > >::difference_type)\n"
    "    std::vector< std::vector< std::array< int,2 > > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< std::array< int,2 > > >::value_type *) &std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____getitem____SWIG_1((std::vector< std::vector< std::array< int,2 > > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< std::array< int,2 > > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_int_array_2___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_int_array_2___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int_array_2___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< int,2 > > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< std::array< int,2 > > >::__getitem__(std::vector< std::vector< std::array< int,2 > > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::difference_type arg2 ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::difference_type >(val2);
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_int_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_array_2___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_int_array_2___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_int_array_2___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_int_array_2___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int_array_2___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< int,2 > > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &)\n"
    "    std::vector< std::vector< std::array< int,2 > > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< std::array< int,2 > > >::__setitem__(std::vector< std::vector< std::array< int,2 > > >::difference_type,std::vector< std::vector< std::array< int,2 > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< int,2 > > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_pop" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_append" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_int_array_2_append" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_array_2_append" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__append(arg1,(std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_int_array_2__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::vector< std::array< int,2 > > > *)new std::vector< std::vector< std::array< int,2 > > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_int_array_2__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< std::array< int,2 > > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *ptr = (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_vector_int_array_2" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_vector_int_array_2" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< std::array< int,2 > > > *)new std::vector< std::vector< std::array< int,2 > > >((std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_empty" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = (bool)((std::vector< std::vector< std::array< int,2 > > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< int,2 > > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_size" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = ((std::vector< std::vector< std::array< int,2 > > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_swap" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_int_array_2_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_array_2_swap" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< int,2 > > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_begin" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< int,2 > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< int,2 > > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_end" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< int,2 > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< int,2 > > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< int,2 > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< int,2 > > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_rend" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< int,2 > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_clear" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = ((std::vector< std::vector< std::array< int,2 > > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< std::array< int,2 > > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_int_array_2__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< std::array< int,2 > > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_vector_int_array_2" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::array< int,2 > > >::size_type >(val1);
  result = (std::vector< std::vector< std::array< int,2 > > > *)new std::vector< std::vector< std::array< int,2 > > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< std::array< int,2 > > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< int,2 > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::iterator arg2 ;
  std::vector< std::vector< std::array< int,2 > > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< std::array< int,2 > > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_erase" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2_erase" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2_erase" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< int,2 > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_vector_int_array_2_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_vector_int_array_2_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int_array_2_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< int,2 > > >::erase(std::vector< std::vector< std::array< int,2 > > >::iterator)\n"
    "    std::vector< std::vector< std::array< int,2 > > >::erase(std::vector< std::vector< std::array< int,2 > > >::iterator,std::vector< std::vector< std::array< int,2 > > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_int_array_2__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > >::size_type arg1 ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< std::array< int,2 > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_vector_int_array_2" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< std::array< int,2 > > >::size_type >(val1);
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_vector_int_array_2" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_vector_int_array_2" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< std::array< int,2 > > > *)new std::vector< std::vector< std::array< int,2 > > >(arg1,(std::vector< std::vector< std::array< int,2 > > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_int_array_2(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_vector_int_array_2", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_vector_int_array_2__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_vector_int_array_2__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_vector_int_array_2__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_vector_int_array_2__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_vector_int_array_2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< int,2 > > >::vector()\n"
    "    std::vector< std::vector< std::array< int,2 > > >::vector(std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > const &)\n"
    "    std::vector< std::vector< std::array< int,2 > > >::vector(std::vector< std::vector< std::array< int,2 > > >::size_type)\n"
    "    std::vector< std::vector< std::array< int,2 > > >::vector(std::vector< std::vector< std::array< int,2 > > >::size_type,std::vector< std::vector< std::array< int,2 > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_push_back" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_int_array_2_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_array_2_push_back" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< std::array< int,2 > > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_front" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = (std::vector< std::vector< std::array< int,2 > > >::value_type *) &((std::vector< std::vector< std::array< int,2 > > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< std::array< int,2 > > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_back" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = (std::vector< std::vector< std::array< int,2 > > >::value_type *) &((std::vector< std::vector< std::array< int,2 > > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< std::array< int,2 > > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::size_type arg2 ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_assign" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2_assign" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::size_type >(val2);
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_int_array_2_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_array_2_assign" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< std::array< int,2 > > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::size_type arg2 ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_resize" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2_resize" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::size_type >(val2);
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_int_array_2_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_array_2_resize" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< std::array< int,2 > > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_int_array_2_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_int_array_2_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int_array_2_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< int,2 > > >::resize(std::vector< std::vector< std::array< int,2 > > >::size_type)\n"
    "    std::vector< std::vector< std::array< int,2 > > >::resize(std::vector< std::vector< std::array< int,2 > > >::size_type,std::vector< std::vector< std::array< int,2 > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::iterator arg2 ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< std::array< int,2 > > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::iterator""'");
    }
  }
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_int_array_2_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_array_2_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< std::array< int,2 > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::iterator arg2 ;
  std::vector< std::vector< std::array< int,2 > > >::size_type arg3 ;
  std::vector< std::vector< std::array< int,2 > > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_insert" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_array_2_insert" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_int_array_2_insert" "', argument " "3"" of type '" "std::vector< std::vector< std::array< int,2 > > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< std::array< int,2 > > >::size_type >(val3);
  {
    std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *ptr = (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_vector_int_array_2_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_array_2_insert" "', argument " "4"" of type '" "std::vector< std::vector< std::array< int,2 > > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_std_array_Sl_int_Sc_2_Sg__Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_int_array_2_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< std::array< int,2 > > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_vector_int_array_2_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int_array_2_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< std::array< int,2 > > >::insert(std::vector< std::vector< std::array< int,2 > > >::iterator,std::vector< std::vector< std::array< int,2 > > >::value_type const &)\n"
    "    std::vector< std::vector< std::array< int,2 > > >::insert(std::vector< std::vector< std::array< int,2 > > >::iterator,std::vector< std::vector< std::array< int,2 > > >::size_type,std::vector< std::vector< std::array< int,2 > > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  std::vector< std::vector< std::array< int,2 > > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_array_2_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_reserve" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_array_2_reserve" "', argument " "2"" of type '" "std::vector< std::vector< std::array< int,2 > > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< std::array< int,2 > > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_array_2_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< int,2 > > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_array_2_capacity" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  result = ((std::vector< std::vector< std::array< int,2 > > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_vector_int_array_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< std::array< int,2 > > > *arg1 = (std::vector< std::vector< std::array< int,2 > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_vector_int_array_2" "', argument " "1"" of type '" "std::vector< std::vector< std::array< int,2 > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< std::array< int,2 > > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_vector_int_array_2_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_vector_int_array_2_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_vector_int_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_iterator" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_int_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____nonzero__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___bool__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_int_Sg__Sg____bool__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___len__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_int_Sg__Sg____len__((std::vector< std::vector< int > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_int___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_int___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_int___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  {
    std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_vector_int___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_vector_int___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_vector_int___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__setslice__(std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int > >::difference_type)\n"
    "    std::vector< std::vector< int > >::__setslice__(std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_int___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_int___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_int___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_int___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__delitem__(std::vector< std::vector< int > >::difference_type)\n"
    "    std::vector< std::vector< int > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< int > >::value_type *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< int > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< int > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_int___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_int___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< int > >::__getitem__(std::vector< std::vector< int > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::difference_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< int > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::difference_type >(val2);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_int___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_int_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::vector< int,std::allocator< int > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_int___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_int___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_int___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)\n"
    "    std::vector< std::vector< int > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< int > >::__setitem__(std::vector< std::vector< int > >::difference_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< int > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_pop" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_append" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_int_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_append" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__append(arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_int__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_int__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int,std::allocator< int > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *ptr = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_vector_int" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_vector_int" "', argument " "1"" of type '" "std::vector< std::vector< int,std::allocator< int > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int,std::allocator< int > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_empty" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (bool)((std::vector< std::vector< int > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_size" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int,std::allocator< int > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_swap" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_int_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_swap" "', argument " "2"" of type '" "std::vector< std::vector< int,std::allocator< int > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< int,std::allocator< int > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_begin" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< int > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_end" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< int > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< int > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_rend" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_clear" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< int,std::allocator< int > > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< int > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_int__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_vector_int" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< int > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_erase" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< int > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_erase" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_erase" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_erase" "', argument " "3"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_erase" "', argument " "3"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_vector_int_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_vector_int_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::erase(std::vector< std::vector< int > >::iterator)\n"
    "    std::vector< std::vector< int > >::erase(std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_int__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > >::size_type arg1 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< int > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_vector_int" "', argument " "1"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< int > >::size_type >(val1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_vector_int" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_vector_int" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1,(std::vector< std::vector< int > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_int(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_vector_int", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_vector_int__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_vector_int__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_vector_int__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< int,std::allocator< int > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_vector_int__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_vector_int'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::vector()\n"
    "    std::vector< std::vector< int > >::vector(std::vector< std::vector< int,std::allocator< int > > > const &)\n"
    "    std::vector< std::vector< int > >::vector(std::vector< std::vector< int > >::size_type)\n"
    "    std::vector< std::vector< int > >::vector(std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_push_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_int_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_push_back" "', argument " "2"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< int > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_front" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< int > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< int > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_back" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = (std::vector< std::vector< int > >::value_type *) &((std::vector< std::vector< int > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< int > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_assign" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_assign" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_int_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_assign" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_resize" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_resize" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_int_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_resize" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< int > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_int_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_int_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::resize(std::vector< std::vector< int > >::size_type)\n"
    "    std::vector< std::vector< int > >::resize(std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< int > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_insert" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_int_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< int,std::allocator< int > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< int > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::iterator arg2 ;
  std::vector< std::vector< int > >::size_type arg3 ;
  std::vector< std::vector< int > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_insert" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_int_insert" "', argument " "2"" of type '" "std::vector< std::vector< int > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_int_insert" "', argument " "3"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< int > >::size_type >(val3);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_vector_int_insert" "', argument " "4"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_int_insert" "', argument " "4"" of type '" "std::vector< std::vector< int > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_int_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< int,std::allocator< int > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_int_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_int_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< int > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_vector_int_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_int_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< int > >::insert(std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::value_type const &)\n"
    "    std::vector< std::vector< int > >::insert(std::vector< std::vector< int > >::iterator,std::vector< std::vector< int > >::size_type,std::vector< std::vector< int > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  std::vector< std::vector< int > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_int_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_reserve" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_int_reserve" "', argument " "2"" of type '" "std::vector< std::vector< int > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< int > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_int_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< int > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_int_capacity" "', argument " "1"" of type '" "std::vector< std::vector< int > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  result = ((std::vector< std::vector< int > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_vector_int(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_vector_int" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_vector_int_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_vector_int_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_vector_vector_double_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_iterator" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_double_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_double_Sg__Sg____nonzero__((std::vector< std::vector< double > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___bool__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_double_Sg__Sg____bool__((std::vector< std::vector< double > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___len__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg____len__((std::vector< std::vector< double > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_double___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_double___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_double___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_vector_double___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_vector_vector_double___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_vector_double___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__setslice__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::difference_type)\n"
    "    std::vector< std::vector< double > >::__setslice__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_double___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double___getitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_double___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double___setitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  SWIGPY_SLICEOBJECT *arg2 = (SWIGPY_SLICEOBJECT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double___delitem__" "', argument " "2"" of type '" "SWIGPY_SLICEOBJECT *""'");
    }
    arg2 = (SWIGPY_SLICEOBJECT *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_double___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_double___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__delitem__(std::vector< std::vector< double > >::difference_type)\n"
    "    std::vector< std::vector< double > >::__delitem__(SWIGPY_SLICEOBJECT *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< double > > const *)arg1,SWIG_STD_MOVE(arg2));
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< double > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_double___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_double___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__getitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< double > >::__getitem__(std::vector< std::vector< double > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::difference_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< double > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::difference_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_double___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_vector_vector_double___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_double___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_double___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::__setitem__(SWIGPY_SLICEOBJECT *,std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)\n"
    "    std::vector< std::vector< double > >::__setitem__(SWIGPY_SLICEOBJECT *)\n"
    "    std::vector< std::vector< double > >::__setitem__(std::vector< std::vector< double > >::difference_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_pop" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_append" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_double_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_append" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__append(arg1,(std::vector< double,std::allocator< double > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_double__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_double__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double,std::allocator< double > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< double > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *ptr = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vector_vector_double" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_vector_double" "', argument " "1"" of type '" "std::vector< std::vector< double,std::allocator< double > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double,std::allocator< double > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_empty" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_size" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double,std::allocator< double > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_swap" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_double_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_swap" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_begin" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_end" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_rend" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_clear" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< double,std::allocator< double > > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< double > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_double__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_vector_double" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< double > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_erase" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< double > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_erase" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_erase" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_erase" "', argument " "3"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_erase" "', argument " "3"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_vector_vector_double_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_vector_vector_double_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::erase(std::vector< std::vector< double > >::iterator)\n"
    "    std::vector< std::vector< double > >::erase(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_double__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > >::size_type arg1 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< double > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vector_vector_double" "', argument " "1"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< double > >::size_type >(val1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vector_vector_double" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vector_vector_double" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1,(std::vector< std::vector< double > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_vector_vector_double(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_vector_vector_double", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_vector_vector_double__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_vector_vector_double__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_vector_vector_double__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< double,std::allocator< double > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_vector_vector_double__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vector_vector_double'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::vector()\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double,std::allocator< double > > > const &)\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double > >::size_type)\n"
    "    std::vector< std::vector< double > >::vector(std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_push_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vector_vector_double_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_push_back" "', argument " "2"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< double > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_front" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< double > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_back" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = (std::vector< std::vector< double > >::value_type *) &((std::vector< std::vector< double > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< double > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_assign" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_assign" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_double_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_assign" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_resize" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_resize" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_double_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_resize" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< double > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_vector_vector_double_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_double_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::resize(std::vector< std::vector< double > >::size_type)\n"
    "    std::vector< std::vector< double > >::resize(std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< double > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_insert" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vector_vector_double_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(std::vector< double,std::allocator< double > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< double > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::iterator arg2 ;
  std::vector< std::vector< double > >::size_type arg3 ;
  std::vector< std::vector< double > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_insert" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vector_vector_double_insert" "', argument " "2"" of type '" "std::vector< std::vector< double > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vector_vector_double_insert" "', argument " "3"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< double > >::size_type >(val3);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vector_vector_double_insert" "', argument " "4"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vector_vector_double_insert" "', argument " "4"" of type '" "std::vector< std::vector< double > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_double_Sg__Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< double,std::allocator< double > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "vector_vector_double_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_vector_vector_double_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< double > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_vector_vector_double_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vector_vector_double_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< double > >::insert(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::value_type const &)\n"
    "    std::vector< std::vector< double > >::insert(std::vector< std::vector< double > >::iterator,std::vector< std::vector< double > >::size_type,std::vector< std::vector< double > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "vector_vector_double_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_reserve" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vector_vector_double_reserve" "', argument " "2"" of type '" "std::vector< std::vector< double > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< double > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vector_vector_double_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< double > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vector_vector_double_capacity" "', argument " "1"" of type '" "std::vector< std::vector< double > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_vector_vector_double(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vector_vector_double" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *vector_vector_double_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *vector_vector_double_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_map_string_bool__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< std::string,bool > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_string_bool" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_string_bool" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  result = (std::map< std::string,bool > *)new std::map< std::string,bool >((std::less< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_iterator" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_bool_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool___nonzero__" "', argument " "1"" of type '" "std::map< std::string,bool > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_bool_Sg____nonzero__((std::map< std::string,bool > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool___bool__" "', argument " "1"" of type '" "std::map< std::string,bool > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_bool_Sg____bool__((std::map< std::string,bool > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,bool >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool___len__" "', argument " "1"" of type '" "std::map< std::string,bool > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = std_map_Sl_std_string_Sc_bool_Sg____len__((std::map< std::string,bool > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,bool >::mapped_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_bool___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool___getitem__" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool___getitem__" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool___getitem__" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (std::map< std::string,bool >::mapped_type *) &std_map_Sl_std_string_Sc_bool_Sg____getitem__(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool___delitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_bool___delitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool___delitem__" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool___delitem__" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool___delitem__" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_bool_Sg____delitem__(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_has_key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_bool_has_key", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_has_key" "', argument " "1"" of type '" "std::map< std::string,bool > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool_has_key" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool_has_key" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_bool_Sg__has_key((std::map< std::string,bool > const *)arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_keys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_keys" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_bool_Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_values(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_values" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_bool_Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_items(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_items" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_bool_Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool___contains__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_bool___contains__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool___contains__" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool___contains__" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool___contains__" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_bool_Sg____contains__(arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_key_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_key_iterator" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_bool_Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_value_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_value_iterator" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_bool_Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool___setitem__" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool___setitem__" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool___setitem__" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_map_Sl_std_string_Sc_bool_Sg____setitem____SWIG_0(arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  std::map< std::string,bool >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::map< std::string,bool >::mapped_type temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool___setitem__" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool___setitem__" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool___setitem__" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "map_string_bool___setitem__" "', argument " "3"" of type '" "std::map< std::string,bool >::mapped_type""'");
  } 
  temp3 = static_cast< std::map< std::string,bool >::mapped_type >(val3);
  arg3 = &temp3;
  try {
    std_map_Sl_std_string_Sc_bool_Sg____setitem____SWIG_1(arg1,(std::string const &)*arg2,(bool const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "map_string_bool___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_map_string_bool___setitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_map_string_bool___setitem____SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'map_string_bool___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,bool >::__setitem__(std::map< std::string,bool >::key_type const &)\n"
    "    std::map< std::string,bool >::__setitem__(std::map< std::string,bool >::key_type const &,std::map< std::string,bool >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_string_bool_asdict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_asdict" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_bool_Sg__asdict(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_string_bool__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::map< std::string,bool > *)new std::map< std::string,bool >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_string_bool__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::map< std::string,bool > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > > *ptr = (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_string_bool" "', argument " "1"" of type '" "std::map< std::string,bool > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_string_bool" "', argument " "1"" of type '" "std::map< std::string,bool > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< std::string,bool > *)new std::map< std::string,bool >((std::map< std::string,bool > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_string_bool(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_map_string_bool", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_map_string_bool__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_map_string_bool__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_map_string_bool__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_map_string_bool'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,bool >::map(std::less< std::string > const &)\n"
    "    std::map< std::string,bool >::map()\n"
    "    std::map< std::string,bool >::map(std::map< std::string,bool > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_string_bool_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_empty" "', argument " "1"" of type '" "std::map< std::string,bool > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (bool)((std::map< std::string,bool > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,bool >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_size" "', argument " "1"" of type '" "std::map< std::string,bool > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = ((std::map< std::string,bool > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_bool_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_swap" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool_swap" "', argument " "2"" of type '" "std::map< std::string,bool > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool_swap" "', argument " "2"" of type '" "std::map< std::string,bool > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,bool > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,bool >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_begin" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,bool >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,bool >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_end" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,bool >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,bool >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_rbegin" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,bool >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,bool >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_rend" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,bool >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_clear" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< std::string const,bool > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_get_allocator" "', argument " "1"" of type '" "std::map< std::string,bool > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  result = ((std::map< std::string,bool > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< std::string,bool >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_bool_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::map< std::string,bool >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_erase" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool_erase" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool_erase" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::map< std::string,bool >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,bool >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_bool_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_count" "', argument " "1"" of type '" "std::map< std::string,bool > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool_count" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool_count" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::map< std::string,bool > const *)arg1)->count((std::map< std::string,bool >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_erase" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_bool_erase" "', argument " "2"" of type '" "std::map< std::string,bool >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,bool >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,bool >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_bool_erase" "', argument " "2"" of type '" "std::map< std::string,bool >::iterator""'");
    }
  }
  std_map_Sl_std_string_Sc_bool_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_erase__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::iterator arg2 ;
  std::map< std::string,bool >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_erase" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_bool_erase" "', argument " "2"" of type '" "std::map< std::string,bool >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,bool >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,bool >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_bool_erase" "', argument " "2"" of type '" "std::map< std::string,bool >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_bool_erase" "', argument " "3"" of type '" "std::map< std::string,bool >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,bool >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,bool >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_string_bool_erase" "', argument " "3"" of type '" "std::map< std::string,bool >::iterator""'");
    }
  }
  std_map_Sl_std_string_Sc_bool_Sg__erase__SWIG_2(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "map_string_bool_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,bool >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_map_string_bool_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_map_string_bool_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,bool >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,bool >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_map_string_bool_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'map_string_bool_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,bool >::erase(std::map< std::string,bool >::key_type const &)\n"
    "    std::map< std::string,bool >::erase(std::map< std::string,bool >::iterator)\n"
    "    std::map< std::string,bool >::erase(std::map< std::string,bool >::iterator,std::map< std::string,bool >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_string_bool_find(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,bool >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_bool_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_find" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool_find" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool_find" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::map< std::string,bool >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,bool >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_lower_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,bool >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_bool_lower_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_lower_bound" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool_lower_bound" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool_lower_bound" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::map< std::string,bool >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,bool >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_string_bool_upper_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  std::map< std::string,bool >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,bool >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_string_bool_upper_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_string_bool_upper_bound" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_string_bool_upper_bound" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_string_bool_upper_bound" "', argument " "2"" of type '" "std::map< std::string,bool >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::map< std::string,bool >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,bool >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_map_string_bool(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,bool > *arg1 = (std::map< std::string,bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_map_string_bool" "', argument " "1"" of type '" "std::map< std::string,bool > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,bool > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *map_string_bool_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *map_string_bool_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_map_int_vector_string__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< int > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_int_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_int_vector_string" "', argument " "1"" of type '" "std::less< int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_int_vector_string" "', argument " "1"" of type '" "std::less< int > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< int > * >(argp1);
  result = (std::map< int,std::vector< std::string > > *)new std::map< int,std::vector< std::string > >((std::less< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_iterator" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string___nonzero__" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (bool)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____nonzero__((std::map< int,std::vector< std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string___bool__" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (bool)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____bool__((std::map< int,std::vector< std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::vector< std::string > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string___len__" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____len__((std::map< int,std::vector< std::string > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::vector< std::string > >::mapped_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_vector_string___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string___getitem__" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string___getitem__" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  try {
    result = (std::map< int,std::vector< std::string > >::mapped_type *) &std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____getitem__(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string___delitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_vector_string___delitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string___delitem__" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string___delitem__" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  try {
    std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____delitem__(arg1,(int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_has_key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_vector_string_has_key", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_has_key" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string_has_key" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  result = (bool)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__has_key((std::map< int,std::vector< std::string > > const *)arg1,(int const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_keys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_keys" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (PyObject *)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_values(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_values" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (PyObject *)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_items(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_items" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (PyObject *)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string___contains__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_vector_string___contains__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string___contains__" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string___contains__" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  result = (bool)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____contains__(arg1,(int const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_key_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_key_iterator" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_value_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_value_iterator" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string___setitem__" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string___setitem__" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____setitem____SWIG_0(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  std::map< int,std::vector< std::string > >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string___setitem__" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string___setitem__" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "map_int_vector_string___setitem__" "', argument " "3"" of type '" "std::map< int,std::vector< std::string > >::mapped_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_int_vector_string___setitem__" "', argument " "3"" of type '" "std::map< int,std::vector< std::string > >::mapped_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg____setitem____SWIG_1(arg1,(int const &)*arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "map_int_vector_string___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_map_int_vector_string___setitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_map_int_vector_string___setitem____SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'map_int_vector_string___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< int,std::vector< std::string > >::__setitem__(std::map< int,std::vector< std::string > >::key_type const &)\n"
    "    std::map< int,std::vector< std::string > >::__setitem__(std::map< int,std::vector< std::string > >::key_type const &,std::map< int,std::vector< std::string > >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_asdict(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_asdict" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (PyObject *)std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__asdict(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_int_vector_string__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::map< int,std::vector< std::string > > *)new std::map< int,std::vector< std::string > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_int_vector_string__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string,std::allocator< std::string > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::map< int,std::vector< std::string > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > > *ptr = (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_map_int_vector_string" "', argument " "1"" of type '" "std::map< int,std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_map_int_vector_string" "', argument " "1"" of type '" "std::map< int,std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< int,std::vector< std::string > > *)new std::map< int,std::vector< std::string > >((std::map< int,std::vector< std::string,std::allocator< std::string > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_map_int_vector_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_map_int_vector_string", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_map_int_vector_string__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_int_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_map_int_vector_string__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_map_int_vector_string__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_map_int_vector_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< int,std::vector< std::string > >::map(std::less< int > const &)\n"
    "    std::map< int,std::vector< std::string > >::map()\n"
    "    std::map< int,std::vector< std::string > >::map(std::map< int,std::vector< std::string,std::allocator< std::string > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_empty" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (bool)((std::map< int,std::vector< std::string > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::vector< std::string > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_size" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = ((std::map< int,std::vector< std::string > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string,std::allocator< std::string > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_vector_string_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_swap" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "map_int_vector_string_swap" "', argument " "2"" of type '" "std::map< int,std::vector< std::string,std::allocator< std::string > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "map_int_vector_string_swap" "', argument " "2"" of type '" "std::map< int,std::vector< std::string,std::allocator< std::string > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< int,std::vector< std::string,std::allocator< std::string > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::vector< std::string > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_begin" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::vector< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::vector< std::string > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_end" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::vector< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::vector< std::string > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_rbegin" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::vector< std::string > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< int,std::vector< std::string > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_rend" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::vector< std::string > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_clear" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_get_allocator" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  result = ((std::map< int,std::vector< std::string > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< int,std::vector< std::string > >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::map< int,std::vector< std::string > >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_erase" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string_erase" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->erase((std::map< int,std::vector< std::string > >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::vector< std::string > >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_vector_string_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_count" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string_count" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  result = ((std::map< int,std::vector< std::string > > const *)arg1)->count((std::map< int,std::vector< std::string > >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_erase" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_vector_string_erase" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< int,std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::vector< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_vector_string_erase" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::iterator""'");
    }
  }
  std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_erase__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::iterator arg2 ;
  std::map< int,std::vector< std::string > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_erase" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_vector_string_erase" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< int,std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::vector< std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_vector_string_erase" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_vector_string_erase" "', argument " "3"" of type '" "std::map< int,std::vector< std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< int,std::vector< std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::vector< std::string > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "map_int_vector_string_erase" "', argument " "3"" of type '" "std::map< int,std::vector< std::string > >::iterator""'");
    }
  }
  std_map_Sl_int_Sc_std_vector_Sl_std_string_Sg__Sg__erase__SWIG_2(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "map_int_vector_string_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::vector< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_map_int_vector_string_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_map_int_vector_string_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::vector< std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< int,std::vector< std::string > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_map_int_vector_string_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'map_int_vector_string_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< int,std::vector< std::string > >::erase(std::map< int,std::vector< std::string > >::key_type const &)\n"
    "    std::map< int,std::vector< std::string > >::erase(std::map< int,std::vector< std::string > >::iterator)\n"
    "    std::map< int,std::vector< std::string > >::erase(std::map< int,std::vector< std::string > >::iterator,std::map< int,std::vector< std::string > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_find(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::vector< std::string > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_vector_string_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_find" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string_find" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->find((std::map< int,std::vector< std::string > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::vector< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_lower_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::vector< std::string > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_vector_string_lower_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_lower_bound" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string_lower_bound" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->lower_bound((std::map< int,std::vector< std::string > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::vector< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_map_int_vector_string_upper_bound(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  std::map< int,std::vector< std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< int,std::vector< std::string > >::key_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::map< int,std::vector< std::string > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "map_int_vector_string_upper_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "map_int_vector_string_upper_bound" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "map_int_vector_string_upper_bound" "', argument " "2"" of type '" "std::map< int,std::vector< std::string > >::key_type""'");
  } 
  temp2 = static_cast< std::map< int,std::vector< std::string > >::key_type >(val2);
  arg2 = &temp2;
  result = (arg1)->upper_bound((std::map< int,std::vector< std::string > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< int,std::vector< std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_map_int_vector_string(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::map< int,std::vector< std::string > > *arg1 = (std::map< int,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_map_int_vector_string" "', argument " "1"" of type '" "std::map< int,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< int,std::vector< std::string > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *map_int_vector_string_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *map_int_vector_string_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_metadata_ptr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::shared_ptr< sensei::MeshMetadata > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_metadata_ptr", 0, 0, 0)) SWIG_fail;
  result = (std::shared_ptr< sensei::MeshMetadata > *)new std::shared_ptr< sensei::MeshMetadata >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_metadata_ptr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::shared_ptr< sensei::MeshMetadata > *arg1 = (std::shared_ptr< sensei::MeshMetadata > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_metadata_ptr" "', argument " "1"" of type '" "std::shared_ptr< sensei::MeshMetadata > *""'"); 
  }
  arg1 = reinterpret_cast< std::shared_ptr< sensei::MeshMetadata > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *metadata_ptr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *metadata_ptr_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Profiler_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Profiler_Initialize", 0, 0, 0)) SWIG_fail;
  result = (int)sensei::Profiler::Initialize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_Finalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Profiler_Finalize", 0, 0, 0)) SWIG_fail;
  result = (int)sensei::Profiler::Finalize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_Flush(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Profiler_Flush", 0, 0, 0)) SWIG_fail;
  result = (int)sensei::Profiler::Flush();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_SetCommunicator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MPI_Comm arg1 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Profiler_SetCommunicator" "', argument " "1"" of type '" "MPI_Comm""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  sensei::Profiler::SetCommunicator(SWIG_STD_MOVE(arg1));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_SetTimerLogFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_SetTimerLogFile" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Profiler_SetTimerLogFile" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  sensei::Profiler::SetTimerLogFile((std::string const &)*arg1);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_SetMemProfLogFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_SetMemProfLogFile" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Profiler_SetMemProfLogFile" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  sensei::Profiler::SetMemProfLogFile((std::string const &)*arg1);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_SetMemProfInterval(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Profiler_SetMemProfInterval" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  sensei::Profiler::SetMemProfInterval(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_Enable__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Profiler_Enable" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  sensei::Profiler::Enable(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_Enable__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  sensei::Profiler::Enable();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_Enable(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Profiler_Enable", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_Profiler_Enable__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_Profiler_Enable__SWIG_0(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Profiler_Enable'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::Profiler::Enable(int)\n"
    "    sensei::Profiler::Enable()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Profiler_Disable(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!SWIG_Python_UnpackTuple(args, "Profiler_Disable", 0, 0, 0)) SWIG_fail;
  sensei::Profiler::Disable();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_Enabled(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "Profiler_Enabled", 0, 0, 0)) SWIG_fail;
  result = (bool)sensei::Profiler::Enabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_StartEvent__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long long arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_StartEvent" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Profiler_StartEvent" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (int)sensei::Profiler::StartEvent((char const *)arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_StartEvent__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_StartEvent" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (int)sensei::Profiler::StartEvent((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_StartEvent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Profiler_StartEvent", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Profiler_StartEvent__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Profiler_StartEvent__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Profiler_StartEvent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::Profiler::StartEvent(char const *,long long)\n"
    "    sensei::Profiler::StartEvent(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Profiler_EndEvent__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  long long arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_EndEvent" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_long_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Profiler_EndEvent" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = static_cast< long long >(val2);
  result = (int)sensei::Profiler::EndEvent((char const *)arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_EndEvent__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_EndEvent" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (int)sensei::Profiler::EndEvent((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_EndEvent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Profiler_EndEvent", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Profiler_EndEvent__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Profiler_EndEvent__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Profiler_EndEvent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::Profiler::EndEvent(char const *,long long)\n"
    "    sensei::Profiler::EndEvent(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Profiler_WriteCStdio(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  std::string *arg3 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Profiler_WriteCStdio", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_WriteCStdio" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Profiler_WriteCStdio" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Profiler_WriteCStdio" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Profiler_WriteCStdio" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)sensei::Profiler::WriteCStdio((char const *)arg1,(char const *)arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_WriteMpiIo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MPI_Comm arg1 ;
  char *arg2 = (char *) 0 ;
  std::string *arg3 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Profiler_WriteMpiIo", 3, 3, swig_obj)) SWIG_fail;
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Profiler_WriteMpiIo" "', argument " "1"" of type '" "MPI_Comm""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Profiler_WriteMpiIo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Profiler_WriteMpiIo" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Profiler_WriteMpiIo" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)sensei::Profiler::WriteMpiIo(SWIG_STD_MOVE(arg1),(char const *)arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_Validate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Profiler_Validate", 0, 0, 0)) SWIG_fail;
  result = (int)sensei::Profiler::Validate();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Profiler_ToStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Profiler_ToStream" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Profiler_ToStream" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  result = (int)sensei::Profiler::ToStream(*arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Profiler(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Profiler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Profiler", 0, 0, 0)) SWIG_fail;
  result = (sensei::Profiler *)new sensei::Profiler();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__Profiler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Profiler(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Profiler *arg1 = (sensei::Profiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Profiler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Profiler" "', argument " "1"" of type '" "sensei::Profiler *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Profiler * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Profiler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__Profiler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Profiler_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BinaryStream__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (sensei::BinaryStream *)new sensei::BinaryStream();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__BinaryStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BinaryStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BinaryStream" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinaryStream__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  sensei::BinaryStream *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_sensei__BinaryStream,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinaryStream" "', argument " "1"" of type '" "sensei::BinaryStream const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinaryStream" "', argument " "1"" of type '" "sensei::BinaryStream const &""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  result = (sensei::BinaryStream *)new sensei::BinaryStream((sensei::BinaryStream const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__BinaryStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinaryStream(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_BinaryStream", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_BinaryStream__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_sensei__BinaryStream, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BinaryStream__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_BinaryStream'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::BinaryStream::BinaryStream()\n"
    "    sensei::BinaryStream::BinaryStream(sensei::BinaryStream const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BinaryStream___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream___nonzero__" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  result = (bool)(arg1)->operator bool();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_Clear" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Resize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BinaryStream_Resize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_Resize" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryStream_Resize" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  (arg1)->Resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Grow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BinaryStream_Grow", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_Grow" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryStream_Grow" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  (arg1)->Grow(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_GetData__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_GetData" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  result = (unsigned char *)(arg1)->GetData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_GetData__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_GetData" "', argument " "1"" of type '" "sensei::BinaryStream const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  result = (unsigned char *)((sensei::BinaryStream const *)arg1)->GetData();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_GetData(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BinaryStream_GetData", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__BinaryStream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BinaryStream_GetData__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__BinaryStream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BinaryStream_GetData__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BinaryStream_GetData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::BinaryStream::GetData()\n"
    "    sensei::BinaryStream::GetData() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_Size" "', argument " "1"" of type '" "sensei::BinaryStream const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  result = (unsigned long)((sensei::BinaryStream const *)arg1)->Size();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_Capacity" "', argument " "1"" of type '" "sensei::BinaryStream const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  result = (unsigned long)((sensei::BinaryStream const *)arg1)->Capacity();
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_SetReadPos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BinaryStream_SetReadPos", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_SetReadPos" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryStream_SetReadPos" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  (arg1)->SetReadPos(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_SetWritePos(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  unsigned long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BinaryStream_SetWritePos", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_SetWritePos" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryStream_SetWritePos" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  (arg1)->SetWritePos(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  sensei::BinaryStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BinaryStream_Swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_Swap" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_sensei__BinaryStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryStream_Swap" "', argument " "2"" of type '" "sensei::BinaryStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BinaryStream_Swap" "', argument " "2"" of type '" "sensei::BinaryStream &""'"); 
  }
  arg2 = reinterpret_cast< sensei::BinaryStream * >(argp2);
  (arg1)->Swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Pack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BinaryStream_Pack", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_Pack" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryStream_Pack" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BinaryStream_Pack" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->Pack((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Unpack(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BinaryStream_Unpack", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_Unpack" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinaryStream_Unpack" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BinaryStream_Unpack" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  (arg1)->Unpack(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Broadcast__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_Broadcast" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinaryStream_Broadcast" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (int)(arg1)->Broadcast(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Broadcast__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::BinaryStream *arg1 = (sensei::BinaryStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__BinaryStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinaryStream_Broadcast" "', argument " "1"" of type '" "sensei::BinaryStream *""'"); 
  }
  arg1 = reinterpret_cast< sensei::BinaryStream * >(argp1);
  result = (int)(arg1)->Broadcast();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinaryStream_Broadcast(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BinaryStream_Broadcast", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__BinaryStream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BinaryStream_Broadcast__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__BinaryStream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BinaryStream_Broadcast__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BinaryStream_Broadcast'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::BinaryStream::Broadcast(int)\n"
    "    sensei::BinaryStream::Broadcast()\n");
  return 0;
}


SWIGINTERN PyObject *BinaryStream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__BinaryStream, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BinaryStream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MeshMetadataFlags__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (sensei::MeshMetadataFlags *)new sensei::MeshMetadataFlags();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeshMetadataFlags__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  long long arg1 ;
  long long val1 ;
  int ecode1 = 0 ;
  sensei::MeshMetadataFlags *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long_SS_long(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MeshMetadataFlags" "', argument " "1"" of type '" "long long""'");
  } 
  arg1 = static_cast< long long >(val1);
  result = (sensei::MeshMetadataFlags *)new sensei::MeshMetadataFlags(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeshMetadataFlags(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MeshMetadataFlags", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_MeshMetadataFlags__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsVal_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MeshMetadataFlags__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MeshMetadataFlags'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::MeshMetadataFlags::MeshMetadataFlags()\n"
    "    sensei::MeshMetadataFlags::MeshMetadataFlags(long long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_SetAll(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_SetAll" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->SetAll();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_ClearAll(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_ClearAll" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->ClearAll();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_SetBlockDecomp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_SetBlockDecomp" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->SetBlockDecomp();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_ClearBlockDecomp(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_ClearBlockDecomp" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->ClearBlockDecomp();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_BlockDecompSet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_BlockDecompSet" "', argument " "1"" of type '" "sensei::MeshMetadataFlags const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  result = (bool)((sensei::MeshMetadataFlags const *)arg1)->BlockDecompSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_SetBlockSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_SetBlockSize" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->SetBlockSize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_ClearBlockSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_ClearBlockSize" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->ClearBlockSize();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_BlockSizeSet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_BlockSizeSet" "', argument " "1"" of type '" "sensei::MeshMetadataFlags const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  result = (bool)((sensei::MeshMetadataFlags const *)arg1)->BlockSizeSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_SetBlockExtents(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_SetBlockExtents" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->SetBlockExtents();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_ClearBlockExtents(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_ClearBlockExtents" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->ClearBlockExtents();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_BlockExtentsSet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_BlockExtentsSet" "', argument " "1"" of type '" "sensei::MeshMetadataFlags const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  result = (bool)((sensei::MeshMetadataFlags const *)arg1)->BlockExtentsSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_SetBlockBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_SetBlockBounds" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->SetBlockBounds();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_ClearBlockBounds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_ClearBlockBounds" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->ClearBlockBounds();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_BlockBoundsSet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_BlockBoundsSet" "', argument " "1"" of type '" "sensei::MeshMetadataFlags const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  result = (bool)((sensei::MeshMetadataFlags const *)arg1)->BlockBoundsSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_SetBlockArrayRange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_SetBlockArrayRange" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->SetBlockArrayRange();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_ClearBlockArrayRange(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_ClearBlockArrayRange" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  (arg1)->ClearBlockArrayRange();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_BlockArrayRangeSet(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_BlockArrayRangeSet" "', argument " "1"" of type '" "sensei::MeshMetadataFlags const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  result = (bool)((sensei::MeshMetadataFlags const *)arg1)->BlockArrayRangeSet();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_ToStream__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  sensei::BinaryStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_ToStream" "', argument " "1"" of type '" "sensei::MeshMetadataFlags const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_sensei__BinaryStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadataFlags_ToStream" "', argument " "2"" of type '" "sensei::BinaryStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadataFlags_ToStream" "', argument " "2"" of type '" "sensei::BinaryStream &""'"); 
  }
  arg2 = reinterpret_cast< sensei::BinaryStream * >(argp2);
  result = (int)((sensei::MeshMetadataFlags const *)arg1)->ToStream(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_FromStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  sensei::BinaryStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadataFlags_FromStream", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_FromStream" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_sensei__BinaryStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadataFlags_FromStream" "', argument " "2"" of type '" "sensei::BinaryStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadataFlags_FromStream" "', argument " "2"" of type '" "sensei::BinaryStream &""'"); 
  }
  arg2 = reinterpret_cast< sensei::BinaryStream * >(argp2);
  result = (int)(arg1)->FromStream(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_ToStream__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags_ToStream" "', argument " "1"" of type '" "sensei::MeshMetadataFlags const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadataFlags_ToStream" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadataFlags_ToStream" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  result = (int)((sensei::MeshMetadataFlags const *)arg1)->ToStream(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags_ToStream(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MeshMetadataFlags_ToStream", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__MeshMetadataFlags, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_sensei__BinaryStream, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeshMetadataFlags_ToStream__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__MeshMetadataFlags, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeshMetadataFlags_ToStream__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MeshMetadataFlags_ToStream'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::MeshMetadataFlags::ToStream(sensei::BinaryStream &) const\n"
    "    sensei::MeshMetadataFlags::ToStream(ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MeshMetadataFlags___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadataFlags___str__" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  result = (PyObject *)sensei_MeshMetadataFlags___str__(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MeshMetadataFlags(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags *arg1 = (sensei::MeshMetadataFlags *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeshMetadataFlags" "', argument " "1"" of type '" "sensei::MeshMetadataFlags *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeshMetadataFlags_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MeshMetadataFlags_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MeshMetadata_New__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = sensei::MeshMetadata::New();
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_New__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::MeshMetadataFlags arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_sensei__MeshMetadataFlags,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_New" "', argument " "1"" of type '" "sensei::MeshMetadataFlags const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_New" "', argument " "1"" of type '" "sensei::MeshMetadataFlags const""'");
    } else {
      sensei::MeshMetadataFlags * temp = reinterpret_cast< sensei::MeshMetadataFlags * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = sensei::MeshMetadata::New(SWIG_STD_MOVE(arg1));
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_New(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MeshMetadata_New", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_MeshMetadata_New__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MeshMetadata_New__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MeshMetadata_New'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::MeshMetadata::New()\n"
    "    sensei::MeshMetadata::New(sensei::MeshMetadataFlags const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NewCopy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::MeshMetadataPtr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NewCopy" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (arg1)->NewCopy();
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ToStream__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  sensei::BinaryStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata const > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ToStream" "', argument " "1"" of type '" "sensei::MeshMetadata const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_sensei__BinaryStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_ToStream" "', argument " "2"" of type '" "sensei::BinaryStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_ToStream" "', argument " "2"" of type '" "sensei::BinaryStream &""'"); 
  }
  arg2 = reinterpret_cast< sensei::BinaryStream * >(argp2);
  result = (int)((sensei::MeshMetadata const *)arg1)->ToStream(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_FromStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  sensei::BinaryStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_FromStream", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_FromStream" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_sensei__BinaryStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_FromStream" "', argument " "2"" of type '" "sensei::BinaryStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_FromStream" "', argument " "2"" of type '" "sensei::BinaryStream &""'"); 
  }
  arg2 = reinterpret_cast< sensei::BinaryStream * >(argp2);
  result = (int)(arg1)->FromStream(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ToStream__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata const > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ToStream" "', argument " "1"" of type '" "sensei::MeshMetadata const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_ToStream" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_ToStream" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  result = (int)((sensei::MeshMetadata const *)arg1)->ToStream(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ToStream(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MeshMetadata_ToStream", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_sensei__BinaryStream, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeshMetadata_ToStream__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_ostream, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeshMetadata_ToStream__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MeshMetadata_ToStream'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::MeshMetadata::ToStream(sensei::BinaryStream &) const\n"
    "    sensei::MeshMetadata::ToStream(ostream &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_Validate__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  MPI_Comm arg2 ;
  sensei::MeshMetadataFlags *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_Validate" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MeshMetadata_Validate" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_sensei__MeshMetadataFlags,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeshMetadata_Validate" "', argument " "3"" of type '" "sensei::MeshMetadataFlags const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_Validate" "', argument " "3"" of type '" "sensei::MeshMetadataFlags const &""'"); 
  }
  arg3 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp3);
  result = (int)(arg1)->Validate(arg2,(sensei::MeshMetadataFlags const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_Validate__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  MPI_Comm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_Validate" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MeshMetadata_Validate" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)(arg1)->Validate(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_Validate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "MeshMetadata_Validate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_MPI_Comm(argv[1], (MPI_Comm**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MeshMetadata_Validate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_MPI_Comm(argv[1], (MPI_Comm**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MeshMetadata_Validate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'MeshMetadata_Validate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::MeshMetadata::Validate(MPI_Comm,sensei::MeshMetadataFlags const &)\n"
    "    sensei::MeshMetadata::Validate(MPI_Comm)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_GlobalizeView(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  MPI_Comm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_GlobalizeView", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_GlobalizeView" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MeshMetadata_GlobalizeView" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)(arg1)->GlobalizeView(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ClearBlockInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ClearBlockInfo" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(arg1)->ClearBlockInfo();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_CopyBlockInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  sensei::MeshMetadataPtr *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  sensei::MeshMetadataPtr tempshared2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_CopyBlockInfo", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_CopyBlockInfo" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_CopyBlockInfo" "', argument " "2"" of type '" "sensei::MeshMetadataPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp2);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp2) : &tempshared2;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MeshMetadata_CopyBlockInfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (int)(arg1)->CopyBlockInfo((sensei::MeshMetadataPtr const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ClearArrayInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ClearArrayInfo" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(arg1)->ClearArrayInfo();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_CopyArrayInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  sensei::MeshMetadataPtr *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  sensei::MeshMetadataPtr tempshared2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_CopyArrayInfo", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_CopyArrayInfo" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_CopyArrayInfo" "', argument " "2"" of type '" "sensei::MeshMetadataPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp2);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp2) : &tempshared2;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MeshMetadata_CopyArrayInfo" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_CopyArrayInfo" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)(arg1)->CopyArrayInfo((sensei::MeshMetadataPtr const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_GlobalView_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_GlobalView_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_GlobalView_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_GlobalView_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->GlobalView = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_GlobalView_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_GlobalView_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (bool) ((arg1)->GlobalView);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_MeshName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_MeshName_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_MeshName_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_MeshName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_MeshName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->MeshName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_MeshName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_MeshName_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::string *) & ((arg1)->MeshName);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_MeshType_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_MeshType_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_MeshType_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_MeshType_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->MeshType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_MeshType_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_MeshType_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->MeshType);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockType_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlockType_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockType_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_BlockType_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->BlockType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockType_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockType_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->BlockType);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumBlocks_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_NumBlocks_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumBlocks_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_NumBlocks_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->NumBlocks = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumBlocks_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumBlocks_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->NumBlocks);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumBlocksLocal_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_NumBlocksLocal_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumBlocksLocal_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_NumBlocksLocal_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_NumBlocksLocal_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->NumBlocksLocal = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumBlocksLocal_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumBlocksLocal_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< int,std::allocator< int > > *) & ((arg1)->NumBlocksLocal);
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_Extent_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::array< int,6 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_Extent_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_Extent_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::array< int,6 > *ptr = (std::array< int,6 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_Extent_set" "', argument " "2"" of type '" "std::array< int,6 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_Extent_set" "', argument " "2"" of type '" "std::array< int,6 > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Extent = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_Extent_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,6 > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_Extent_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::array< int,6 > *) & ((arg1)->Extent);
  resultobj = swig::from(static_cast< std::array< int,6 > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_Bounds_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::array< double,6 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_Bounds_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_Bounds_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::array< double,6 > *ptr = (std::array< double,6 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_Bounds_set" "', argument " "2"" of type '" "std::array< double,6 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_Bounds_set" "', argument " "2"" of type '" "std::array< double,6 > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->Bounds = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_Bounds_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< double,6 > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_Bounds_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::array< double,6 > *) & ((arg1)->Bounds);
  resultobj = swig::from(static_cast< std::array< double,6 > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_CoordinateType_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_CoordinateType_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_CoordinateType_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_CoordinateType_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->CoordinateType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_CoordinateType_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_CoordinateType_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->CoordinateType);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumPoints_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_NumPoints_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumPoints_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_NumPoints_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->NumPoints = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumPoints_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumPoints_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (long) ((arg1)->NumPoints);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumCells_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_NumCells_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumCells_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_NumCells_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->NumCells = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumCells_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumCells_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (long) ((arg1)->NumCells);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_CellArraySize_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_CellArraySize_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_CellArraySize_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_CellArraySize_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->CellArraySize = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_CellArraySize_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_CellArraySize_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (long) ((arg1)->CellArraySize);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_CellArrayType_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_CellArrayType_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_CellArrayType_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_CellArrayType_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->CellArrayType = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_CellArrayType_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_CellArrayType_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->CellArrayType);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumArrays_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_NumArrays_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumArrays_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_NumArrays_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->NumArrays = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumArrays_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumArrays_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->NumArrays);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumGhostCells_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_NumGhostCells_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumGhostCells_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_NumGhostCells_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->NumGhostCells = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumGhostCells_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumGhostCells_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->NumGhostCells);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumGhostNodes_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_NumGhostNodes_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumGhostNodes_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_NumGhostNodes_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->NumGhostNodes = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumGhostNodes_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumGhostNodes_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->NumGhostNodes);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumLevels_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_NumLevels_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumLevels_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_NumLevels_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->NumLevels = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_NumLevels_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_NumLevels_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->NumLevels);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_StaticMesh_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_StaticMesh_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_StaticMesh_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshMetadata_StaticMesh_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->StaticMesh = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_StaticMesh_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_StaticMesh_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int) ((arg1)->StaticMesh);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ArrayName_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_ArrayName_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ArrayName_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_ArrayName_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_ArrayName_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ArrayName = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ArrayName_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ArrayName_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< std::string,std::allocator< std::string > > *) & ((arg1)->ArrayName);
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ArrayCentering_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_ArrayCentering_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ArrayCentering_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_ArrayCentering_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_ArrayCentering_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ArrayCentering = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ArrayCentering_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ArrayCentering_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< int,std::allocator< int > > *) & ((arg1)->ArrayCentering);
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ArrayComponents_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_ArrayComponents_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ArrayComponents_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_ArrayComponents_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_ArrayComponents_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ArrayComponents = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ArrayComponents_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ArrayComponents_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< int,std::allocator< int > > *) & ((arg1)->ArrayComponents);
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ArrayType_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_ArrayType_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ArrayType_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_ArrayType_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_ArrayType_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ArrayType = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ArrayType_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ArrayType_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< int,std::allocator< int > > *) & ((arg1)->ArrayType);
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ArrayRange_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_ArrayRange_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ArrayRange_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *ptr = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_ArrayRange_set" "', argument " "2"" of type '" "std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_ArrayRange_set" "', argument " "2"" of type '" "std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->ArrayRange = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_ArrayRange_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_ArrayRange_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *) & ((arg1)->ArrayRange);
  resultobj = swig::from(static_cast< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockOwner_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlockOwner_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockOwner_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_BlockOwner_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_BlockOwner_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BlockOwner = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockOwner_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockOwner_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< int,std::allocator< int > > *) & ((arg1)->BlockOwner);
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockIds_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlockIds_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockIds_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_BlockIds_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_BlockIds_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BlockIds = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockIds_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockIds_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< int,std::allocator< int > > *) & ((arg1)->BlockIds);
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockNumPoints_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< long,std::allocator< long > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlockNumPoints_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockNumPoints_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< long,std::allocator< long > > *ptr = (std::vector< long,std::allocator< long > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_BlockNumPoints_set" "', argument " "2"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_BlockNumPoints_set" "', argument " "2"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BlockNumPoints = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockNumPoints_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long,std::allocator< long > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockNumPoints_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< long,std::allocator< long > > *) & ((arg1)->BlockNumPoints);
  resultobj = swig::from(static_cast< std::vector< long,std::allocator< long > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockNumCells_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< long,std::allocator< long > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlockNumCells_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockNumCells_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< long,std::allocator< long > > *ptr = (std::vector< long,std::allocator< long > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_BlockNumCells_set" "', argument " "2"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_BlockNumCells_set" "', argument " "2"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BlockNumCells = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockNumCells_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long,std::allocator< long > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockNumCells_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< long,std::allocator< long > > *) & ((arg1)->BlockNumCells);
  resultobj = swig::from(static_cast< std::vector< long,std::allocator< long > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockCellArraySize_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< long,std::allocator< long > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlockCellArraySize_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockCellArraySize_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< long,std::allocator< long > > *ptr = (std::vector< long,std::allocator< long > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_BlockCellArraySize_set" "', argument " "2"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_BlockCellArraySize_set" "', argument " "2"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BlockCellArraySize = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockCellArraySize_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< long,std::allocator< long > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockCellArraySize_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< long,std::allocator< long > > *) & ((arg1)->BlockCellArraySize);
  resultobj = swig::from(static_cast< std::vector< long,std::allocator< long > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockExtents_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlockExtents_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockExtents_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *ptr = (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_BlockExtents_set" "', argument " "2"" of type '" "std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_BlockExtents_set" "', argument " "2"" of type '" "std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BlockExtents = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockExtents_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockExtents_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *) & ((arg1)->BlockExtents);
  resultobj = swig::from(static_cast< std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockBounds_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlockBounds_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockBounds_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *ptr = (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_BlockBounds_set" "', argument " "2"" of type '" "std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_BlockBounds_set" "', argument " "2"" of type '" "std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BlockBounds = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockBounds_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockBounds_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *) & ((arg1)->BlockBounds);
  resultobj = swig::from(static_cast< std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockArrayRange_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlockArrayRange_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockArrayRange_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *ptr = (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_BlockArrayRange_set" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_BlockArrayRange_set" "', argument " "2"" of type '" "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BlockArrayRange = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockArrayRange_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockArrayRange_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *) & ((arg1)->BlockArrayRange);
  resultobj = swig::from(static_cast< std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_RefRatio_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_RefRatio_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_RefRatio_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *ptr = (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_RefRatio_set" "', argument " "2"" of type '" "std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_RefRatio_set" "', argument " "2"" of type '" "std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->RefRatio = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_RefRatio_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_RefRatio_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *) & ((arg1)->RefRatio);
  resultobj = swig::from(static_cast< std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlocksPerLevel_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlocksPerLevel_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlocksPerLevel_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_BlocksPerLevel_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_BlocksPerLevel_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BlocksPerLevel = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlocksPerLevel_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlocksPerLevel_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< int,std::allocator< int > > *) & ((arg1)->BlocksPerLevel);
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockLevel_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_BlockLevel_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockLevel_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_BlockLevel_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_BlockLevel_set" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->BlockLevel = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_BlockLevel_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_BlockLevel_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::vector< int,std::allocator< int > > *) & ((arg1)->BlockLevel);
  resultobj = swig::from(static_cast< std::vector< int,std::allocator< int > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_PeriodicBoundary_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  std::array< int,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_PeriodicBoundary_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_PeriodicBoundary_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::array< int,3 > *ptr = (std::array< int,3 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_PeriodicBoundary_set" "', argument " "2"" of type '" "std::array< int,3 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_PeriodicBoundary_set" "', argument " "2"" of type '" "std::array< int,3 > const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->PeriodicBoundary = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_PeriodicBoundary_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  std::array< int,3 > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_PeriodicBoundary_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (std::array< int,3 > *) & ((arg1)->PeriodicBoundary);
  resultobj = swig::from(static_cast< std::array< int,3 > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_Flags_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  sensei::MeshMetadataFlags *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshMetadata_Flags_set", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_Flags_set" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_sensei__MeshMetadataFlags,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MeshMetadata_Flags_set" "', argument " "2"" of type '" "sensei::MeshMetadataFlags const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MeshMetadata_Flags_set" "', argument " "2"" of type '" "sensei::MeshMetadataFlags const &""'"); 
  }
  arg2 = reinterpret_cast< sensei::MeshMetadataFlags * >(argp2);
  if (arg1) (arg1)->Flags = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata_Flags_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::MeshMetadataFlags *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata_Flags_get" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (sensei::MeshMetadataFlags *) & ((arg1)->Flags);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__MeshMetadataFlags, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshMetadata___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshMetadata___str__" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (PyObject *)sensei_MeshMetadata___str__(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MeshMetadata(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshMetadata *arg1 = (sensei::MeshMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MeshMetadata > tempshared1 ;
  std::shared_ptr< sensei::MeshMetadata > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeshMetadata" "', argument " "1"" of type '" "sensei::MeshMetadata *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MeshMetadata > * >(argp1);
      arg1 = const_cast< sensei::MeshMetadata * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeshMetadata_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DataAdaptor_IsTypeOf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkTypeBool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_IsTypeOf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkTypeBool)sensei::DataAdaptor::IsTypeOf((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_IsA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkTypeBool result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_IsA", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_IsA" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataAdaptor_IsA" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkTypeBool)(arg1)->IsA((char const *)arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_SafeDownCast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  svtkObjectBase *arg1 = (svtkObjectBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::DataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_svtkObjectBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_SafeDownCast" "', argument " "1"" of type '" "svtkObjectBase *""'"); 
  }
  arg1 = reinterpret_cast< svtkObjectBase * >(argp1);
  result = (sensei::DataAdaptor *)sensei::DataAdaptor::SafeDownCast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_NewInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::DataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_NewInstance" "', argument " "1"" of type '" "sensei::DataAdaptor const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  result = (sensei::DataAdaptor *)((sensei::DataAdaptor const *)arg1)->NewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__DataAdaptor, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_GetNumberOfGenerationsFromBaseType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkIdType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_GetNumberOfGenerationsFromBaseType" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkIdType)sensei::DataAdaptor::GetNumberOfGenerationsFromBaseType((char const *)arg1);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_GetNumberOfGenerationsFromBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkIdType result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_GetNumberOfGenerationsFromBase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_GetNumberOfGenerationsFromBase" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataAdaptor_GetNumberOfGenerationsFromBase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkIdType)(arg1)->GetNumberOfGenerationsFromBase((char const *)arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_PrintSelf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  ostream *arg2 = 0 ;
  svtkIndent arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_PrintSelf", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_PrintSelf" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataAdaptor_PrintSelf" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataAdaptor_PrintSelf" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_svtkIndent,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataAdaptor_PrintSelf" "', argument " "3"" of type '" "svtkIndent""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataAdaptor_PrintSelf" "', argument " "3"" of type '" "svtkIndent""'");
    } else {
      svtkIndent * temp = reinterpret_cast< svtkIndent * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->PrintSelf(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_SetCommunicator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  MPI_Comm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_SetCommunicator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_SetCommunicator" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "DataAdaptor_SetCommunicator" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)(arg1)->SetCommunicator(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_GetCommunicator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  MPI_Comm result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_GetCommunicator" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  result = (arg1)->GetCommunicator();
  resultobj = SWIG_From_MPI_Comm(static_cast< MPI_Comm >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_AddGhostNodesArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_AddGhostNodesArray", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_AddGhostNodesArray" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataAdaptor_AddGhostNodesArray" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataAdaptor_AddGhostNodesArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataAdaptor_AddGhostNodesArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)(arg1)->AddGhostNodesArray(arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_AddGhostCellsArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_AddGhostCellsArray", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_AddGhostCellsArray" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataAdaptor_AddGhostCellsArray" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataAdaptor_AddGhostCellsArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataAdaptor_AddGhostCellsArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)(arg1)->AddGhostCellsArray(arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_AddArrays(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::vector< std::string,std::allocator< std::string > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_AddArrays", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_AddArrays" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataAdaptor_AddArrays" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataAdaptor_AddArrays" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataAdaptor_AddArrays" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DataAdaptor_AddArrays" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res5 = swig::asptr(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DataAdaptor_AddArrays" "', argument " "5"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataAdaptor_AddArrays" "', argument " "5"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg5 = ptr;
  }
  result = (int)(arg1)->AddArrays(arg2,(std::string const &)*arg3,arg4,(std::vector< std::string,std::allocator< std::string > > const &)*arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_GetDataTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_GetDataTime" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  result = (double)(arg1)->GetDataTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_SetDataTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_SetDataTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_SetDataTime" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataAdaptor_SetDataTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetDataTime(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_GetDataTimeStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_GetDataTimeStep" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  result = (long)(arg1)->GetDataTimeStep();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_SetDataTimeStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_SetDataTimeStep", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_SetDataTimeStep" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataAdaptor_SetDataTimeStep" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->SetDataTimeStep(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DataAdaptor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataAdaptor" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  arg1->UnRegister(nullptr);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor___str__" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  result = sensei_DataAdaptor___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_GetNumberOfMeshes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_GetNumberOfMeshes" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  result = (unsigned int)sensei_DataAdaptor_GetNumberOfMeshes(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_GetMeshMetadata__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  unsigned int arg2 ;
  sensei::MeshMetadataFlags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_GetMeshMetadata" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataAdaptor_GetMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_sensei__MeshMetadataFlags,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataAdaptor_GetMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataFlags""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataAdaptor_GetMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataFlags""'");
    } else {
      sensei::MeshMetadataFlags * temp = reinterpret_cast< sensei::MeshMetadataFlags * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = sensei_DataAdaptor_GetMeshMetadata__SWIG_0(arg1,arg2,SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_GetMeshMetadata__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_GetMeshMetadata" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataAdaptor_GetMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = sensei_DataAdaptor_GetMeshMetadata__SWIG_0(arg1,arg2);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_GetMeshMetadata(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DataAdaptor_GetMeshMetadata", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__DataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DataAdaptor_GetMeshMetadata__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__DataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DataAdaptor_GetMeshMetadata__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DataAdaptor_GetMeshMetadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::DataAdaptor::GetMeshMetadata(unsigned int,sensei::MeshMetadataFlags)\n"
    "    sensei::DataAdaptor::GetMeshMetadata(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  svtkDataObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_GetMesh", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_GetMesh" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataAdaptor_GetMesh" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataAdaptor_GetMesh" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataAdaptor_GetMesh" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (svtkDataObject *)sensei_DataAdaptor_GetMesh(arg1,(std::string const &)*arg2,arg3);
  {
    if (dynamic_cast<svtkOverlappingAMR*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkOverlappingAMR*>(result),
        SWIGTYPE_p_svtkOverlappingAMR, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkMultiBlockDataSet*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkMultiBlockDataSet*>(result),
        SWIGTYPE_p_svtkMultiBlockDataSet, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkCompositeDataSet*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkCompositeDataSet*>(result),
        SWIGTYPE_p_svtkCompositeDataSet, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkImageData*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkImageData*>(result),
        SWIGTYPE_p_svtkImageData, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkRectilinearGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkRectilinearGrid*>(result),
        SWIGTYPE_p_svtkRectilinearGrid, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkPolyData*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkPolyData*>(result),
        SWIGTYPE_p_svtkPolyData, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkUnstructuredGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkUnstructuredGrid*>(result),
        SWIGTYPE_p_svtkUnstructuredGrid, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkStructuredGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkStructuredGrid*>(result),
        SWIGTYPE_p_svtkStructuredGrid, SWIG_POINTER_OWN);
    }
    else
    {
      std::cerr << "NOTE: Automatic conversions for "
      << result->GetClassName() << " are not implemented."
      << std::endl;
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkDataObject*>(result),
        SWIGTYPE_p_svtkDataObject, SWIG_POINTER_OWN);
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_AddArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject *swig_obj[5] ;
  
  if (!SWIG_Python_UnpackTuple(args, "DataAdaptor_AddArray", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_AddArray" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataAdaptor_AddArray" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataAdaptor_AddArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataAdaptor_AddArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DataAdaptor_AddArray" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "DataAdaptor_AddArray" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataAdaptor_AddArray" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  sensei_DataAdaptor_AddArray(arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataAdaptor_ReleaseData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataAdaptor_ReleaseData" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  sensei_DataAdaptor_ReleaseData(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DataAdaptor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__DataAdaptor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Partitioner_GetClassName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Partitioner *arg1 = (sensei::Partitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::Partitioner > tempshared1 ;
  std::shared_ptr< sensei::Partitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Partitioner_GetClassName" "', argument " "1"" of type '" "sensei::Partitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (char *)(arg1)->GetClassName();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Partitioner_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Partitioner *arg1 = (sensei::Partitioner *) 0 ;
  pugi::xml_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::Partitioner > tempshared1 ;
  std::shared_ptr< sensei::Partitioner > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "Partitioner_Initialize", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Partitioner_Initialize" "', argument " "1"" of type '" "sensei::Partitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_pugi__xml_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Partitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Partitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  arg2 = reinterpret_cast< pugi::xml_node * >(argp2);
  result = (int)(arg1)->Initialize(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Partitioner_SetVerbose(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Partitioner *arg1 = (sensei::Partitioner *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::Partitioner > tempshared1 ;
  std::shared_ptr< sensei::Partitioner > *smartarg1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Partitioner_SetVerbose", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Partitioner_SetVerbose" "', argument " "1"" of type '" "sensei::Partitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Partitioner_SetVerbose" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetVerbose(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Partitioner_GetVerbose(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Partitioner *arg1 = (sensei::Partitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::Partitioner > tempshared1 ;
  std::shared_ptr< sensei::Partitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Partitioner_GetVerbose" "', argument " "1"" of type '" "sensei::Partitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (int)(arg1)->GetVerbose();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Partitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Partitioner *arg1 = (sensei::Partitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::Partitioner > tempshared1 ;
  std::shared_ptr< sensei::Partitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Partitioner" "', argument " "1"" of type '" "sensei::Partitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Partitioner_GetPartition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Partitioner *arg1 = (sensei::Partitioner *) 0 ;
  MPI_Comm arg2 ;
  sensei::MeshMetadataPtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::Partitioner > tempshared1 ;
  std::shared_ptr< sensei::Partitioner > *smartarg1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr tempshared3 ;
  PyObject *swig_obj[3] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "Partitioner_GetPartition", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Partitioner_GetPartition" "', argument " "1"" of type '" "sensei::Partitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::Partitioner > * >(argp1);
      arg1 = const_cast< sensei::Partitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Partitioner_GetPartition" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Partitioner_GetPartition" "', argument " "3"" of type '" "sensei::MeshMetadataPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp3) : &tempshared3;
    }
  }
  result = sensei_Partitioner_GetPartition(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< sensei::MeshMetadata > const &)*arg3);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Partitioner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BlockPartitioner_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BlockPartitionerPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "BlockPartitioner_New", 0, 0, 0)) SWIG_fail;
  result = sensei::BlockPartitioner::New();
  {
    std::shared_ptr<  sensei::BlockPartitioner > *smartresult = result ? new std::shared_ptr<  sensei::BlockPartitioner >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__BlockPartitioner_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPartitioner_GetClassName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BlockPartitioner *arg1 = (sensei::BlockPartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::BlockPartitioner > tempshared1 ;
  std::shared_ptr< sensei::BlockPartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__BlockPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPartitioner_GetClassName" "', argument " "1"" of type '" "sensei::BlockPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::BlockPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::BlockPartitioner > * >(argp1);
      arg1 = const_cast< sensei::BlockPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::BlockPartitioner > * >(argp1);
      arg1 = const_cast< sensei::BlockPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (char *)(arg1)->GetClassName();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPartitioner_GetPartition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BlockPartitioner *arg1 = (sensei::BlockPartitioner *) 0 ;
  MPI_Comm arg2 ;
  sensei::MeshMetadataPtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::BlockPartitioner > tempshared1 ;
  std::shared_ptr< sensei::BlockPartitioner > *smartarg1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr tempshared3 ;
  PyObject *swig_obj[3] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "BlockPartitioner_GetPartition", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__BlockPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPartitioner_GetPartition" "', argument " "1"" of type '" "sensei::BlockPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::BlockPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::BlockPartitioner > * >(argp1);
      arg1 = const_cast< sensei::BlockPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::BlockPartitioner > * >(argp1);
      arg1 = const_cast< sensei::BlockPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "BlockPartitioner_GetPartition" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockPartitioner_GetPartition" "', argument " "3"" of type '" "sensei::MeshMetadataPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp3) : &tempshared3;
    }
  }
  result = sensei_BlockPartitioner_GetPartition(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< sensei::MeshMetadata > const &)*arg3);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlockPartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::BlockPartitioner *arg1 = (sensei::BlockPartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::BlockPartitioner > tempshared1 ;
  std::shared_ptr< sensei::BlockPartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__BlockPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlockPartitioner" "', argument " "1"" of type '" "sensei::BlockPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::BlockPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::BlockPartitioner > * >(argp1);
      arg1 = const_cast< sensei::BlockPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::BlockPartitioner > * >(argp1);
      arg1 = const_cast< sensei::BlockPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlockPartitioner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_sensei__BlockPartitioner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PlanarPartitioner_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarPartitionerPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarPartitioner_New", 0, 0, 0)) SWIG_fail;
  result = sensei::PlanarPartitioner::New();
  {
    std::shared_ptr<  sensei::PlanarPartitioner > *smartresult = result ? new std::shared_ptr<  sensei::PlanarPartitioner >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__PlanarPartitioner_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarPartitioner_GetClassName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarPartitioner *arg1 = (sensei::PlanarPartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarPartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarPartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarPartitioner_GetClassName" "', argument " "1"" of type '" "sensei::PlanarPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (char *)(arg1)->GetClassName();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarPartitioner_SetPlaneSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarPartitioner *arg1 = (sensei::PlanarPartitioner *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarPartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarPartitioner > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarPartitioner_SetPlaneSize", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarPartitioner_SetPlaneSize" "', argument " "1"" of type '" "sensei::PlanarPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PlanarPartitioner_SetPlaneSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  (arg1)->SetPlaneSize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarPartitioner_GetPlaneSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarPartitioner *arg1 = (sensei::PlanarPartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarPartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarPartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarPartitioner_GetPlaneSize" "', argument " "1"" of type '" "sensei::PlanarPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (unsigned int)(arg1)->GetPlaneSize();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarPartitioner_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarPartitioner *arg1 = (sensei::PlanarPartitioner *) 0 ;
  pugi::xml_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarPartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarPartitioner > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarPartitioner_Initialize", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarPartitioner_Initialize" "', argument " "1"" of type '" "sensei::PlanarPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_pugi__xml_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlanarPartitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlanarPartitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  arg2 = reinterpret_cast< pugi::xml_node * >(argp2);
  result = (int)(arg1)->Initialize(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarPartitioner_GetPartition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarPartitioner *arg1 = (sensei::PlanarPartitioner *) 0 ;
  MPI_Comm arg2 ;
  sensei::MeshMetadataPtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarPartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarPartitioner > *smartarg1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr tempshared3 ;
  PyObject *swig_obj[3] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarPartitioner_GetPartition", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarPartitioner_GetPartition" "', argument " "1"" of type '" "sensei::PlanarPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PlanarPartitioner_GetPartition" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PlanarPartitioner_GetPartition" "', argument " "3"" of type '" "sensei::MeshMetadataPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp3) : &tempshared3;
    }
  }
  result = sensei_PlanarPartitioner_GetPartition(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< sensei::MeshMetadata > const &)*arg3);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PlanarPartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarPartitioner *arg1 = (sensei::PlanarPartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarPartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarPartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PlanarPartitioner" "', argument " "1"" of type '" "sensei::PlanarPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarPartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PlanarPartitioner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_sensei__PlanarPartitioner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MappedPartitioner_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MappedPartitionerPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "MappedPartitioner_New", 0, 0, 0)) SWIG_fail;
  result = sensei::MappedPartitioner::New();
  {
    std::shared_ptr<  sensei::MappedPartitioner > *smartresult = result ? new std::shared_ptr<  sensei::MappedPartitioner >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MappedPartitioner_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MappedPartitioner_GetClassName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MappedPartitioner *arg1 = (sensei::MappedPartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MappedPartitioner > tempshared1 ;
  std::shared_ptr< sensei::MappedPartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MappedPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MappedPartitioner_GetClassName" "', argument " "1"" of type '" "sensei::MappedPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (char *)(arg1)->GetClassName();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MappedPartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  sensei::MappedPartitioner *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MappedPartitioner", 2, 2, swig_obj)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MappedPartitioner" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MappedPartitioner" "', argument " "1"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MappedPartitioner" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MappedPartitioner" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (sensei::MappedPartitioner *)new sensei::MappedPartitioner((std::vector< int,std::allocator< int > > const &)*arg1,(std::vector< int,std::allocator< int > > const &)*arg2);
  {
    std::shared_ptr<  sensei::MappedPartitioner > *smartresult = result ? new std::shared_ptr<  sensei::MappedPartitioner >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MappedPartitioner_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MappedPartitioner_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MappedPartitioner *arg1 = (sensei::MappedPartitioner *) 0 ;
  pugi::xml_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MappedPartitioner > tempshared1 ;
  std::shared_ptr< sensei::MappedPartitioner > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "MappedPartitioner_Initialize", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MappedPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MappedPartitioner_Initialize" "', argument " "1"" of type '" "sensei::MappedPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_pugi__xml_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MappedPartitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MappedPartitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  arg2 = reinterpret_cast< pugi::xml_node * >(argp2);
  result = (int)(arg1)->Initialize(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MappedPartitioner_SetBlockOwner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MappedPartitioner *arg1 = (sensei::MappedPartitioner *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MappedPartitioner > tempshared1 ;
  std::shared_ptr< sensei::MappedPartitioner > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MappedPartitioner_SetBlockOwner", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MappedPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MappedPartitioner_SetBlockOwner" "', argument " "1"" of type '" "sensei::MappedPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MappedPartitioner_SetBlockOwner" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MappedPartitioner_SetBlockOwner" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetBlockOwner((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MappedPartitioner_SetBlockIds(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MappedPartitioner *arg1 = (sensei::MappedPartitioner *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MappedPartitioner > tempshared1 ;
  std::shared_ptr< sensei::MappedPartitioner > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "MappedPartitioner_SetBlockIds", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MappedPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MappedPartitioner_SetBlockIds" "', argument " "1"" of type '" "sensei::MappedPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MappedPartitioner_SetBlockIds" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MappedPartitioner_SetBlockIds" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetBlockIds((std::vector< int,std::allocator< int > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MappedPartitioner_GetPartition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MappedPartitioner *arg1 = (sensei::MappedPartitioner *) 0 ;
  MPI_Comm arg2 ;
  sensei::MeshMetadataPtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MappedPartitioner > tempshared1 ;
  std::shared_ptr< sensei::MappedPartitioner > *smartarg1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr tempshared3 ;
  PyObject *swig_obj[3] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "MappedPartitioner_GetPartition", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MappedPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MappedPartitioner_GetPartition" "', argument " "1"" of type '" "sensei::MappedPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MappedPartitioner_GetPartition" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MappedPartitioner_GetPartition" "', argument " "3"" of type '" "sensei::MeshMetadataPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp3) : &tempshared3;
    }
  }
  result = sensei_MappedPartitioner_GetPartition(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< sensei::MeshMetadata > const &)*arg3);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MappedPartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MappedPartitioner *arg1 = (sensei::MappedPartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::MappedPartitioner > tempshared1 ;
  std::shared_ptr< sensei::MappedPartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__MappedPartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MappedPartitioner" "', argument " "1"" of type '" "sensei::MappedPartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::MappedPartitioner > * >(argp1);
      arg1 = const_cast< sensei::MappedPartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MappedPartitioner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_sensei__MappedPartitioner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MappedPartitioner_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_PlanarSlicePartitioner_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarSlicePartitionerPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarSlicePartitioner_New", 0, 0, 0)) SWIG_fail;
  result = sensei::PlanarSlicePartitioner::New();
  {
    std::shared_ptr<  sensei::PlanarSlicePartitioner > *smartresult = result ? new std::shared_ptr<  sensei::PlanarSlicePartitioner >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarSlicePartitioner_GetClassName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarSlicePartitioner *arg1 = (sensei::PlanarSlicePartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarSlicePartitioner_GetClassName" "', argument " "1"" of type '" "sensei::PlanarSlicePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (char *)(arg1)->GetClassName();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarSlicePartitioner_SetPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarSlicePartitioner *arg1 = (sensei::PlanarSlicePartitioner *) 0 ;
  std::array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarSlicePartitioner_SetPoint", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarSlicePartitioner_SetPoint" "', argument " "1"" of type '" "sensei::PlanarSlicePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlanarSlicePartitioner_SetPoint" "', argument " "2"" of type '" "std::array< double,3 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlanarSlicePartitioner_SetPoint" "', argument " "2"" of type '" "std::array< double,3 > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetPoint((std::array< double,3 > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarSlicePartitioner_GetPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarSlicePartitioner *arg1 = (sensei::PlanarSlicePartitioner *) 0 ;
  std::array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarSlicePartitioner_GetPoint", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarSlicePartitioner_GetPoint" "', argument " "1"" of type '" "sensei::PlanarSlicePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__arrayT_double_3_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlanarSlicePartitioner_GetPoint" "', argument " "2"" of type '" "std::array< double,3 > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlanarSlicePartitioner_GetPoint" "', argument " "2"" of type '" "std::array< double,3 > &""'"); 
  }
  arg2 = reinterpret_cast< std::array< double,3 > * >(argp2);
  (arg1)->GetPoint(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarSlicePartitioner_SetNormal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarSlicePartitioner *arg1 = (sensei::PlanarSlicePartitioner *) 0 ;
  std::array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarSlicePartitioner_SetNormal", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarSlicePartitioner_SetNormal" "', argument " "1"" of type '" "sensei::PlanarSlicePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::array< double,3 > *ptr = (std::array< double,3 > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlanarSlicePartitioner_SetNormal" "', argument " "2"" of type '" "std::array< double,3 > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlanarSlicePartitioner_SetNormal" "', argument " "2"" of type '" "std::array< double,3 > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->SetNormal((std::array< double,3 > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarSlicePartitioner_GetNormal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarSlicePartitioner *arg1 = (sensei::PlanarSlicePartitioner *) 0 ;
  std::array< double,3 > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarSlicePartitioner_GetNormal", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarSlicePartitioner_GetNormal" "', argument " "1"" of type '" "sensei::PlanarSlicePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__arrayT_double_3_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlanarSlicePartitioner_GetNormal" "', argument " "2"" of type '" "std::array< double,3 > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlanarSlicePartitioner_GetNormal" "', argument " "2"" of type '" "std::array< double,3 > &""'"); 
  }
  arg2 = reinterpret_cast< std::array< double,3 > * >(argp2);
  (arg1)->GetNormal(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarSlicePartitioner_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarSlicePartitioner *arg1 = (sensei::PlanarSlicePartitioner *) 0 ;
  pugi::xml_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarSlicePartitioner_Initialize", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarSlicePartitioner_Initialize" "', argument " "1"" of type '" "sensei::PlanarSlicePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_pugi__xml_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PlanarSlicePartitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PlanarSlicePartitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  arg2 = reinterpret_cast< pugi::xml_node * >(argp2);
  result = (int)(arg1)->Initialize(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PlanarSlicePartitioner_GetPartition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarSlicePartitioner *arg1 = (sensei::PlanarSlicePartitioner *) 0 ;
  MPI_Comm arg2 ;
  sensei::MeshMetadataPtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > *smartarg1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr tempshared3 ;
  PyObject *swig_obj[3] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "PlanarSlicePartitioner_GetPartition", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PlanarSlicePartitioner_GetPartition" "', argument " "1"" of type '" "sensei::PlanarSlicePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PlanarSlicePartitioner_GetPartition" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PlanarSlicePartitioner_GetPartition" "', argument " "3"" of type '" "sensei::MeshMetadataPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp3) : &tempshared3;
    }
  }
  result = sensei_PlanarSlicePartitioner_GetPartition(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< sensei::MeshMetadata > const &)*arg3);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PlanarSlicePartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::PlanarSlicePartitioner *arg1 = (sensei::PlanarSlicePartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > tempshared1 ;
  std::shared_ptr< sensei::PlanarSlicePartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PlanarSlicePartitioner" "', argument " "1"" of type '" "sensei::PlanarSlicePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::PlanarSlicePartitioner > * >(argp1);
      arg1 = const_cast< sensei::PlanarSlicePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PlanarSlicePartitioner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IsoSurfacePartitioner_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::IsoSurfacePartitionerPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "IsoSurfacePartitioner_New", 0, 0, 0)) SWIG_fail;
  result = sensei::IsoSurfacePartitioner::New();
  {
    std::shared_ptr<  sensei::IsoSurfacePartitioner > *smartresult = result ? new std::shared_ptr<  sensei::IsoSurfacePartitioner >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsoSurfacePartitioner_GetClassName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::IsoSurfacePartitioner *arg1 = (sensei::IsoSurfacePartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner > tempshared1 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsoSurfacePartitioner_GetClassName" "', argument " "1"" of type '" "sensei::IsoSurfacePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (char *)(arg1)->GetClassName();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsoSurfacePartitioner_SetIsoValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::IsoSurfacePartitioner *arg1 = (sensei::IsoSurfacePartitioner *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner > tempshared1 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject *swig_obj[5] ;
  
  if (!SWIG_Python_UnpackTuple(args, "IsoSurfacePartitioner_SetIsoValues", 5, 5, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsoSurfacePartitioner_SetIsoValues" "', argument " "1"" of type '" "sensei::IsoSurfacePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IsoSurfacePartitioner_SetIsoValues" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsoSurfacePartitioner_SetIsoValues" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IsoSurfacePartitioner_SetIsoValues" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsoSurfacePartitioner_SetIsoValues" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IsoSurfacePartitioner_SetIsoValues" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    res5 = swig::asptr(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IsoSurfacePartitioner_SetIsoValues" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsoSurfacePartitioner_SetIsoValues" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg5 = ptr;
  }
  (arg1)->SetIsoValues((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::vector< double,std::allocator< double > > const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsoSurfacePartitioner_GetIsoValues(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::IsoSurfacePartitioner *arg1 = (sensei::IsoSurfacePartitioner *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner const > tempshared1 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "IsoSurfacePartitioner_GetIsoValues", 5, 5, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsoSurfacePartitioner_GetIsoValues" "', argument " "1"" of type '" "sensei::IsoSurfacePartitioner const *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr< const sensei::IsoSurfacePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr< const sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr< const sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IsoSurfacePartitioner_GetIsoValues" "', argument " "2"" of type '" "std::string &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsoSurfacePartitioner_GetIsoValues" "', argument " "2"" of type '" "std::string &""'"); 
  }
  arg2 = reinterpret_cast< std::string * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IsoSurfacePartitioner_GetIsoValues" "', argument " "3"" of type '" "std::string &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsoSurfacePartitioner_GetIsoValues" "', argument " "3"" of type '" "std::string &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_int,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IsoSurfacePartitioner_GetIsoValues" "', argument " "4"" of type '" "int &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsoSurfacePartitioner_GetIsoValues" "', argument " "4"" of type '" "int &""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IsoSurfacePartitioner_GetIsoValues" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsoSurfacePartitioner_GetIsoValues" "', argument " "5"" of type '" "std::vector< double,std::allocator< double > > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp5);
  result = (int)((sensei::IsoSurfacePartitioner const *)arg1)->GetIsoValues(*arg2,*arg3,*arg4,*arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsoSurfacePartitioner_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::IsoSurfacePartitioner *arg1 = (sensei::IsoSurfacePartitioner *) 0 ;
  pugi::xml_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner > tempshared1 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "IsoSurfacePartitioner_Initialize", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsoSurfacePartitioner_Initialize" "', argument " "1"" of type '" "sensei::IsoSurfacePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_pugi__xml_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IsoSurfacePartitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IsoSurfacePartitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  arg2 = reinterpret_cast< pugi::xml_node * >(argp2);
  result = (int)(arg1)->Initialize(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IsoSurfacePartitioner_GetPartition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::IsoSurfacePartitioner *arg1 = (sensei::IsoSurfacePartitioner *) 0 ;
  MPI_Comm arg2 ;
  sensei::MeshMetadataPtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner > tempshared1 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner > *smartarg1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr tempshared3 ;
  PyObject *swig_obj[3] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "IsoSurfacePartitioner_GetPartition", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IsoSurfacePartitioner_GetPartition" "', argument " "1"" of type '" "sensei::IsoSurfacePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "IsoSurfacePartitioner_GetPartition" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IsoSurfacePartitioner_GetPartition" "', argument " "3"" of type '" "sensei::MeshMetadataPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp3) : &tempshared3;
    }
  }
  result = sensei_IsoSurfacePartitioner_GetPartition(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< sensei::MeshMetadata > const &)*arg3);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IsoSurfacePartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::IsoSurfacePartitioner *arg1 = (sensei::IsoSurfacePartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner > tempshared1 ;
  std::shared_ptr< sensei::IsoSurfacePartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IsoSurfacePartitioner" "', argument " "1"" of type '" "sensei::IsoSurfacePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::IsoSurfacePartitioner > * >(argp1);
      arg1 = const_cast< sensei::IsoSurfacePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IsoSurfacePartitioner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_ConfigurablePartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurablePartitioner *arg1 = (sensei::ConfigurablePartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::ConfigurablePartitioner > tempshared1 ;
  std::shared_ptr< sensei::ConfigurablePartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__ConfigurablePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConfigurablePartitioner" "', argument " "1"" of type '" "sensei::ConfigurablePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      arg1 = const_cast< sensei::ConfigurablePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      arg1 = const_cast< sensei::ConfigurablePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  (void)arg1; delete smartarg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurablePartitioner_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurablePartitionerPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurablePartitioner_New", 0, 0, 0)) SWIG_fail;
  result = sensei::ConfigurablePartitioner::New();
  {
    std::shared_ptr<  sensei::ConfigurablePartitioner > *smartresult = result ? new std::shared_ptr<  sensei::ConfigurablePartitioner >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__ConfigurablePartitioner_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurablePartitioner_GetClassName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurablePartitioner *arg1 = (sensei::ConfigurablePartitioner *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::ConfigurablePartitioner > tempshared1 ;
  std::shared_ptr< sensei::ConfigurablePartitioner > *smartarg1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__ConfigurablePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurablePartitioner_GetClassName" "', argument " "1"" of type '" "sensei::ConfigurablePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      arg1 = const_cast< sensei::ConfigurablePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      arg1 = const_cast< sensei::ConfigurablePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  result = (char *)(arg1)->GetClassName();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurablePartitioner_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurablePartitioner *arg1 = (sensei::ConfigurablePartitioner *) 0 ;
  pugi::xml_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::ConfigurablePartitioner > tempshared1 ;
  std::shared_ptr< sensei::ConfigurablePartitioner > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurablePartitioner_Initialize", 2, 2, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__ConfigurablePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurablePartitioner_Initialize" "', argument " "1"" of type '" "sensei::ConfigurablePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      arg1 = const_cast< sensei::ConfigurablePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      arg1 = const_cast< sensei::ConfigurablePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_pugi__xml_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurablePartitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurablePartitioner_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  arg2 = reinterpret_cast< pugi::xml_node * >(argp2);
  result = (int)(arg1)->Initialize(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurablePartitioner_GetPartition(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurablePartitioner *arg1 = (sensei::ConfigurablePartitioner *) 0 ;
  MPI_Comm arg2 ;
  sensei::MeshMetadataPtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::shared_ptr< sensei::ConfigurablePartitioner > tempshared1 ;
  std::shared_ptr< sensei::ConfigurablePartitioner > *smartarg1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr tempshared3 ;
  PyObject *swig_obj[3] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurablePartitioner_GetPartition", 3, 3, swig_obj)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(swig_obj[0], &argp1, SWIGTYPE_p_std__shared_ptrT_sensei__ConfigurablePartitioner_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurablePartitioner_GetPartition" "', argument " "1"" of type '" "sensei::ConfigurablePartitioner *""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      delete reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      arg1 = const_cast< sensei::ConfigurablePartitioner * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< std::shared_ptr<  sensei::ConfigurablePartitioner > * >(argp1);
      arg1 = const_cast< sensei::ConfigurablePartitioner * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ConfigurablePartitioner_GetPartition" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConfigurablePartitioner_GetPartition" "', argument " "3"" of type '" "sensei::MeshMetadataPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp3) : &tempshared3;
    }
  }
  result = sensei_ConfigurablePartitioner_GetPartition(arg1,SWIG_STD_MOVE(arg2),(std::shared_ptr< sensei::MeshMetadata > const &)*arg3);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConfigurablePartitioner_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__shared_ptrT_sensei__ConfigurablePartitioner_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_IsTypeOf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkTypeBool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_IsTypeOf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkTypeBool)sensei::InTransitDataAdaptor::IsTypeOf((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_IsA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkTypeBool result;
  
  if (!SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_IsA", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_IsA" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InTransitDataAdaptor_IsA" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkTypeBool)(arg1)->IsA((char const *)arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_SafeDownCast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  svtkObjectBase *arg1 = (svtkObjectBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::InTransitDataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_svtkObjectBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_SafeDownCast" "', argument " "1"" of type '" "svtkObjectBase *""'"); 
  }
  arg1 = reinterpret_cast< svtkObjectBase * >(argp1);
  result = (sensei::InTransitDataAdaptor *)sensei::InTransitDataAdaptor::SafeDownCast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_NewInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::InTransitDataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_NewInstance" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  result = (sensei::InTransitDataAdaptor *)((sensei::InTransitDataAdaptor const *)arg1)->NewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__InTransitDataAdaptor, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetNumberOfGenerationsFromBaseType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkIdType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_GetNumberOfGenerationsFromBaseType" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkIdType)sensei::InTransitDataAdaptor::GetNumberOfGenerationsFromBaseType((char const *)arg1);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetNumberOfGenerationsFromBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkIdType result;
  
  if (!SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_GetNumberOfGenerationsFromBase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_GetNumberOfGenerationsFromBase" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InTransitDataAdaptor_GetNumberOfGenerationsFromBase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkIdType)(arg1)->GetNumberOfGenerationsFromBase((char const *)arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_SetConnectionInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_SetConnectionInfo", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_SetConnectionInfo" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InTransitDataAdaptor_SetConnectionInfo" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InTransitDataAdaptor_SetConnectionInfo" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->SetConnectionInfo((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetConnectionInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_GetConnectionInfo" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  result = (std::string *) &((sensei::InTransitDataAdaptor const *)arg1)->GetConnectionInfo();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  pugi::xml_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_Initialize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_Initialize" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_pugi__xml_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InTransitDataAdaptor_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InTransitDataAdaptor_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  arg2 = reinterpret_cast< pugi::xml_node * >(argp2);
  result = (int)(arg1)->Initialize(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_SetPartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  sensei::PartitionerPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  sensei::PartitionerPtr tempshared2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_SetPartitioner", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_SetPartitioner" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InTransitDataAdaptor_SetPartitioner" "', argument " "2"" of type '" "sensei::PartitionerPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< sensei::PartitionerPtr * >(argp2);
      delete reinterpret_cast< sensei::PartitionerPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< sensei::PartitionerPtr * >(argp2) : &tempshared2;
    }
  }
  (arg1)->SetPartitioner((sensei::PartitionerPtr const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetPartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::PartitionerPtr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_GetPartitioner" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  result = (arg1)->GetPartitioner();
  {
    std::shared_ptr<  sensei::Partitioner > *smartresult = result ? new std::shared_ptr<  sensei::Partitioner >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_OpenStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_OpenStream" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  result = (int)(arg1)->OpenStream();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_CloseStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_CloseStream" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  result = (int)(arg1)->CloseStream();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_AdvanceStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_AdvanceStream" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  result = (int)(arg1)->AdvanceStream();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_StreamGood(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_StreamGood" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  result = (int)(arg1)->StreamGood();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_Finalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_Finalize" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  result = (int)(arg1)->Finalize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InTransitDataAdaptor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InTransitDataAdaptor" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  arg1->UnRegister(nullptr);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetNumberOfMeshes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_GetNumberOfMeshes" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  result = (unsigned int)sensei_InTransitDataAdaptor_GetNumberOfMeshes(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetMeshMetadata__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  unsigned int arg2 ;
  sensei::MeshMetadataFlags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_GetMeshMetadata" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InTransitDataAdaptor_GetMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_sensei__MeshMetadataFlags,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InTransitDataAdaptor_GetMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataFlags""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InTransitDataAdaptor_GetMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataFlags""'");
    } else {
      sensei::MeshMetadataFlags * temp = reinterpret_cast< sensei::MeshMetadataFlags * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = sensei_InTransitDataAdaptor_GetMeshMetadata__SWIG_0(arg1,arg2,SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetMeshMetadata__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_GetMeshMetadata" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InTransitDataAdaptor_GetMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = sensei_InTransitDataAdaptor_GetMeshMetadata__SWIG_0(arg1,arg2);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetMeshMetadata(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_GetMeshMetadata", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__InTransitDataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_InTransitDataAdaptor_GetMeshMetadata__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__InTransitDataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_InTransitDataAdaptor_GetMeshMetadata__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'InTransitDataAdaptor_GetMeshMetadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::InTransitDataAdaptor::GetMeshMetadata(unsigned int,sensei::MeshMetadataFlags)\n"
    "    sensei::InTransitDataAdaptor::GetMeshMetadata(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  svtkDataObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_GetMesh", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_GetMesh" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InTransitDataAdaptor_GetMesh" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InTransitDataAdaptor_GetMesh" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InTransitDataAdaptor_GetMesh" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (svtkDataObject *)sensei_InTransitDataAdaptor_GetMesh(arg1,(std::string const &)*arg2,arg3);
  {
    if (dynamic_cast<svtkOverlappingAMR*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkOverlappingAMR*>(result),
        SWIGTYPE_p_svtkOverlappingAMR, 0);
    }
    else if (dynamic_cast<svtkMultiBlockDataSet*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkMultiBlockDataSet*>(result),
        SWIGTYPE_p_svtkMultiBlockDataSet, 0);
    }
    else if (dynamic_cast<svtkCompositeDataSet*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkCompositeDataSet*>(result),
        SWIGTYPE_p_svtkCompositeDataSet, 0);
    }
    else if (dynamic_cast<svtkImageData*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkImageData*>(result),
        SWIGTYPE_p_svtkImageData, 0);
    }
    else if (dynamic_cast<svtkRectilinearGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkRectilinearGrid*>(result),
        SWIGTYPE_p_svtkRectilinearGrid, 0);
    }
    else if (dynamic_cast<svtkPolyData*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkPolyData*>(result),
        SWIGTYPE_p_svtkPolyData, 0);
    }
    else if (dynamic_cast<svtkUnstructuredGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkUnstructuredGrid*>(result),
        SWIGTYPE_p_svtkUnstructuredGrid, 0);
    }
    else if (dynamic_cast<svtkStructuredGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkStructuredGrid*>(result),
        SWIGTYPE_p_svtkStructuredGrid, 0);
    }
    else
    {
      std::cerr << "NOTE: Automatic conversions for "
      << result->GetClassName() << " are not implemented."
      << std::endl;
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkDataObject*>(result),
        SWIGTYPE_p_svtkDataObject, 0);
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_AddArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject *swig_obj[5] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_AddArray", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_AddArray" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InTransitDataAdaptor_AddArray" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InTransitDataAdaptor_AddArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InTransitDataAdaptor_AddArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "InTransitDataAdaptor_AddArray" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "InTransitDataAdaptor_AddArray" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InTransitDataAdaptor_AddArray" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  sensei_InTransitDataAdaptor_AddArray(arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_ReleaseData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_ReleaseData" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  sensei_InTransitDataAdaptor_ReleaseData(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetSenderMeshMetadata(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_GetSenderMeshMetadata", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_GetSenderMeshMetadata" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InTransitDataAdaptor_GetSenderMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = sensei_InTransitDataAdaptor_GetSenderMeshMetadata(arg1,arg2);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_GetReceiverMeshMetadata(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_GetReceiverMeshMetadata", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_GetReceiverMeshMetadata" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InTransitDataAdaptor_GetReceiverMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = sensei_InTransitDataAdaptor_GetReceiverMeshMetadata(arg1,arg2);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor_SetReceiverMeshMetadata(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  unsigned int arg2 ;
  sensei::MeshMetadataPtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr tempshared3 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "InTransitDataAdaptor_SetReceiverMeshMetadata", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor_SetReceiverMeshMetadata" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InTransitDataAdaptor_SetReceiverMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "InTransitDataAdaptor_SetReceiverMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataPtr &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp3) : &tempshared3;
    }
  }
  sensei_InTransitDataAdaptor_SetReceiverMeshMetadata(arg1,arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InTransitDataAdaptor___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::InTransitDataAdaptor *arg1 = (sensei::InTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InTransitDataAdaptor___str__" "', argument " "1"" of type '" "sensei::InTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::InTransitDataAdaptor * >(argp1);
  result = sensei_InTransitDataAdaptor___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InTransitDataAdaptor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__InTransitDataAdaptor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_AsInTransitDataAdaptor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataAdaptor *arg1 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::InTransitDataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsInTransitDataAdaptor" "', argument " "1"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataAdaptor * >(argp1);
  result = (sensei::InTransitDataAdaptor *)AsInTransitDataAdaptor(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__InTransitDataAdaptor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_New", 0, 0, 0)) SWIG_fail;
  result = (sensei::ConfigurableInTransitDataAdaptor *)sensei::ConfigurableInTransitDataAdaptor::New();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_IsTypeOf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkTypeBool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_IsTypeOf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkTypeBool)sensei::ConfigurableInTransitDataAdaptor::IsTypeOf((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_IsA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkTypeBool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_IsA", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_IsA" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_IsA" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkTypeBool)(arg1)->IsA((char const *)arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_SafeDownCast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  svtkObjectBase *arg1 = (svtkObjectBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::ConfigurableInTransitDataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_svtkObjectBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_SafeDownCast" "', argument " "1"" of type '" "svtkObjectBase *""'"); 
  }
  arg1 = reinterpret_cast< svtkObjectBase * >(argp1);
  result = (sensei::ConfigurableInTransitDataAdaptor *)sensei::ConfigurableInTransitDataAdaptor::SafeDownCast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_NewInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::ConfigurableInTransitDataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_NewInstance" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (sensei::ConfigurableInTransitDataAdaptor *)((sensei::ConfigurableInTransitDataAdaptor const *)arg1)->NewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBaseType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkIdType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBaseType" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkIdType)sensei::ConfigurableInTransitDataAdaptor::GetNumberOfGenerationsFromBaseType((char const *)arg1);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkIdType result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBase" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkIdType)(arg1)->GetNumberOfGenerationsFromBase((char const *)arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_Initialize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_Initialize" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_Initialize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_Initialize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->Initialize((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_SetConnectionInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_SetConnectionInfo", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_SetConnectionInfo" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_SetConnectionInfo" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_SetConnectionInfo" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->SetConnectionInfo((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetConnectionInfo(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetConnectionInfo" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (std::string *) &((sensei::ConfigurableInTransitDataAdaptor const *)arg1)->GetConnectionInfo();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_Initialize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  pugi::xml_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_Initialize" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_pugi__xml_node,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_Initialize" "', argument " "2"" of type '" "pugi::xml_node &""'"); 
  }
  arg2 = reinterpret_cast< pugi::xml_node * >(argp2);
  result = (int)(arg1)->Initialize(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_Initialize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_Initialize", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pugi__xml_node, SWIG_POINTER_NO_NULL);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConfigurableInTransitDataAdaptor_Initialize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConfigurableInTransitDataAdaptor_Initialize__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ConfigurableInTransitDataAdaptor_Initialize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::ConfigurableInTransitDataAdaptor::Initialize(std::string const &)\n"
    "    sensei::ConfigurableInTransitDataAdaptor::Initialize(pugi::xml_node &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_SetPartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  sensei::PartitionerPtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  sensei::PartitionerPtr tempshared2 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_SetPartitioner", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_SetPartitioner" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(swig_obj[1], &argp2, SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_SetPartitioner" "', argument " "2"" of type '" "sensei::PartitionerPtr const &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< sensei::PartitionerPtr * >(argp2);
      delete reinterpret_cast< sensei::PartitionerPtr * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< sensei::PartitionerPtr * >(argp2) : &tempshared2;
    }
  }
  (arg1)->SetPartitioner((sensei::PartitionerPtr const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetPartitioner(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::PartitionerPtr result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetPartitioner" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (arg1)->GetPartitioner();
  {
    std::shared_ptr<  sensei::Partitioner > *smartresult = result ? new std::shared_ptr<  sensei::Partitioner >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__Partitioner_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_OpenStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_OpenStream" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (int)(arg1)->OpenStream();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_CloseStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_CloseStream" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (int)(arg1)->CloseStream();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_AdvanceStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_AdvanceStream" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (int)(arg1)->AdvanceStream();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_StreamGood(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_StreamGood" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (int)(arg1)->StreamGood();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_Finalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_Finalize" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (int)(arg1)->Finalize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_AddGhostNodesArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_AddGhostNodesArray", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_AddGhostNodesArray" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_AddGhostNodesArray" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConfigurableInTransitDataAdaptor_AddGhostNodesArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_AddGhostNodesArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)(arg1)->AddGhostNodesArray(arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_AddGhostCellsArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_AddGhostCellsArray", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_AddGhostCellsArray" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_AddGhostCellsArray" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConfigurableInTransitDataAdaptor_AddGhostCellsArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_AddGhostCellsArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (int)(arg1)->AddGhostCellsArray(arg2,(std::string const &)*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_AddArrays(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::vector< std::string,std::allocator< std::string > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject *swig_obj[5] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_AddArrays", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_AddArrays" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_AddArrays" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConfigurableInTransitDataAdaptor_AddArrays" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_AddArrays" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ConfigurableInTransitDataAdaptor_AddArrays" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res5 = swig::asptr(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ConfigurableInTransitDataAdaptor_AddArrays" "', argument " "5"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_AddArrays" "', argument " "5"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg5 = ptr;
  }
  result = (int)(arg1)->AddArrays(arg2,(std::string const &)*arg3,arg4,(std::vector< std::string,std::allocator< std::string > > const &)*arg5);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetDataTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetDataTime" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (double)(arg1)->GetDataTime();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_SetDataTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_SetDataTime", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_SetDataTime" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigurableInTransitDataAdaptor_SetDataTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  (arg1)->SetDataTime(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetDataTimeStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  long result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetDataTimeStep" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (long)(arg1)->GetDataTimeStep();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_SetDataTimeStep(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_SetDataTimeStep", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_SetDataTimeStep" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_long(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigurableInTransitDataAdaptor_SetDataTimeStep" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->SetDataTimeStep(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConfigurableInTransitDataAdaptor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConfigurableInTransitDataAdaptor" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  arg1->UnRegister(nullptr);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConfigurableInTransitDataAdaptor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ConfigurableInTransitDataAdaptor", 0, 0, 0)) SWIG_fail;
  result = (sensei::ConfigurableInTransitDataAdaptor *)new_sensei_ConfigurableInTransitDataAdaptor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, SWIG_POINTER_NEW |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetNumberOfMeshes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetNumberOfMeshes" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = (unsigned int)sensei_ConfigurableInTransitDataAdaptor_GetNumberOfMeshes(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetMeshMetadata__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  unsigned int arg2 ;
  sensei::MeshMetadataFlags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetMeshMetadata" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigurableInTransitDataAdaptor_GetMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_sensei__MeshMetadataFlags,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConfigurableInTransitDataAdaptor_GetMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataFlags""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_GetMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataFlags""'");
    } else {
      sensei::MeshMetadataFlags * temp = reinterpret_cast< sensei::MeshMetadataFlags * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = sensei_ConfigurableInTransitDataAdaptor_GetMeshMetadata__SWIG_0(arg1,arg2,SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetMeshMetadata__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetMeshMetadata" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigurableInTransitDataAdaptor_GetMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = sensei_ConfigurableInTransitDataAdaptor_GetMeshMetadata__SWIG_0(arg1,arg2);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetMeshMetadata(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_GetMeshMetadata", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ConfigurableInTransitDataAdaptor_GetMeshMetadata__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ConfigurableInTransitDataAdaptor_GetMeshMetadata__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ConfigurableInTransitDataAdaptor_GetMeshMetadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::ConfigurableInTransitDataAdaptor::GetMeshMetadata(unsigned int,sensei::MeshMetadataFlags)\n"
    "    sensei::ConfigurableInTransitDataAdaptor::GetMeshMetadata(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  svtkDataObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_GetMesh", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetMesh" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_GetMesh" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_GetMesh" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConfigurableInTransitDataAdaptor_GetMesh" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (svtkDataObject *)sensei_ConfigurableInTransitDataAdaptor_GetMesh(arg1,(std::string const &)*arg2,arg3);
  {
    if (dynamic_cast<svtkOverlappingAMR*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkOverlappingAMR*>(result),
        SWIGTYPE_p_svtkOverlappingAMR, 0);
    }
    else if (dynamic_cast<svtkMultiBlockDataSet*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkMultiBlockDataSet*>(result),
        SWIGTYPE_p_svtkMultiBlockDataSet, 0);
    }
    else if (dynamic_cast<svtkCompositeDataSet*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkCompositeDataSet*>(result),
        SWIGTYPE_p_svtkCompositeDataSet, 0);
    }
    else if (dynamic_cast<svtkImageData*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkImageData*>(result),
        SWIGTYPE_p_svtkImageData, 0);
    }
    else if (dynamic_cast<svtkRectilinearGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkRectilinearGrid*>(result),
        SWIGTYPE_p_svtkRectilinearGrid, 0);
    }
    else if (dynamic_cast<svtkPolyData*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkPolyData*>(result),
        SWIGTYPE_p_svtkPolyData, 0);
    }
    else if (dynamic_cast<svtkUnstructuredGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkUnstructuredGrid*>(result),
        SWIGTYPE_p_svtkUnstructuredGrid, 0);
    }
    else if (dynamic_cast<svtkStructuredGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkStructuredGrid*>(result),
        SWIGTYPE_p_svtkStructuredGrid, 0);
    }
    else
    {
      std::cerr << "NOTE: Automatic conversions for "
      << result->GetClassName() << " are not implemented."
      << std::endl;
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkDataObject*>(result),
        SWIGTYPE_p_svtkDataObject, 0);
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_AddArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject *swig_obj[5] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_AddArray", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_AddArray" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableInTransitDataAdaptor_AddArray" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConfigurableInTransitDataAdaptor_AddArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_AddArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ConfigurableInTransitDataAdaptor_AddArray" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ConfigurableInTransitDataAdaptor_AddArray" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableInTransitDataAdaptor_AddArray" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  sensei_ConfigurableInTransitDataAdaptor_AddArray(arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_ReleaseData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_ReleaseData" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  sensei_ConfigurableInTransitDataAdaptor_ReleaseData(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetSenderMeshMetadata(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_GetSenderMeshMetadata", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetSenderMeshMetadata" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigurableInTransitDataAdaptor_GetSenderMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = sensei_ConfigurableInTransitDataAdaptor_GetSenderMeshMetadata(arg1,arg2);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_GetReceiverMeshMetadata(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  sensei::MeshMetadataPtr result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_GetReceiverMeshMetadata", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_GetReceiverMeshMetadata" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigurableInTransitDataAdaptor_GetReceiverMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = sensei_ConfigurableInTransitDataAdaptor_GetReceiverMeshMetadata(arg1,arg2);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  unsigned int arg2 ;
  sensei::MeshMetadataPtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr tempshared3 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(swig_obj[2], &argp3, SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataPtr &""'");
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      delete reinterpret_cast< sensei::MeshMetadataPtr * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< sensei::MeshMetadataPtr * >(argp3) : &tempshared3;
    }
  }
  sensei_ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata(arg1,arg2,*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableInTransitDataAdaptor___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableInTransitDataAdaptor *arg1 = (sensei::ConfigurableInTransitDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableInTransitDataAdaptor___str__" "', argument " "1"" of type '" "sensei::ConfigurableInTransitDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableInTransitDataAdaptor * >(argp1);
  result = sensei_ConfigurableInTransitDataAdaptor___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConfigurableInTransitDataAdaptor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__ConfigurableInTransitDataAdaptor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConfigurableInTransitDataAdaptor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_DataRequirements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_DataRequirements", 0, 0, 0)) SWIG_fail;
  result = (sensei::DataRequirements *)new sensei::DataRequirements();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__DataRequirements, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DataRequirements(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataRequirements" "', argument " "1"" of type '" "sensei::DataRequirements *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_Empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_Empty" "', argument " "1"" of type '" "sensei::DataRequirements const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  result = (bool)((sensei::DataRequirements const *)arg1)->Empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_Initialize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  pugi::xml_node arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_Initialize" "', argument " "1"" of type '" "sensei::DataRequirements *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_pugi__xml_node,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataRequirements_Initialize" "', argument " "2"" of type '" "pugi::xml_node""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_Initialize" "', argument " "2"" of type '" "pugi::xml_node""'");
    } else {
      pugi::xml_node * temp = reinterpret_cast< pugi::xml_node * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (int)(arg1)->Initialize(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_Initialize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  sensei::DataAdaptor *arg2 = (sensei::DataAdaptor *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_Initialize" "', argument " "1"" of type '" "sensei::DataRequirements *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataRequirements_Initialize" "', argument " "2"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg2 = reinterpret_cast< sensei::DataAdaptor * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataRequirements_Initialize" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (int)(arg1)->Initialize(arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_Initialize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DataRequirements_Initialize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__DataRequirements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pugi__xml_node, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DataRequirements_Initialize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__DataRequirements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_sensei__DataAdaptor, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DataRequirements_Initialize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DataRequirements_Initialize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::DataRequirements::Initialize(pugi::xml_node)\n"
    "    sensei::DataRequirements::Initialize(sensei::DataAdaptor *,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataRequirements_AddRequirement__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  int result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_AddRequirement" "', argument " "1"" of type '" "sensei::DataRequirements *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataRequirements_AddRequirement" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_AddRequirement" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataRequirements_AddRequirement" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (int)(arg1)->AddRequirement((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_AddRequirement__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_AddRequirement" "', argument " "1"" of type '" "sensei::DataRequirements *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataRequirements_AddRequirement" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_AddRequirement" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataRequirements_AddRequirement" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataRequirements_AddRequirement" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_AddRequirement" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  result = (int)(arg1)->AddRequirement((std::string const &)*arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_AddRequirement__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  int result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_AddRequirement" "', argument " "1"" of type '" "sensei::DataRequirements *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataRequirements_AddRequirement" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_AddRequirement" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataRequirements_AddRequirement" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataRequirements_AddRequirement" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_AddRequirement" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (int)(arg1)->AddRequirement((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_AddRequirement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "DataRequirements_AddRequirement", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__DataRequirements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DataRequirements_AddRequirement__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__DataRequirements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DataRequirements_AddRequirement__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__DataRequirements, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_DataRequirements_AddRequirement__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DataRequirements_AddRequirement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::DataRequirements::AddRequirement(std::string const &,bool)\n"
    "    sensei::DataRequirements::AddRequirement(std::string const &,int,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    sensei::DataRequirements::AddRequirement(std::string const &,int,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataRequirements_GetRequiredMeshes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataRequirements_GetRequiredMeshes", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_GetRequiredMeshes" "', argument " "1"" of type '" "sensei::DataRequirements const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataRequirements_GetRequiredMeshes" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_GetRequiredMeshes" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  result = (int)((sensei::DataRequirements const *)arg1)->GetRequiredMeshes(*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_GetNumberOfRequiredMeshes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_GetNumberOfRequiredMeshes" "', argument " "1"" of type '" "sensei::DataRequirements const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  result = (unsigned int)((sensei::DataRequirements const *)arg1)->GetNumberOfRequiredMeshes();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_GetRequiredMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  unsigned int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataRequirements_GetRequiredMesh", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_GetRequiredMesh" "', argument " "1"" of type '" "sensei::DataRequirements const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataRequirements_GetRequiredMesh" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__string,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DataRequirements_GetRequiredMesh" "', argument " "3"" of type '" "std::string &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_GetRequiredMesh" "', argument " "3"" of type '" "std::string &""'"); 
  }
  arg3 = reinterpret_cast< std::string * >(argp3);
  result = (int)((sensei::DataRequirements const *)arg1)->GetRequiredMesh(arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_GetRequiredArrays(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataRequirements_GetRequiredArrays", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_GetRequiredArrays" "', argument " "1"" of type '" "sensei::DataRequirements const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataRequirements_GetRequiredArrays" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_GetRequiredArrays" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataRequirements_GetRequiredArrays" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataRequirements_GetRequiredArrays" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_GetRequiredArrays" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp4);
  result = (int)((sensei::DataRequirements const *)arg1)->GetRequiredArrays((std::string const &)*arg2,arg3,*arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_GetNumberOfRequiredArrays(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  unsigned int *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataRequirements_GetNumberOfRequiredArrays", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_GetNumberOfRequiredArrays" "', argument " "1"" of type '" "sensei::DataRequirements const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataRequirements_GetNumberOfRequiredArrays" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_GetNumberOfRequiredArrays" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataRequirements_GetNumberOfRequiredArrays" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_unsigned_int,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DataRequirements_GetNumberOfRequiredArrays" "', argument " "4"" of type '" "unsigned int &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_GetNumberOfRequiredArrays" "', argument " "4"" of type '" "unsigned int &""'"); 
  }
  arg4 = reinterpret_cast< unsigned int * >(argp4);
  result = (int)((sensei::DataRequirements const *)arg1)->GetNumberOfRequiredArrays((std::string const &)*arg2,arg3,*arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_Clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_Clear" "', argument " "1"" of type '" "sensei::DataRequirements *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_GetMeshRequirementsIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::MeshRequirementsIterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_GetMeshRequirementsIterator" "', argument " "1"" of type '" "sensei::DataRequirements const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  result = ((sensei::DataRequirements const *)arg1)->GetMeshRequirementsIterator();
  resultobj = SWIG_NewPointerObj((new sensei::MeshRequirementsIterator(result)), SWIGTYPE_p_sensei__MeshRequirementsIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataRequirements_GetArrayRequirementsIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::DataRequirements *arg1 = (sensei::DataRequirements *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  sensei::ArrayRequirementsIterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "DataRequirements_GetArrayRequirementsIterator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__DataRequirements, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataRequirements_GetArrayRequirementsIterator" "', argument " "1"" of type '" "sensei::DataRequirements const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::DataRequirements * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataRequirements_GetArrayRequirementsIterator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataRequirements_GetArrayRequirementsIterator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((sensei::DataRequirements const *)arg1)->GetArrayRequirementsIterator((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj((new sensei::ArrayRequirementsIterator(result)), SWIGTYPE_p_sensei__ArrayRequirementsIterator, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *DataRequirements_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__DataRequirements, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *DataRequirements_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MeshRequirementsIterator__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  sensei::MeshRequirementsIterator *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (sensei::MeshRequirementsIterator *)new sensei::MeshRequirementsIterator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__MeshRequirementsIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeshRequirementsIterator__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::DataRequirements::MeshNamesType *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  sensei::MeshRequirementsIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > > *ptr = (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MeshRequirementsIterator" "', argument " "1"" of type '" "sensei::DataRequirements::MeshNamesType const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MeshRequirementsIterator" "', argument " "1"" of type '" "sensei::DataRequirements::MeshNamesType const &""'"); 
    }
    arg1 = ptr;
  }
  result = (sensei::MeshRequirementsIterator *)new sensei::MeshRequirementsIterator((sensei::DataRequirements::MeshNamesType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__MeshRequirementsIterator, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MeshRequirementsIterator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_MeshRequirementsIterator", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_MeshRequirementsIterator__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MeshRequirementsIterator__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_MeshRequirementsIterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::MeshRequirementsIterator::MeshRequirementsIterator()\n"
    "    sensei::MeshRequirementsIterator::MeshRequirementsIterator(sensei::DataRequirements::MeshNamesType const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MeshRequirementsIterator_MeshName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshRequirementsIterator *arg1 = (sensei::MeshRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshRequirementsIterator_MeshName" "', argument " "1"" of type '" "sensei::MeshRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshRequirementsIterator * >(argp1);
  result = (std::string *) &(arg1)->MeshName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshRequirementsIterator_StructureOnly(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshRequirementsIterator *arg1 = (sensei::MeshRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshRequirementsIterator_StructureOnly" "', argument " "1"" of type '" "sensei::MeshRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshRequirementsIterator * >(argp1);
  result = (bool)(arg1)->StructureOnly();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshRequirementsIterator___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshRequirementsIterator *arg1 = (sensei::MeshRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshRequirementsIterator___bool__" "', argument " "1"" of type '" "sensei::MeshRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshRequirementsIterator * >(argp1);
  result = (int)sensei_MeshRequirementsIterator___bool__(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MeshRequirementsIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshRequirementsIterator *arg1 = (sensei::MeshRequirementsIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  sensei::MeshRequirementsIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "MeshRequirementsIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MeshRequirementsIterator___iadd__" "', argument " "1"" of type '" "sensei::MeshRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshRequirementsIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MeshRequirementsIterator___iadd__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (sensei::MeshRequirementsIterator *) &sensei_MeshRequirementsIterator___iadd__(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__MeshRequirementsIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MeshRequirementsIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::MeshRequirementsIterator *arg1 = (sensei::MeshRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__MeshRequirementsIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MeshRequirementsIterator" "', argument " "1"" of type '" "sensei::MeshRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::MeshRequirementsIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MeshRequirementsIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__MeshRequirementsIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MeshRequirementsIterator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ArrayRequirementsIterator__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  sensei::ArrayRequirementsIterator *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (sensei::ArrayRequirementsIterator *)new sensei::ArrayRequirementsIterator();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ArrayRequirementsIterator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayRequirementsIterator__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::DataRequirements::AssocArrayMapType *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  sensei::ArrayRequirementsIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > > *ptr = (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArrayRequirementsIterator" "', argument " "1"" of type '" "sensei::DataRequirements::AssocArrayMapType const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArrayRequirementsIterator" "', argument " "1"" of type '" "sensei::DataRequirements::AssocArrayMapType const &""'"); 
    }
    arg1 = ptr;
  }
  result = (sensei::ArrayRequirementsIterator *)new sensei::ArrayRequirementsIterator((sensei::DataRequirements::AssocArrayMapType const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ArrayRequirementsIterator, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArrayRequirementsIterator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ArrayRequirementsIterator", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ArrayRequirementsIterator__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v = 0;
    int res = swig::asptr(argv[0], (std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArrayRequirementsIterator__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ArrayRequirementsIterator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::ArrayRequirementsIterator::ArrayRequirementsIterator()\n"
    "    sensei::ArrayRequirementsIterator::ArrayRequirementsIterator(sensei::DataRequirements::AssocArrayMapType const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ArrayRequirementsIterator_SetMode(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ArrayRequirementsIterator *arg1 = (sensei::ArrayRequirementsIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ArrayRequirementsIterator_SetMode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRequirementsIterator_SetMode" "', argument " "1"" of type '" "sensei::ArrayRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ArrayRequirementsIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArrayRequirementsIterator_SetMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetMode(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRequirementsIterator_Association(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ArrayRequirementsIterator *arg1 = (sensei::ArrayRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRequirementsIterator_Association" "', argument " "1"" of type '" "sensei::ArrayRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ArrayRequirementsIterator * >(argp1);
  result = (int)(arg1)->Association();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRequirementsIterator_Arrays(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ArrayRequirementsIterator *arg1 = (sensei::ArrayRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRequirementsIterator_Arrays" "', argument " "1"" of type '" "sensei::ArrayRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ArrayRequirementsIterator * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *) &(arg1)->Arrays();
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRequirementsIterator_Array(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ArrayRequirementsIterator *arg1 = (sensei::ArrayRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRequirementsIterator_Array" "', argument " "1"" of type '" "sensei::ArrayRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ArrayRequirementsIterator * >(argp1);
  result = (std::string *) &(arg1)->Array();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRequirementsIterator_NextAssociation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ArrayRequirementsIterator *arg1 = (sensei::ArrayRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::ArrayRequirementsIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRequirementsIterator_NextAssociation" "', argument " "1"" of type '" "sensei::ArrayRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ArrayRequirementsIterator * >(argp1);
  result = (sensei::ArrayRequirementsIterator *) &(arg1)->NextAssociation();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRequirementsIterator_NextArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ArrayRequirementsIterator *arg1 = (sensei::ArrayRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::ArrayRequirementsIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRequirementsIterator_NextArray" "', argument " "1"" of type '" "sensei::ArrayRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ArrayRequirementsIterator * >(argp1);
  result = (sensei::ArrayRequirementsIterator *) &(arg1)->NextArray();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRequirementsIterator___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ArrayRequirementsIterator *arg1 = (sensei::ArrayRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRequirementsIterator___bool__" "', argument " "1"" of type '" "sensei::ArrayRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ArrayRequirementsIterator * >(argp1);
  result = (int)sensei_ArrayRequirementsIterator___bool__(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArrayRequirementsIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ArrayRequirementsIterator *arg1 = (sensei::ArrayRequirementsIterator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  sensei::ArrayRequirementsIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ArrayRequirementsIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayRequirementsIterator___iadd__" "', argument " "1"" of type '" "sensei::ArrayRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ArrayRequirementsIterator * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArrayRequirementsIterator___iadd__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (sensei::ArrayRequirementsIterator *) &sensei_ArrayRequirementsIterator___iadd__(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ArrayRequirementsIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ArrayRequirementsIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ArrayRequirementsIterator *arg1 = (sensei::ArrayRequirementsIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ArrayRequirementsIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArrayRequirementsIterator" "', argument " "1"" of type '" "sensei::ArrayRequirementsIterator *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ArrayRequirementsIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ArrayRequirementsIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__ArrayRequirementsIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ArrayRequirementsIterator_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_AnalysisAdaptor_IsTypeOf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkTypeBool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_IsTypeOf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkTypeBool)sensei::AnalysisAdaptor::IsTypeOf((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_IsA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkTypeBool result;
  
  if (!SWIG_Python_UnpackTuple(args, "AnalysisAdaptor_IsA", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_IsA" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnalysisAdaptor_IsA" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkTypeBool)(arg1)->IsA((char const *)arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_SafeDownCast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  svtkObjectBase *arg1 = (svtkObjectBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::AnalysisAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_svtkObjectBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_SafeDownCast" "', argument " "1"" of type '" "svtkObjectBase *""'"); 
  }
  arg1 = reinterpret_cast< svtkObjectBase * >(argp1);
  result = (sensei::AnalysisAdaptor *)sensei::AnalysisAdaptor::SafeDownCast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_NewInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::AnalysisAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_NewInstance" "', argument " "1"" of type '" "sensei::AnalysisAdaptor const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  result = (sensei::AnalysisAdaptor *)((sensei::AnalysisAdaptor const *)arg1)->NewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__AnalysisAdaptor, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_GetNumberOfGenerationsFromBaseType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkIdType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_GetNumberOfGenerationsFromBaseType" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkIdType)sensei::AnalysisAdaptor::GetNumberOfGenerationsFromBaseType((char const *)arg1);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_GetNumberOfGenerationsFromBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkIdType result;
  
  if (!SWIG_Python_UnpackTuple(args, "AnalysisAdaptor_GetNumberOfGenerationsFromBase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_GetNumberOfGenerationsFromBase" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnalysisAdaptor_GetNumberOfGenerationsFromBase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkIdType)(arg1)->GetNumberOfGenerationsFromBase((char const *)arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_PrintSelf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  ostream *arg2 = 0 ;
  svtkIndent arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AnalysisAdaptor_PrintSelf", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_PrintSelf" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnalysisAdaptor_PrintSelf" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnalysisAdaptor_PrintSelf" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_svtkIndent,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnalysisAdaptor_PrintSelf" "', argument " "3"" of type '" "svtkIndent""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AnalysisAdaptor_PrintSelf" "', argument " "3"" of type '" "svtkIndent""'");
    } else {
      svtkIndent * temp = reinterpret_cast< svtkIndent * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->PrintSelf(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_SetVerbose(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "AnalysisAdaptor_SetVerbose", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_SetVerbose" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AnalysisAdaptor_SetVerbose" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetVerbose(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_GetVerbose(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_GetVerbose" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  result = (int)(arg1)->GetVerbose();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_SetCommunicator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  MPI_Comm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "AnalysisAdaptor_SetCommunicator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_SetCommunicator" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AnalysisAdaptor_SetCommunicator" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)(arg1)->SetCommunicator(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_GetCommunicator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  MPI_Comm result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_GetCommunicator" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  result = (arg1)->GetCommunicator();
  resultobj = SWIG_From_MPI_Comm(static_cast< MPI_Comm >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_Execute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  sensei::DataAdaptor *arg2 = (sensei::DataAdaptor *) 0 ;
  sensei::DataAdaptor **arg3 = (sensei::DataAdaptor **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "AnalysisAdaptor_Execute", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_Execute" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AnalysisAdaptor_Execute" "', argument " "2"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg2 = reinterpret_cast< sensei::DataAdaptor * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "AnalysisAdaptor_Execute" "', argument " "3"" of type '" "sensei::DataAdaptor **""'"); 
  }
  arg3 = reinterpret_cast< sensei::DataAdaptor ** >(argp3);
  result = (bool)(arg1)->Execute(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor_Finalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor_Finalize" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  result = (int)(arg1)->Finalize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AnalysisAdaptor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AnalysisAdaptor" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  arg1->UnRegister(nullptr);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AnalysisAdaptor___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::AnalysisAdaptor *arg1 = (sensei::AnalysisAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__AnalysisAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AnalysisAdaptor___str__" "', argument " "1"" of type '" "sensei::AnalysisAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::AnalysisAdaptor * >(argp1);
  result = sensei_AnalysisAdaptor___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AnalysisAdaptor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__AnalysisAdaptor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SVTKDataAdaptor_New", 0, 0, 0)) SWIG_fail;
  result = (sensei::SVTKDataAdaptor *)sensei::SVTKDataAdaptor::New();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__SVTKDataAdaptor, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_IsTypeOf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkTypeBool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_IsTypeOf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkTypeBool)sensei::SVTKDataAdaptor::IsTypeOf((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_IsA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkTypeBool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SVTKDataAdaptor_IsA", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_IsA" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVTKDataAdaptor_IsA" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkTypeBool)(arg1)->IsA((char const *)arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_SafeDownCast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  svtkObjectBase *arg1 = (svtkObjectBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::SVTKDataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_svtkObjectBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_SafeDownCast" "', argument " "1"" of type '" "svtkObjectBase *""'"); 
  }
  arg1 = reinterpret_cast< svtkObjectBase * >(argp1);
  result = (sensei::SVTKDataAdaptor *)sensei::SVTKDataAdaptor::SafeDownCast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_NewInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::SVTKDataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_NewInstance" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  result = (sensei::SVTKDataAdaptor *)((sensei::SVTKDataAdaptor const *)arg1)->NewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__SVTKDataAdaptor, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_GetNumberOfGenerationsFromBaseType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkIdType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_GetNumberOfGenerationsFromBaseType" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkIdType)sensei::SVTKDataAdaptor::GetNumberOfGenerationsFromBaseType((char const *)arg1);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_GetNumberOfGenerationsFromBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkIdType result;
  
  if (!SWIG_Python_UnpackTuple(args, "SVTKDataAdaptor_GetNumberOfGenerationsFromBase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_GetNumberOfGenerationsFromBase" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVTKDataAdaptor_GetNumberOfGenerationsFromBase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkIdType)(arg1)->GetNumberOfGenerationsFromBase((char const *)arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_SetDataObject(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  svtkDataObject *arg3 = (svtkDataObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SVTKDataAdaptor_SetDataObject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_SetDataObject" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVTKDataAdaptor_SetDataObject" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVTKDataAdaptor_SetDataObject" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SVTKDataAdaptor_SetDataObject" "', argument " "3"" of type '" "svtkDataObject *""'"); 
  }
  arg3 = reinterpret_cast< svtkDataObject * >(argp3);
  (arg1)->SetDataObject((std::string const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_GetDataObject(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  svtkDataObject **arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "SVTKDataAdaptor_GetDataObject", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_GetDataObject" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVTKDataAdaptor_GetDataObject" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVTKDataAdaptor_GetDataObject" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_p_svtkDataObject,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SVTKDataAdaptor_GetDataObject" "', argument " "3"" of type '" "svtkDataObject *&""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVTKDataAdaptor_GetDataObject" "', argument " "3"" of type '" "svtkDataObject *&""'"); 
  }
  arg3 = reinterpret_cast< svtkDataObject ** >(argp3);
  result = (int)(arg1)->GetDataObject((std::string const &)*arg2,*arg3);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SVTKDataAdaptor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SVTKDataAdaptor" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  arg1->UnRegister(nullptr);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SVTKDataAdaptor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SVTKDataAdaptor", 0, 0, 0)) SWIG_fail;
  result = (sensei::SVTKDataAdaptor *)new_sensei_SVTKDataAdaptor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__SVTKDataAdaptor, SWIG_POINTER_NEW |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor___str__" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  result = sensei_SVTKDataAdaptor___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_GetNumberOfMeshes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_GetNumberOfMeshes" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  result = (unsigned int)sensei_SVTKDataAdaptor_GetNumberOfMeshes(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_GetMeshMetadata__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  unsigned int arg2 ;
  sensei::MeshMetadataFlags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_GetMeshMetadata" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVTKDataAdaptor_GetMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_sensei__MeshMetadataFlags,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SVTKDataAdaptor_GetMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataFlags""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVTKDataAdaptor_GetMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataFlags""'");
    } else {
      sensei::MeshMetadataFlags * temp = reinterpret_cast< sensei::MeshMetadataFlags * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = sensei_SVTKDataAdaptor_GetMeshMetadata__SWIG_0(arg1,arg2,SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_GetMeshMetadata__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_GetMeshMetadata" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SVTKDataAdaptor_GetMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = sensei_SVTKDataAdaptor_GetMeshMetadata__SWIG_0(arg1,arg2);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_GetMeshMetadata(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SVTKDataAdaptor_GetMeshMetadata", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__SVTKDataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SVTKDataAdaptor_GetMeshMetadata__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__SVTKDataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SVTKDataAdaptor_GetMeshMetadata__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SVTKDataAdaptor_GetMeshMetadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::SVTKDataAdaptor::GetMeshMetadata(unsigned int,sensei::MeshMetadataFlags)\n"
    "    sensei::SVTKDataAdaptor::GetMeshMetadata(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  svtkDataObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SVTKDataAdaptor_GetMesh", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_GetMesh" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVTKDataAdaptor_GetMesh" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVTKDataAdaptor_GetMesh" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SVTKDataAdaptor_GetMesh" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (svtkDataObject *)sensei_SVTKDataAdaptor_GetMesh(arg1,(std::string const &)*arg2,arg3);
  {
    if (dynamic_cast<svtkOverlappingAMR*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkOverlappingAMR*>(result),
        SWIGTYPE_p_svtkOverlappingAMR, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkMultiBlockDataSet*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkMultiBlockDataSet*>(result),
        SWIGTYPE_p_svtkMultiBlockDataSet, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkCompositeDataSet*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkCompositeDataSet*>(result),
        SWIGTYPE_p_svtkCompositeDataSet, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkImageData*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkImageData*>(result),
        SWIGTYPE_p_svtkImageData, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkRectilinearGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkRectilinearGrid*>(result),
        SWIGTYPE_p_svtkRectilinearGrid, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkPolyData*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkPolyData*>(result),
        SWIGTYPE_p_svtkPolyData, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkUnstructuredGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkUnstructuredGrid*>(result),
        SWIGTYPE_p_svtkUnstructuredGrid, SWIG_POINTER_OWN);
    }
    else if (dynamic_cast<svtkStructuredGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkStructuredGrid*>(result),
        SWIGTYPE_p_svtkStructuredGrid, SWIG_POINTER_OWN);
    }
    else
    {
      std::cerr << "NOTE: Automatic conversions for "
      << result->GetClassName() << " are not implemented."
      << std::endl;
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkDataObject*>(result),
        SWIGTYPE_p_svtkDataObject, SWIG_POINTER_OWN);
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_AddArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject *swig_obj[5] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SVTKDataAdaptor_AddArray", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_AddArray" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SVTKDataAdaptor_AddArray" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SVTKDataAdaptor_AddArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVTKDataAdaptor_AddArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SVTKDataAdaptor_AddArray" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SVTKDataAdaptor_AddArray" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SVTKDataAdaptor_AddArray" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  sensei_SVTKDataAdaptor_AddArray(arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SVTKDataAdaptor_ReleaseData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::SVTKDataAdaptor *arg1 = (sensei::SVTKDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__SVTKDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SVTKDataAdaptor_ReleaseData" "', argument " "1"" of type '" "sensei::SVTKDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::SVTKDataAdaptor * >(argp1);
  sensei_SVTKDataAdaptor_ReleaseData(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SVTKDataAdaptor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__SVTKDataAdaptor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SVTKDataAdaptor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_New", 0, 0, 0)) SWIG_fail;
  result = (sensei::ProgrammableDataAdaptor *)sensei::ProgrammableDataAdaptor::New();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ProgrammableDataAdaptor, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_IsTypeOf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkTypeBool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_IsTypeOf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkTypeBool)sensei::ProgrammableDataAdaptor::IsTypeOf((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_IsA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkTypeBool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_IsA", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_IsA" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProgrammableDataAdaptor_IsA" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkTypeBool)(arg1)->IsA((char const *)arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_SafeDownCast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  svtkObjectBase *arg1 = (svtkObjectBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::ProgrammableDataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_svtkObjectBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_SafeDownCast" "', argument " "1"" of type '" "svtkObjectBase *""'"); 
  }
  arg1 = reinterpret_cast< svtkObjectBase * >(argp1);
  result = (sensei::ProgrammableDataAdaptor *)sensei::ProgrammableDataAdaptor::SafeDownCast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_NewInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::ProgrammableDataAdaptor *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_NewInstance" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  result = (sensei::ProgrammableDataAdaptor *)((sensei::ProgrammableDataAdaptor const *)arg1)->NewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ProgrammableDataAdaptor, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_GetNumberOfGenerationsFromBaseType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkIdType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_GetNumberOfGenerationsFromBaseType" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkIdType)sensei::ProgrammableDataAdaptor::GetNumberOfGenerationsFromBaseType((char const *)arg1);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_GetNumberOfGenerationsFromBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkIdType result;
  
  if (!SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_GetNumberOfGenerationsFromBase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_GetNumberOfGenerationsFromBase" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProgrammableDataAdaptor_GetNumberOfGenerationsFromBase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkIdType)(arg1)->GetNumberOfGenerationsFromBase((char const *)arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ProgrammableDataAdaptor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ProgrammableDataAdaptor" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  arg1->UnRegister(nullptr);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ProgrammableDataAdaptor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ProgrammableDataAdaptor", 0, 0, 0)) SWIG_fail;
  result = (sensei::ProgrammableDataAdaptor *)new_sensei_ProgrammableDataAdaptor();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ProgrammableDataAdaptor, SWIG_POINTER_NEW |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor___str__" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  result = sensei_ProgrammableDataAdaptor___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_GetNumberOfMeshes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_GetNumberOfMeshes" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  result = (unsigned int)sensei_ProgrammableDataAdaptor_GetNumberOfMeshes(arg1);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_GetMeshMetadata__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  unsigned int arg2 ;
  sensei::MeshMetadataFlags arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_GetMeshMetadata" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProgrammableDataAdaptor_GetMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_sensei__MeshMetadataFlags,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ProgrammableDataAdaptor_GetMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataFlags""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProgrammableDataAdaptor_GetMeshMetadata" "', argument " "3"" of type '" "sensei::MeshMetadataFlags""'");
    } else {
      sensei::MeshMetadataFlags * temp = reinterpret_cast< sensei::MeshMetadataFlags * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = sensei_ProgrammableDataAdaptor_GetMeshMetadata__SWIG_0(arg1,arg2,SWIG_STD_MOVE(arg3));
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_GetMeshMetadata__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  sensei::MeshMetadataPtr result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_GetMeshMetadata" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ProgrammableDataAdaptor_GetMeshMetadata" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = sensei_ProgrammableDataAdaptor_GetMeshMetadata__SWIG_0(arg1,arg2);
  {
    std::shared_ptr<  sensei::MeshMetadata > *smartresult = result ? new std::shared_ptr<  sensei::MeshMetadata >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_std__shared_ptrT_sensei__MeshMetadata_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_GetMeshMetadata(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_GetMeshMetadata", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ProgrammableDataAdaptor_GetMeshMetadata__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_sensei__MeshMetadataFlags, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ProgrammableDataAdaptor_GetMeshMetadata__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ProgrammableDataAdaptor_GetMeshMetadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::ProgrammableDataAdaptor::GetMeshMetadata(unsigned int,sensei::MeshMetadataFlags)\n"
    "    sensei::ProgrammableDataAdaptor::GetMeshMetadata(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_GetMesh(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  svtkDataObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_GetMesh", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_GetMesh" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProgrammableDataAdaptor_GetMesh" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProgrammableDataAdaptor_GetMesh" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ProgrammableDataAdaptor_GetMesh" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (svtkDataObject *)sensei_ProgrammableDataAdaptor_GetMesh(arg1,(std::string const &)*arg2,arg3);
  {
    if (dynamic_cast<svtkOverlappingAMR*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkOverlappingAMR*>(result),
        SWIGTYPE_p_svtkOverlappingAMR, 0);
    }
    else if (dynamic_cast<svtkMultiBlockDataSet*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkMultiBlockDataSet*>(result),
        SWIGTYPE_p_svtkMultiBlockDataSet, 0);
    }
    else if (dynamic_cast<svtkCompositeDataSet*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkCompositeDataSet*>(result),
        SWIGTYPE_p_svtkCompositeDataSet, 0);
    }
    else if (dynamic_cast<svtkImageData*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkImageData*>(result),
        SWIGTYPE_p_svtkImageData, 0);
    }
    else if (dynamic_cast<svtkRectilinearGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkRectilinearGrid*>(result),
        SWIGTYPE_p_svtkRectilinearGrid, 0);
    }
    else if (dynamic_cast<svtkPolyData*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkPolyData*>(result),
        SWIGTYPE_p_svtkPolyData, 0);
    }
    else if (dynamic_cast<svtkUnstructuredGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkUnstructuredGrid*>(result),
        SWIGTYPE_p_svtkUnstructuredGrid, 0);
    }
    else if (dynamic_cast<svtkStructuredGrid*>(result))
    {
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkStructuredGrid*>(result),
        SWIGTYPE_p_svtkStructuredGrid, 0);
    }
    else
    {
      std::cerr << "NOTE: Automatic conversions for "
      << result->GetClassName() << " are not implemented."
      << std::endl;
      resultobj = SWIG_NewPointerObj(
        (void*)static_cast<svtkDataObject*>(result),
        SWIGTYPE_p_svtkDataObject, 0);
    }
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_AddArray(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  svtkDataObject *arg2 = (svtkDataObject *) 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject *swig_obj[5] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_AddArray", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_AddArray" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_svtkDataObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ProgrammableDataAdaptor_AddArray" "', argument " "2"" of type '" "svtkDataObject *""'"); 
  }
  arg2 = reinterpret_cast< svtkDataObject * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ProgrammableDataAdaptor_AddArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProgrammableDataAdaptor_AddArray" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ProgrammableDataAdaptor_AddArray" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "ProgrammableDataAdaptor_AddArray" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ProgrammableDataAdaptor_AddArray" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  sensei_ProgrammableDataAdaptor_AddArray(arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_ReleaseData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_ReleaseData" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  sensei_ProgrammableDataAdaptor_ReleaseData(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_SetGetNumberOfMeshesCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_SetGetNumberOfMeshesCallback", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_SetGetNumberOfMeshesCallback" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  arg2 = swig_obj[1];
  sensei_ProgrammableDataAdaptor_SetGetNumberOfMeshesCallback(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_SetGetMeshMetadataCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_SetGetMeshMetadataCallback", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_SetGetMeshMetadataCallback" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  arg2 = swig_obj[1];
  sensei_ProgrammableDataAdaptor_SetGetMeshMetadataCallback(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_SetGetMeshCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_SetGetMeshCallback", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_SetGetMeshCallback" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  arg2 = swig_obj[1];
  sensei_ProgrammableDataAdaptor_SetGetMeshCallback(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_SetAddArrayCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_SetAddArrayCallback", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_SetAddArrayCallback" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  arg2 = swig_obj[1];
  sensei_ProgrammableDataAdaptor_SetAddArrayCallback(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ProgrammableDataAdaptor_SetReleaseDataCallback(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ProgrammableDataAdaptor *arg1 = (sensei::ProgrammableDataAdaptor *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ProgrammableDataAdaptor_SetReleaseDataCallback", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ProgrammableDataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ProgrammableDataAdaptor_SetReleaseDataCallback" "', argument " "1"" of type '" "sensei::ProgrammableDataAdaptor *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ProgrammableDataAdaptor * >(argp1);
  arg2 = swig_obj[1];
  sensei_ProgrammableDataAdaptor_SetReleaseDataCallback(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ProgrammableDataAdaptor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__ProgrammableDataAdaptor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ProgrammableDataAdaptor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableAnalysis_New", 0, 0, 0)) SWIG_fail;
  result = (sensei::ConfigurableAnalysis *)sensei::ConfigurableAnalysis::New();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ConfigurableAnalysis, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_IsTypeOf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkTypeBool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_IsTypeOf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkTypeBool)sensei::ConfigurableAnalysis::IsTypeOf((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_IsA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkTypeBool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableAnalysis_IsA", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_IsA" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableAnalysis_IsA" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkTypeBool)(arg1)->IsA((char const *)arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_SafeDownCast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  svtkObjectBase *arg1 = (svtkObjectBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::ConfigurableAnalysis *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_svtkObjectBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_SafeDownCast" "', argument " "1"" of type '" "svtkObjectBase *""'"); 
  }
  arg1 = reinterpret_cast< svtkObjectBase * >(argp1);
  result = (sensei::ConfigurableAnalysis *)sensei::ConfigurableAnalysis::SafeDownCast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_NewInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::ConfigurableAnalysis *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_NewInstance" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  result = (sensei::ConfigurableAnalysis *)((sensei::ConfigurableAnalysis const *)arg1)->NewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ConfigurableAnalysis, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_GetNumberOfGenerationsFromBaseType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkIdType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_GetNumberOfGenerationsFromBaseType" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkIdType)sensei::ConfigurableAnalysis::GetNumberOfGenerationsFromBaseType((char const *)arg1);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_GetNumberOfGenerationsFromBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkIdType result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableAnalysis_GetNumberOfGenerationsFromBase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_GetNumberOfGenerationsFromBase" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableAnalysis_GetNumberOfGenerationsFromBase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkIdType)(arg1)->GetNumberOfGenerationsFromBase((char const *)arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_PrintSelf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  ostream *arg2 = 0 ;
  svtkIndent arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableAnalysis_PrintSelf", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_PrintSelf" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableAnalysis_PrintSelf" "', argument " "2"" of type '" "ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableAnalysis_PrintSelf" "', argument " "2"" of type '" "ostream &""'"); 
  }
  arg2 = reinterpret_cast< ostream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_svtkIndent,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConfigurableAnalysis_PrintSelf" "', argument " "3"" of type '" "svtkIndent""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableAnalysis_PrintSelf" "', argument " "3"" of type '" "svtkIndent""'");
    } else {
      svtkIndent * temp = reinterpret_cast< svtkIndent * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->PrintSelf(*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_SetCommunicator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  MPI_Comm arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableAnalysis_SetCommunicator", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_SetCommunicator" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  {
    MPI_Comm *ptr = (MPI_Comm *)0;
    int res = SWIG_AsPtr_MPI_Comm(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ConfigurableAnalysis_SetCommunicator" "', argument " "2"" of type '" "MPI_Comm""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)(arg1)->SetCommunicator(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_Initialize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_Initialize" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableAnalysis_Initialize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableAnalysis_Initialize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)(arg1)->Initialize((std::string const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_Initialize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  pugi::xml_node *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_Initialize" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_pugi__xml_node,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableAnalysis_Initialize" "', argument " "2"" of type '" "pugi::xml_node const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConfigurableAnalysis_Initialize" "', argument " "2"" of type '" "pugi::xml_node const &""'"); 
  }
  arg2 = reinterpret_cast< pugi::xml_node * >(argp2);
  result = (int)(arg1)->Initialize((pugi::xml_node const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_Initialize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ConfigurableAnalysis_Initialize", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__ConfigurableAnalysis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_pugi__xml_node, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConfigurableAnalysis_Initialize__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__ConfigurableAnalysis, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ConfigurableAnalysis_Initialize__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ConfigurableAnalysis_Initialize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::ConfigurableAnalysis::Initialize(std::string const &)\n"
    "    sensei::ConfigurableAnalysis::Initialize(pugi::xml_node const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_Finalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_Finalize" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  result = (int)(arg1)->Finalize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ConfigurableAnalysis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConfigurableAnalysis" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  arg1->UnRegister(nullptr);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ConfigurableAnalysis(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ConfigurableAnalysis", 0, 0, 0)) SWIG_fail;
  result = (sensei::ConfigurableAnalysis *)new_sensei_ConfigurableAnalysis();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__ConfigurableAnalysis, SWIG_POINTER_NEW |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis___str__" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  result = sensei_ConfigurableAnalysis___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConfigurableAnalysis_Execute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::ConfigurableAnalysis *arg1 = (sensei::ConfigurableAnalysis *) 0 ;
  sensei::DataAdaptor *arg2 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "ConfigurableAnalysis_Execute", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__ConfigurableAnalysis, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConfigurableAnalysis_Execute" "', argument " "1"" of type '" "sensei::ConfigurableAnalysis *""'"); 
  }
  arg1 = reinterpret_cast< sensei::ConfigurableAnalysis * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConfigurableAnalysis_Execute" "', argument " "2"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg2 = reinterpret_cast< sensei::DataAdaptor * >(argp2);
  result = (PyObject *)sensei_ConfigurableAnalysis_Execute(arg1,arg2);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ConfigurableAnalysis_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__ConfigurableAnalysis, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ConfigurableAnalysis_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Histogram_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Histogram *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Histogram_New", 0, 0, 0)) SWIG_fail;
  result = (sensei::Histogram *)sensei::Histogram::New();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__Histogram, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_IsTypeOf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkTypeBool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_IsTypeOf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkTypeBool)sensei::Histogram::IsTypeOf((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_IsA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Histogram *arg1 = (sensei::Histogram *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkTypeBool result;
  
  if (!SWIG_Python_UnpackTuple(args, "Histogram_IsA", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_IsA" "', argument " "1"" of type '" "sensei::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Histogram * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Histogram_IsA" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkTypeBool)(arg1)->IsA((char const *)arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_SafeDownCast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  svtkObjectBase *arg1 = (svtkObjectBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::Histogram *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_svtkObjectBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_SafeDownCast" "', argument " "1"" of type '" "svtkObjectBase *""'"); 
  }
  arg1 = reinterpret_cast< svtkObjectBase * >(argp1);
  result = (sensei::Histogram *)sensei::Histogram::SafeDownCast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__Histogram, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_NewInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Histogram *arg1 = (sensei::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::Histogram *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_NewInstance" "', argument " "1"" of type '" "sensei::Histogram const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Histogram * >(argp1);
  result = (sensei::Histogram *)((sensei::Histogram const *)arg1)->NewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__Histogram, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_GetNumberOfGenerationsFromBaseType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkIdType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_GetNumberOfGenerationsFromBaseType" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkIdType)sensei::Histogram::GetNumberOfGenerationsFromBaseType((char const *)arg1);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_GetNumberOfGenerationsFromBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Histogram *arg1 = (sensei::Histogram *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkIdType result;
  
  if (!SWIG_Python_UnpackTuple(args, "Histogram_GetNumberOfGenerationsFromBase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_GetNumberOfGenerationsFromBase" "', argument " "1"" of type '" "sensei::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Histogram * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Histogram_GetNumberOfGenerationsFromBase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkIdType)(arg1)->GetNumberOfGenerationsFromBase((char const *)arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_Initialize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Histogram *arg1 = (sensei::Histogram *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  int res6 = SWIG_OLDOBJ ;
  PyObject *swig_obj[6] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Histogram_Initialize", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_Initialize" "', argument " "1"" of type '" "sensei::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Histogram * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Histogram_Initialize" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Histogram_Initialize" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Histogram_Initialize" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Histogram_Initialize" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Histogram_Initialize" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Histogram_Initialize" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(swig_obj[5], &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Histogram_Initialize" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Histogram_Initialize" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  (arg1)->Initialize(arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_Execute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Histogram *arg1 = (sensei::Histogram *) 0 ;
  sensei::DataAdaptor *arg2 = (sensei::DataAdaptor *) 0 ;
  sensei::DataAdaptor **arg3 = (sensei::DataAdaptor **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "Histogram_Execute", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_Execute" "', argument " "1"" of type '" "sensei::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Histogram * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Histogram_Execute" "', argument " "2"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg2 = reinterpret_cast< sensei::DataAdaptor * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Histogram_Execute" "', argument " "3"" of type '" "sensei::DataAdaptor **""'"); 
  }
  arg3 = reinterpret_cast< sensei::DataAdaptor ** >(argp3);
  result = (bool)(arg1)->Execute(arg2,arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram_Finalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Histogram *arg1 = (sensei::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram_Finalize" "', argument " "1"" of type '" "sensei::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Histogram * >(argp1);
  result = (int)(arg1)->Finalize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Histogram(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Histogram *arg1 = (sensei::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Histogram, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Histogram" "', argument " "1"" of type '" "sensei::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Histogram * >(argp1);
  arg1->UnRegister(nullptr);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Histogram(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Histogram *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Histogram", 0, 0, 0)) SWIG_fail;
  result = (sensei::Histogram *)new_sensei_Histogram();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__Histogram, SWIG_POINTER_NEW |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Histogram___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Histogram *arg1 = (sensei::Histogram *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Histogram, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Histogram___str__" "', argument " "1"" of type '" "sensei::Histogram *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Histogram * >(argp1);
  result = sensei_Histogram___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Histogram_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__Histogram, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Histogram_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Autocorrelation_New(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Autocorrelation_New", 0, 0, 0)) SWIG_fail;
  result = (sensei::Autocorrelation *)sensei::Autocorrelation::New();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__Autocorrelation, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_IsTypeOf(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkTypeBool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_IsTypeOf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkTypeBool)sensei::Autocorrelation::IsTypeOf((char const *)arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_IsA(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *arg1 = (sensei::Autocorrelation *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkTypeBool result;
  
  if (!SWIG_Python_UnpackTuple(args, "Autocorrelation_IsA", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_IsA" "', argument " "1"" of type '" "sensei::Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Autocorrelation * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Autocorrelation_IsA" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkTypeBool)(arg1)->IsA((char const *)arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_SafeDownCast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  svtkObjectBase *arg1 = (svtkObjectBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::Autocorrelation *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_svtkObjectBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_SafeDownCast" "', argument " "1"" of type '" "svtkObjectBase *""'"); 
  }
  arg1 = reinterpret_cast< svtkObjectBase * >(argp1);
  result = (sensei::Autocorrelation *)sensei::Autocorrelation::SafeDownCast(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__Autocorrelation, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_NewInstance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *arg1 = (sensei::Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  sensei::Autocorrelation *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_NewInstance" "', argument " "1"" of type '" "sensei::Autocorrelation const *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Autocorrelation * >(argp1);
  result = (sensei::Autocorrelation *)((sensei::Autocorrelation const *)arg1)->NewInstance();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__Autocorrelation, SWIG_POINTER_OWN |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_GetNumberOfGenerationsFromBaseType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  svtkIdType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_GetNumberOfGenerationsFromBaseType" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (svtkIdType)sensei::Autocorrelation::GetNumberOfGenerationsFromBaseType((char const *)arg1);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_GetNumberOfGenerationsFromBase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *arg1 = (sensei::Autocorrelation *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  svtkIdType result;
  
  if (!SWIG_Python_UnpackTuple(args, "Autocorrelation_GetNumberOfGenerationsFromBase", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_GetNumberOfGenerationsFromBase" "', argument " "1"" of type '" "sensei::Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Autocorrelation * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Autocorrelation_GetNumberOfGenerationsFromBase" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (svtkIdType)(arg1)->GetNumberOfGenerationsFromBase((char const *)arg2);
  resultobj = SWIG_From_long_SS_long(static_cast< long long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_Initialize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *arg1 = (sensei::Autocorrelation *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  size_t arg6 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  size_t val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_Initialize" "', argument " "1"" of type '" "sensei::Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Autocorrelation * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Autocorrelation_Initialize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Autocorrelation_Initialize" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Autocorrelation_Initialize" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Autocorrelation_Initialize" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Autocorrelation_Initialize" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Autocorrelation_Initialize" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_size_t(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Autocorrelation_Initialize" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Autocorrelation_Initialize" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  (arg1)->Initialize(arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6,arg7);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_Initialize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *arg1 = (sensei::Autocorrelation *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  size_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  size_t val6 ;
  int ecode6 = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_Initialize" "', argument " "1"" of type '" "sensei::Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Autocorrelation * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Autocorrelation_Initialize" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Autocorrelation_Initialize" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Autocorrelation_Initialize" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Autocorrelation_Initialize" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Autocorrelation_Initialize" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Autocorrelation_Initialize" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  ecode6 = SWIG_AsVal_size_t(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Autocorrelation_Initialize" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  (arg1)->Initialize(arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,arg6);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_Initialize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Autocorrelation_Initialize", 0, 7, argv))) SWIG_fail;
  --argc;
  if (argc == 6) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__Autocorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Autocorrelation_Initialize__SWIG_1(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_sensei__Autocorrelation, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_size_t(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Autocorrelation_Initialize__SWIG_0(self, argc, argv);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Autocorrelation_Initialize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    sensei::Autocorrelation::Initialize(size_t,std::string const &,int,std::string const &,size_t,int)\n"
    "    sensei::Autocorrelation::Initialize(size_t,std::string const &,int,std::string const &,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_Finalize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *arg1 = (sensei::Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_Finalize" "', argument " "1"" of type '" "sensei::Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Autocorrelation * >(argp1);
  result = (int)(arg1)->Finalize();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Autocorrelation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *arg1 = (sensei::Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Autocorrelation, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Autocorrelation" "', argument " "1"" of type '" "sensei::Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Autocorrelation * >(argp1);
  arg1->UnRegister(nullptr);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Autocorrelation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Autocorrelation", 0, 0, 0)) SWIG_fail;
  result = (sensei::Autocorrelation *)new_sensei_Autocorrelation();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_sensei__Autocorrelation, SWIG_POINTER_NEW |  0 );
  result->Register(nullptr);
  result->UnRegister(nullptr);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *arg1 = (sensei::Autocorrelation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation___str__" "', argument " "1"" of type '" "sensei::Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Autocorrelation * >(argp1);
  result = sensei_Autocorrelation___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Autocorrelation_Execute(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  sensei::Autocorrelation *arg1 = (sensei::Autocorrelation *) 0 ;
  sensei::DataAdaptor *arg2 = (sensei::DataAdaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  PyObject *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Autocorrelation_Execute", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_sensei__Autocorrelation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Autocorrelation_Execute" "', argument " "1"" of type '" "sensei::Autocorrelation *""'"); 
  }
  arg1 = reinterpret_cast< sensei::Autocorrelation * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_sensei__DataAdaptor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Autocorrelation_Execute" "', argument " "2"" of type '" "sensei::DataAdaptor *""'"); 
  }
  arg2 = reinterpret_cast< sensei::DataAdaptor * >(argp2);
  result = (PyObject *)sensei_Autocorrelation_Execute(arg1,arg2);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Autocorrelation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_sensei__Autocorrelation, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Autocorrelation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, "delete_SwigPyIterator(SwigPyIterator self)"},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, "SwigPyIterator_value(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, "\n"
		"SwigPyIterator_incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: size_t\n"
		"\n"
		""},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, "\n"
		"SwigPyIterator_decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: size_t\n"
		"\n"
		""},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, "\n"
		"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: swig::SwigPyIterator const &\n"
		"\n"
		""},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, "\n"
		"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: swig::SwigPyIterator const &\n"
		"\n"
		""},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, "SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, "SwigPyIterator_next(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, "SwigPyIterator___next__(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, "SwigPyIterator_previous(SwigPyIterator self) -> PyObject *"},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, "\n"
		"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: ptrdiff_t\n"
		"\n"
		""},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, "\n"
		"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: swig::SwigPyIterator const &\n"
		"\n"
		""},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, "\n"
		"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: swig::SwigPyIterator const &\n"
		"\n"
		""},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, "\n"
		"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: ptrdiff_t\n"
		"\n"
		""},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, "\n"
		"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: ptrdiff_t\n"
		"\n"
		""},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, "\n"
		"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: ptrdiff_t\n"
		"\n"
		""},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, "\n"
		"SwigPyIterator___sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: ptrdiff_t\n"
		"\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: swig::SwigPyIterator const &\n"
		"\n"
		""},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "array_int_2_iterator", _wrap_array_int_2_iterator, METH_O, "array_int_2_iterator(array_int_2 self) -> SwigPyIterator"},
	 { "array_int_2___nonzero__", _wrap_array_int_2___nonzero__, METH_O, "array_int_2___nonzero__(array_int_2 self) -> bool"},
	 { "array_int_2___bool__", _wrap_array_int_2___bool__, METH_O, "array_int_2___bool__(array_int_2 self) -> bool"},
	 { "array_int_2___len__", _wrap_array_int_2___len__, METH_O, "array_int_2___len__(array_int_2 self) -> std::array< int,2 >::size_type"},
	 { "array_int_2___getslice__", _wrap_array_int_2___getslice__, METH_VARARGS, "\n"
		"array_int_2___getslice__(array_int_2 self, std::array< int,2 >::difference_type i, std::array< int,2 >::difference_type j) -> array_int_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,2 >::difference_type\n"
		"j: std::array< int,2 >::difference_type\n"
		"\n"
		""},
	 { "array_int_2___setslice__", _wrap_array_int_2___setslice__, METH_VARARGS, "\n"
		"array_int_2___setslice__(array_int_2 self, std::array< int,2 >::difference_type i, std::array< int,2 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,2 >::difference_type\n"
		"j: std::array< int,2 >::difference_type\n"
		"\n"
		"array_int_2___setslice__(array_int_2 self, std::array< int,2 >::difference_type i, std::array< int,2 >::difference_type j, array_int_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,2 >::difference_type\n"
		"j: std::array< int,2 >::difference_type\n"
		"v: std::array< int,2 > const &\n"
		"\n"
		""},
	 { "array_int_2___delslice__", _wrap_array_int_2___delslice__, METH_VARARGS, "\n"
		"array_int_2___delslice__(array_int_2 self, std::array< int,2 >::difference_type i, std::array< int,2 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,2 >::difference_type\n"
		"j: std::array< int,2 >::difference_type\n"
		"\n"
		""},
	 { "array_int_2___delitem__", _wrap_array_int_2___delitem__, METH_VARARGS, "\n"
		"array_int_2___delitem__(array_int_2 self, std::array< int,2 >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,2 >::difference_type\n"
		"\n"
		"array_int_2___delitem__(array_int_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "array_int_2___getitem__", _wrap_array_int_2___getitem__, METH_VARARGS, "\n"
		"array_int_2___getitem__(array_int_2 self, SWIGPY_SLICEOBJECT * slice) -> array_int_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_int_2___getitem__(array_int_2 self, std::array< int,2 >::difference_type i) -> std::array< int,2 >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,2 >::difference_type\n"
		"\n"
		""},
	 { "array_int_2___setitem__", _wrap_array_int_2___setitem__, METH_VARARGS, "\n"
		"array_int_2___setitem__(array_int_2 self, SWIGPY_SLICEOBJECT * slice, array_int_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::array< int,2 > const &\n"
		"\n"
		"array_int_2___setitem__(array_int_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_int_2___setitem__(array_int_2 self, std::array< int,2 >::difference_type i, std::array< int,2 >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,2 >::difference_type\n"
		"x: std::array< int,2 >::value_type const &\n"
		"\n"
		""},
	 { "new_array_int_2", _wrap_new_array_int_2, METH_VARARGS, "\n"
		"array_int_2()\n"
		"new_array_int_2(array_int_2 other) -> array_int_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::array< int,2 > const &\n"
		"\n"
		""},
	 { "array_int_2_empty", _wrap_array_int_2_empty, METH_O, "array_int_2_empty(array_int_2 self) -> bool"},
	 { "array_int_2_size", _wrap_array_int_2_size, METH_O, "array_int_2_size(array_int_2 self) -> std::array< int,2 >::size_type"},
	 { "array_int_2_swap", _wrap_array_int_2_swap, METH_VARARGS, "\n"
		"array_int_2_swap(array_int_2 self, array_int_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::array< int,2 > &\n"
		"\n"
		""},
	 { "array_int_2_begin", _wrap_array_int_2_begin, METH_O, "array_int_2_begin(array_int_2 self) -> std::array< int,2 >::iterator"},
	 { "array_int_2_end", _wrap_array_int_2_end, METH_O, "array_int_2_end(array_int_2 self) -> std::array< int,2 >::iterator"},
	 { "array_int_2_rbegin", _wrap_array_int_2_rbegin, METH_O, "array_int_2_rbegin(array_int_2 self) -> std::array< int,2 >::reverse_iterator"},
	 { "array_int_2_rend", _wrap_array_int_2_rend, METH_O, "array_int_2_rend(array_int_2 self) -> std::array< int,2 >::reverse_iterator"},
	 { "array_int_2_front", _wrap_array_int_2_front, METH_O, "array_int_2_front(array_int_2 self) -> std::array< int,2 >::value_type const &"},
	 { "array_int_2_back", _wrap_array_int_2_back, METH_O, "array_int_2_back(array_int_2 self) -> std::array< int,2 >::value_type const &"},
	 { "array_int_2_fill", _wrap_array_int_2_fill, METH_VARARGS, "\n"
		"array_int_2_fill(array_int_2 self, std::array< int,2 >::value_type const & u)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"u: std::array< int,2 >::value_type const &\n"
		"\n"
		""},
	 { "delete_array_int_2", _wrap_delete_array_int_2, METH_O, "delete_array_int_2(array_int_2 self)"},
	 { "array_int_2_swigregister", array_int_2_swigregister, METH_O, NULL},
	 { "array_int_2_swiginit", array_int_2_swiginit, METH_VARARGS, NULL},
	 { "array_int_3_iterator", _wrap_array_int_3_iterator, METH_O, "array_int_3_iterator(array_int_3 self) -> SwigPyIterator"},
	 { "array_int_3___nonzero__", _wrap_array_int_3___nonzero__, METH_O, "array_int_3___nonzero__(array_int_3 self) -> bool"},
	 { "array_int_3___bool__", _wrap_array_int_3___bool__, METH_O, "array_int_3___bool__(array_int_3 self) -> bool"},
	 { "array_int_3___len__", _wrap_array_int_3___len__, METH_O, "array_int_3___len__(array_int_3 self) -> std::array< int,3 >::size_type"},
	 { "array_int_3___getslice__", _wrap_array_int_3___getslice__, METH_VARARGS, "\n"
		"array_int_3___getslice__(array_int_3 self, std::array< int,3 >::difference_type i, std::array< int,3 >::difference_type j) -> array_int_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,3 >::difference_type\n"
		"j: std::array< int,3 >::difference_type\n"
		"\n"
		""},
	 { "array_int_3___setslice__", _wrap_array_int_3___setslice__, METH_VARARGS, "\n"
		"array_int_3___setslice__(array_int_3 self, std::array< int,3 >::difference_type i, std::array< int,3 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,3 >::difference_type\n"
		"j: std::array< int,3 >::difference_type\n"
		"\n"
		"array_int_3___setslice__(array_int_3 self, std::array< int,3 >::difference_type i, std::array< int,3 >::difference_type j, array_int_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,3 >::difference_type\n"
		"j: std::array< int,3 >::difference_type\n"
		"v: std::array< int,3 > const &\n"
		"\n"
		""},
	 { "array_int_3___delslice__", _wrap_array_int_3___delslice__, METH_VARARGS, "\n"
		"array_int_3___delslice__(array_int_3 self, std::array< int,3 >::difference_type i, std::array< int,3 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,3 >::difference_type\n"
		"j: std::array< int,3 >::difference_type\n"
		"\n"
		""},
	 { "array_int_3___delitem__", _wrap_array_int_3___delitem__, METH_VARARGS, "\n"
		"array_int_3___delitem__(array_int_3 self, std::array< int,3 >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,3 >::difference_type\n"
		"\n"
		"array_int_3___delitem__(array_int_3 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "array_int_3___getitem__", _wrap_array_int_3___getitem__, METH_VARARGS, "\n"
		"array_int_3___getitem__(array_int_3 self, SWIGPY_SLICEOBJECT * slice) -> array_int_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_int_3___getitem__(array_int_3 self, std::array< int,3 >::difference_type i) -> std::array< int,3 >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,3 >::difference_type\n"
		"\n"
		""},
	 { "array_int_3___setitem__", _wrap_array_int_3___setitem__, METH_VARARGS, "\n"
		"array_int_3___setitem__(array_int_3 self, SWIGPY_SLICEOBJECT * slice, array_int_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::array< int,3 > const &\n"
		"\n"
		"array_int_3___setitem__(array_int_3 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_int_3___setitem__(array_int_3 self, std::array< int,3 >::difference_type i, std::array< int,3 >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,3 >::difference_type\n"
		"x: std::array< int,3 >::value_type const &\n"
		"\n"
		""},
	 { "new_array_int_3", _wrap_new_array_int_3, METH_VARARGS, "\n"
		"array_int_3()\n"
		"new_array_int_3(array_int_3 other) -> array_int_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::array< int,3 > const &\n"
		"\n"
		""},
	 { "array_int_3_empty", _wrap_array_int_3_empty, METH_O, "array_int_3_empty(array_int_3 self) -> bool"},
	 { "array_int_3_size", _wrap_array_int_3_size, METH_O, "array_int_3_size(array_int_3 self) -> std::array< int,3 >::size_type"},
	 { "array_int_3_swap", _wrap_array_int_3_swap, METH_VARARGS, "\n"
		"array_int_3_swap(array_int_3 self, array_int_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::array< int,3 > &\n"
		"\n"
		""},
	 { "array_int_3_begin", _wrap_array_int_3_begin, METH_O, "array_int_3_begin(array_int_3 self) -> std::array< int,3 >::iterator"},
	 { "array_int_3_end", _wrap_array_int_3_end, METH_O, "array_int_3_end(array_int_3 self) -> std::array< int,3 >::iterator"},
	 { "array_int_3_rbegin", _wrap_array_int_3_rbegin, METH_O, "array_int_3_rbegin(array_int_3 self) -> std::array< int,3 >::reverse_iterator"},
	 { "array_int_3_rend", _wrap_array_int_3_rend, METH_O, "array_int_3_rend(array_int_3 self) -> std::array< int,3 >::reverse_iterator"},
	 { "array_int_3_front", _wrap_array_int_3_front, METH_O, "array_int_3_front(array_int_3 self) -> std::array< int,3 >::value_type const &"},
	 { "array_int_3_back", _wrap_array_int_3_back, METH_O, "array_int_3_back(array_int_3 self) -> std::array< int,3 >::value_type const &"},
	 { "array_int_3_fill", _wrap_array_int_3_fill, METH_VARARGS, "\n"
		"array_int_3_fill(array_int_3 self, std::array< int,3 >::value_type const & u)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"u: std::array< int,3 >::value_type const &\n"
		"\n"
		""},
	 { "delete_array_int_3", _wrap_delete_array_int_3, METH_O, "delete_array_int_3(array_int_3 self)"},
	 { "array_int_3_swigregister", array_int_3_swigregister, METH_O, NULL},
	 { "array_int_3_swiginit", array_int_3_swiginit, METH_VARARGS, NULL},
	 { "array_int_6_iterator", _wrap_array_int_6_iterator, METH_O, "array_int_6_iterator(array_int_6 self) -> SwigPyIterator"},
	 { "array_int_6___nonzero__", _wrap_array_int_6___nonzero__, METH_O, "array_int_6___nonzero__(array_int_6 self) -> bool"},
	 { "array_int_6___bool__", _wrap_array_int_6___bool__, METH_O, "array_int_6___bool__(array_int_6 self) -> bool"},
	 { "array_int_6___len__", _wrap_array_int_6___len__, METH_O, "array_int_6___len__(array_int_6 self) -> std::array< int,6 >::size_type"},
	 { "array_int_6___getslice__", _wrap_array_int_6___getslice__, METH_VARARGS, "\n"
		"array_int_6___getslice__(array_int_6 self, std::array< int,6 >::difference_type i, std::array< int,6 >::difference_type j) -> array_int_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,6 >::difference_type\n"
		"j: std::array< int,6 >::difference_type\n"
		"\n"
		""},
	 { "array_int_6___setslice__", _wrap_array_int_6___setslice__, METH_VARARGS, "\n"
		"array_int_6___setslice__(array_int_6 self, std::array< int,6 >::difference_type i, std::array< int,6 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,6 >::difference_type\n"
		"j: std::array< int,6 >::difference_type\n"
		"\n"
		"array_int_6___setslice__(array_int_6 self, std::array< int,6 >::difference_type i, std::array< int,6 >::difference_type j, array_int_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,6 >::difference_type\n"
		"j: std::array< int,6 >::difference_type\n"
		"v: std::array< int,6 > const &\n"
		"\n"
		""},
	 { "array_int_6___delslice__", _wrap_array_int_6___delslice__, METH_VARARGS, "\n"
		"array_int_6___delslice__(array_int_6 self, std::array< int,6 >::difference_type i, std::array< int,6 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,6 >::difference_type\n"
		"j: std::array< int,6 >::difference_type\n"
		"\n"
		""},
	 { "array_int_6___delitem__", _wrap_array_int_6___delitem__, METH_VARARGS, "\n"
		"array_int_6___delitem__(array_int_6 self, std::array< int,6 >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,6 >::difference_type\n"
		"\n"
		"array_int_6___delitem__(array_int_6 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "array_int_6___getitem__", _wrap_array_int_6___getitem__, METH_VARARGS, "\n"
		"array_int_6___getitem__(array_int_6 self, SWIGPY_SLICEOBJECT * slice) -> array_int_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_int_6___getitem__(array_int_6 self, std::array< int,6 >::difference_type i) -> std::array< int,6 >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,6 >::difference_type\n"
		"\n"
		""},
	 { "array_int_6___setitem__", _wrap_array_int_6___setitem__, METH_VARARGS, "\n"
		"array_int_6___setitem__(array_int_6 self, SWIGPY_SLICEOBJECT * slice, array_int_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::array< int,6 > const &\n"
		"\n"
		"array_int_6___setitem__(array_int_6 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_int_6___setitem__(array_int_6 self, std::array< int,6 >::difference_type i, std::array< int,6 >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< int,6 >::difference_type\n"
		"x: std::array< int,6 >::value_type const &\n"
		"\n"
		""},
	 { "new_array_int_6", _wrap_new_array_int_6, METH_VARARGS, "\n"
		"array_int_6()\n"
		"new_array_int_6(array_int_6 other) -> array_int_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::array< int,6 > const &\n"
		"\n"
		""},
	 { "array_int_6_empty", _wrap_array_int_6_empty, METH_O, "array_int_6_empty(array_int_6 self) -> bool"},
	 { "array_int_6_size", _wrap_array_int_6_size, METH_O, "array_int_6_size(array_int_6 self) -> std::array< int,6 >::size_type"},
	 { "array_int_6_swap", _wrap_array_int_6_swap, METH_VARARGS, "\n"
		"array_int_6_swap(array_int_6 self, array_int_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::array< int,6 > &\n"
		"\n"
		""},
	 { "array_int_6_begin", _wrap_array_int_6_begin, METH_O, "array_int_6_begin(array_int_6 self) -> std::array< int,6 >::iterator"},
	 { "array_int_6_end", _wrap_array_int_6_end, METH_O, "array_int_6_end(array_int_6 self) -> std::array< int,6 >::iterator"},
	 { "array_int_6_rbegin", _wrap_array_int_6_rbegin, METH_O, "array_int_6_rbegin(array_int_6 self) -> std::array< int,6 >::reverse_iterator"},
	 { "array_int_6_rend", _wrap_array_int_6_rend, METH_O, "array_int_6_rend(array_int_6 self) -> std::array< int,6 >::reverse_iterator"},
	 { "array_int_6_front", _wrap_array_int_6_front, METH_O, "array_int_6_front(array_int_6 self) -> std::array< int,6 >::value_type const &"},
	 { "array_int_6_back", _wrap_array_int_6_back, METH_O, "array_int_6_back(array_int_6 self) -> std::array< int,6 >::value_type const &"},
	 { "array_int_6_fill", _wrap_array_int_6_fill, METH_VARARGS, "\n"
		"array_int_6_fill(array_int_6 self, std::array< int,6 >::value_type const & u)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"u: std::array< int,6 >::value_type const &\n"
		"\n"
		""},
	 { "delete_array_int_6", _wrap_delete_array_int_6, METH_O, "delete_array_int_6(array_int_6 self)"},
	 { "array_int_6_swigregister", array_int_6_swigregister, METH_O, NULL},
	 { "array_int_6_swiginit", array_int_6_swiginit, METH_VARARGS, NULL},
	 { "array_double_2_iterator", _wrap_array_double_2_iterator, METH_O, "array_double_2_iterator(array_double_2 self) -> SwigPyIterator"},
	 { "array_double_2___nonzero__", _wrap_array_double_2___nonzero__, METH_O, "array_double_2___nonzero__(array_double_2 self) -> bool"},
	 { "array_double_2___bool__", _wrap_array_double_2___bool__, METH_O, "array_double_2___bool__(array_double_2 self) -> bool"},
	 { "array_double_2___len__", _wrap_array_double_2___len__, METH_O, "array_double_2___len__(array_double_2 self) -> std::array< double,2 >::size_type"},
	 { "array_double_2___getslice__", _wrap_array_double_2___getslice__, METH_VARARGS, "\n"
		"array_double_2___getslice__(array_double_2 self, std::array< double,2 >::difference_type i, std::array< double,2 >::difference_type j) -> array_double_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,2 >::difference_type\n"
		"j: std::array< double,2 >::difference_type\n"
		"\n"
		""},
	 { "array_double_2___setslice__", _wrap_array_double_2___setslice__, METH_VARARGS, "\n"
		"array_double_2___setslice__(array_double_2 self, std::array< double,2 >::difference_type i, std::array< double,2 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,2 >::difference_type\n"
		"j: std::array< double,2 >::difference_type\n"
		"\n"
		"array_double_2___setslice__(array_double_2 self, std::array< double,2 >::difference_type i, std::array< double,2 >::difference_type j, array_double_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,2 >::difference_type\n"
		"j: std::array< double,2 >::difference_type\n"
		"v: std::array< double,2 > const &\n"
		"\n"
		""},
	 { "array_double_2___delslice__", _wrap_array_double_2___delslice__, METH_VARARGS, "\n"
		"array_double_2___delslice__(array_double_2 self, std::array< double,2 >::difference_type i, std::array< double,2 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,2 >::difference_type\n"
		"j: std::array< double,2 >::difference_type\n"
		"\n"
		""},
	 { "array_double_2___delitem__", _wrap_array_double_2___delitem__, METH_VARARGS, "\n"
		"array_double_2___delitem__(array_double_2 self, std::array< double,2 >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,2 >::difference_type\n"
		"\n"
		"array_double_2___delitem__(array_double_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "array_double_2___getitem__", _wrap_array_double_2___getitem__, METH_VARARGS, "\n"
		"array_double_2___getitem__(array_double_2 self, SWIGPY_SLICEOBJECT * slice) -> array_double_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_double_2___getitem__(array_double_2 self, std::array< double,2 >::difference_type i) -> std::array< double,2 >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,2 >::difference_type\n"
		"\n"
		""},
	 { "array_double_2___setitem__", _wrap_array_double_2___setitem__, METH_VARARGS, "\n"
		"array_double_2___setitem__(array_double_2 self, SWIGPY_SLICEOBJECT * slice, array_double_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::array< double,2 > const &\n"
		"\n"
		"array_double_2___setitem__(array_double_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_double_2___setitem__(array_double_2 self, std::array< double,2 >::difference_type i, std::array< double,2 >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,2 >::difference_type\n"
		"x: std::array< double,2 >::value_type const &\n"
		"\n"
		""},
	 { "new_array_double_2", _wrap_new_array_double_2, METH_VARARGS, "\n"
		"array_double_2()\n"
		"new_array_double_2(array_double_2 other) -> array_double_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::array< double,2 > const &\n"
		"\n"
		""},
	 { "array_double_2_empty", _wrap_array_double_2_empty, METH_O, "array_double_2_empty(array_double_2 self) -> bool"},
	 { "array_double_2_size", _wrap_array_double_2_size, METH_O, "array_double_2_size(array_double_2 self) -> std::array< double,2 >::size_type"},
	 { "array_double_2_swap", _wrap_array_double_2_swap, METH_VARARGS, "\n"
		"array_double_2_swap(array_double_2 self, array_double_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::array< double,2 > &\n"
		"\n"
		""},
	 { "array_double_2_begin", _wrap_array_double_2_begin, METH_O, "array_double_2_begin(array_double_2 self) -> std::array< double,2 >::iterator"},
	 { "array_double_2_end", _wrap_array_double_2_end, METH_O, "array_double_2_end(array_double_2 self) -> std::array< double,2 >::iterator"},
	 { "array_double_2_rbegin", _wrap_array_double_2_rbegin, METH_O, "array_double_2_rbegin(array_double_2 self) -> std::array< double,2 >::reverse_iterator"},
	 { "array_double_2_rend", _wrap_array_double_2_rend, METH_O, "array_double_2_rend(array_double_2 self) -> std::array< double,2 >::reverse_iterator"},
	 { "array_double_2_front", _wrap_array_double_2_front, METH_O, "array_double_2_front(array_double_2 self) -> std::array< double,2 >::value_type const &"},
	 { "array_double_2_back", _wrap_array_double_2_back, METH_O, "array_double_2_back(array_double_2 self) -> std::array< double,2 >::value_type const &"},
	 { "array_double_2_fill", _wrap_array_double_2_fill, METH_VARARGS, "\n"
		"array_double_2_fill(array_double_2 self, std::array< double,2 >::value_type const & u)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"u: std::array< double,2 >::value_type const &\n"
		"\n"
		""},
	 { "delete_array_double_2", _wrap_delete_array_double_2, METH_O, "delete_array_double_2(array_double_2 self)"},
	 { "array_double_2_swigregister", array_double_2_swigregister, METH_O, NULL},
	 { "array_double_2_swiginit", array_double_2_swiginit, METH_VARARGS, NULL},
	 { "array_double_3_iterator", _wrap_array_double_3_iterator, METH_O, "array_double_3_iterator(array_double_3 self) -> SwigPyIterator"},
	 { "array_double_3___nonzero__", _wrap_array_double_3___nonzero__, METH_O, "array_double_3___nonzero__(array_double_3 self) -> bool"},
	 { "array_double_3___bool__", _wrap_array_double_3___bool__, METH_O, "array_double_3___bool__(array_double_3 self) -> bool"},
	 { "array_double_3___len__", _wrap_array_double_3___len__, METH_O, "array_double_3___len__(array_double_3 self) -> std::array< double,3 >::size_type"},
	 { "array_double_3___getslice__", _wrap_array_double_3___getslice__, METH_VARARGS, "\n"
		"array_double_3___getslice__(array_double_3 self, std::array< double,3 >::difference_type i, std::array< double,3 >::difference_type j) -> array_double_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,3 >::difference_type\n"
		"j: std::array< double,3 >::difference_type\n"
		"\n"
		""},
	 { "array_double_3___setslice__", _wrap_array_double_3___setslice__, METH_VARARGS, "\n"
		"array_double_3___setslice__(array_double_3 self, std::array< double,3 >::difference_type i, std::array< double,3 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,3 >::difference_type\n"
		"j: std::array< double,3 >::difference_type\n"
		"\n"
		"array_double_3___setslice__(array_double_3 self, std::array< double,3 >::difference_type i, std::array< double,3 >::difference_type j, array_double_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,3 >::difference_type\n"
		"j: std::array< double,3 >::difference_type\n"
		"v: std::array< double,3 > const &\n"
		"\n"
		""},
	 { "array_double_3___delslice__", _wrap_array_double_3___delslice__, METH_VARARGS, "\n"
		"array_double_3___delslice__(array_double_3 self, std::array< double,3 >::difference_type i, std::array< double,3 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,3 >::difference_type\n"
		"j: std::array< double,3 >::difference_type\n"
		"\n"
		""},
	 { "array_double_3___delitem__", _wrap_array_double_3___delitem__, METH_VARARGS, "\n"
		"array_double_3___delitem__(array_double_3 self, std::array< double,3 >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,3 >::difference_type\n"
		"\n"
		"array_double_3___delitem__(array_double_3 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "array_double_3___getitem__", _wrap_array_double_3___getitem__, METH_VARARGS, "\n"
		"array_double_3___getitem__(array_double_3 self, SWIGPY_SLICEOBJECT * slice) -> array_double_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_double_3___getitem__(array_double_3 self, std::array< double,3 >::difference_type i) -> std::array< double,3 >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,3 >::difference_type\n"
		"\n"
		""},
	 { "array_double_3___setitem__", _wrap_array_double_3___setitem__, METH_VARARGS, "\n"
		"array_double_3___setitem__(array_double_3 self, SWIGPY_SLICEOBJECT * slice, array_double_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::array< double,3 > const &\n"
		"\n"
		"array_double_3___setitem__(array_double_3 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_double_3___setitem__(array_double_3 self, std::array< double,3 >::difference_type i, std::array< double,3 >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,3 >::difference_type\n"
		"x: std::array< double,3 >::value_type const &\n"
		"\n"
		""},
	 { "new_array_double_3", _wrap_new_array_double_3, METH_VARARGS, "\n"
		"array_double_3()\n"
		"new_array_double_3(array_double_3 other) -> array_double_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::array< double,3 > const &\n"
		"\n"
		""},
	 { "array_double_3_empty", _wrap_array_double_3_empty, METH_O, "array_double_3_empty(array_double_3 self) -> bool"},
	 { "array_double_3_size", _wrap_array_double_3_size, METH_O, "array_double_3_size(array_double_3 self) -> std::array< double,3 >::size_type"},
	 { "array_double_3_swap", _wrap_array_double_3_swap, METH_VARARGS, "\n"
		"array_double_3_swap(array_double_3 self, array_double_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::array< double,3 > &\n"
		"\n"
		""},
	 { "array_double_3_begin", _wrap_array_double_3_begin, METH_O, "array_double_3_begin(array_double_3 self) -> std::array< double,3 >::iterator"},
	 { "array_double_3_end", _wrap_array_double_3_end, METH_O, "array_double_3_end(array_double_3 self) -> std::array< double,3 >::iterator"},
	 { "array_double_3_rbegin", _wrap_array_double_3_rbegin, METH_O, "array_double_3_rbegin(array_double_3 self) -> std::array< double,3 >::reverse_iterator"},
	 { "array_double_3_rend", _wrap_array_double_3_rend, METH_O, "array_double_3_rend(array_double_3 self) -> std::array< double,3 >::reverse_iterator"},
	 { "array_double_3_front", _wrap_array_double_3_front, METH_O, "array_double_3_front(array_double_3 self) -> std::array< double,3 >::value_type const &"},
	 { "array_double_3_back", _wrap_array_double_3_back, METH_O, "array_double_3_back(array_double_3 self) -> std::array< double,3 >::value_type const &"},
	 { "array_double_3_fill", _wrap_array_double_3_fill, METH_VARARGS, "\n"
		"array_double_3_fill(array_double_3 self, std::array< double,3 >::value_type const & u)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"u: std::array< double,3 >::value_type const &\n"
		"\n"
		""},
	 { "delete_array_double_3", _wrap_delete_array_double_3, METH_O, "delete_array_double_3(array_double_3 self)"},
	 { "array_double_3_swigregister", array_double_3_swigregister, METH_O, NULL},
	 { "array_double_3_swiginit", array_double_3_swiginit, METH_VARARGS, NULL},
	 { "array_double_6_iterator", _wrap_array_double_6_iterator, METH_O, "array_double_6_iterator(array_double_6 self) -> SwigPyIterator"},
	 { "array_double_6___nonzero__", _wrap_array_double_6___nonzero__, METH_O, "array_double_6___nonzero__(array_double_6 self) -> bool"},
	 { "array_double_6___bool__", _wrap_array_double_6___bool__, METH_O, "array_double_6___bool__(array_double_6 self) -> bool"},
	 { "array_double_6___len__", _wrap_array_double_6___len__, METH_O, "array_double_6___len__(array_double_6 self) -> std::array< double,6 >::size_type"},
	 { "array_double_6___getslice__", _wrap_array_double_6___getslice__, METH_VARARGS, "\n"
		"array_double_6___getslice__(array_double_6 self, std::array< double,6 >::difference_type i, std::array< double,6 >::difference_type j) -> array_double_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,6 >::difference_type\n"
		"j: std::array< double,6 >::difference_type\n"
		"\n"
		""},
	 { "array_double_6___setslice__", _wrap_array_double_6___setslice__, METH_VARARGS, "\n"
		"array_double_6___setslice__(array_double_6 self, std::array< double,6 >::difference_type i, std::array< double,6 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,6 >::difference_type\n"
		"j: std::array< double,6 >::difference_type\n"
		"\n"
		"array_double_6___setslice__(array_double_6 self, std::array< double,6 >::difference_type i, std::array< double,6 >::difference_type j, array_double_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,6 >::difference_type\n"
		"j: std::array< double,6 >::difference_type\n"
		"v: std::array< double,6 > const &\n"
		"\n"
		""},
	 { "array_double_6___delslice__", _wrap_array_double_6___delslice__, METH_VARARGS, "\n"
		"array_double_6___delslice__(array_double_6 self, std::array< double,6 >::difference_type i, std::array< double,6 >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,6 >::difference_type\n"
		"j: std::array< double,6 >::difference_type\n"
		"\n"
		""},
	 { "array_double_6___delitem__", _wrap_array_double_6___delitem__, METH_VARARGS, "\n"
		"array_double_6___delitem__(array_double_6 self, std::array< double,6 >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,6 >::difference_type\n"
		"\n"
		"array_double_6___delitem__(array_double_6 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "array_double_6___getitem__", _wrap_array_double_6___getitem__, METH_VARARGS, "\n"
		"array_double_6___getitem__(array_double_6 self, SWIGPY_SLICEOBJECT * slice) -> array_double_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_double_6___getitem__(array_double_6 self, std::array< double,6 >::difference_type i) -> std::array< double,6 >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,6 >::difference_type\n"
		"\n"
		""},
	 { "array_double_6___setitem__", _wrap_array_double_6___setitem__, METH_VARARGS, "\n"
		"array_double_6___setitem__(array_double_6 self, SWIGPY_SLICEOBJECT * slice, array_double_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::array< double,6 > const &\n"
		"\n"
		"array_double_6___setitem__(array_double_6 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"array_double_6___setitem__(array_double_6 self, std::array< double,6 >::difference_type i, std::array< double,6 >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::array< double,6 >::difference_type\n"
		"x: std::array< double,6 >::value_type const &\n"
		"\n"
		""},
	 { "new_array_double_6", _wrap_new_array_double_6, METH_VARARGS, "\n"
		"array_double_6()\n"
		"new_array_double_6(array_double_6 other) -> array_double_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::array< double,6 > const &\n"
		"\n"
		""},
	 { "array_double_6_empty", _wrap_array_double_6_empty, METH_O, "array_double_6_empty(array_double_6 self) -> bool"},
	 { "array_double_6_size", _wrap_array_double_6_size, METH_O, "array_double_6_size(array_double_6 self) -> std::array< double,6 >::size_type"},
	 { "array_double_6_swap", _wrap_array_double_6_swap, METH_VARARGS, "\n"
		"array_double_6_swap(array_double_6 self, array_double_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::array< double,6 > &\n"
		"\n"
		""},
	 { "array_double_6_begin", _wrap_array_double_6_begin, METH_O, "array_double_6_begin(array_double_6 self) -> std::array< double,6 >::iterator"},
	 { "array_double_6_end", _wrap_array_double_6_end, METH_O, "array_double_6_end(array_double_6 self) -> std::array< double,6 >::iterator"},
	 { "array_double_6_rbegin", _wrap_array_double_6_rbegin, METH_O, "array_double_6_rbegin(array_double_6 self) -> std::array< double,6 >::reverse_iterator"},
	 { "array_double_6_rend", _wrap_array_double_6_rend, METH_O, "array_double_6_rend(array_double_6 self) -> std::array< double,6 >::reverse_iterator"},
	 { "array_double_6_front", _wrap_array_double_6_front, METH_O, "array_double_6_front(array_double_6 self) -> std::array< double,6 >::value_type const &"},
	 { "array_double_6_back", _wrap_array_double_6_back, METH_O, "array_double_6_back(array_double_6 self) -> std::array< double,6 >::value_type const &"},
	 { "array_double_6_fill", _wrap_array_double_6_fill, METH_VARARGS, "\n"
		"array_double_6_fill(array_double_6 self, std::array< double,6 >::value_type const & u)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"u: std::array< double,6 >::value_type const &\n"
		"\n"
		""},
	 { "delete_array_double_6", _wrap_delete_array_double_6, METH_O, "delete_array_double_6(array_double_6 self)"},
	 { "array_double_6_swigregister", array_double_6_swigregister, METH_O, NULL},
	 { "array_double_6_swiginit", array_double_6_swiginit, METH_VARARGS, NULL},
	 { "vector_string_iterator", _wrap_vector_string_iterator, METH_O, "vector_string_iterator(vector_string self) -> SwigPyIterator"},
	 { "vector_string___nonzero__", _wrap_vector_string___nonzero__, METH_O, "vector_string___nonzero__(vector_string self) -> bool"},
	 { "vector_string___bool__", _wrap_vector_string___bool__, METH_O, "vector_string___bool__(vector_string self) -> bool"},
	 { "vector_string___len__", _wrap_vector_string___len__, METH_O, "vector_string___len__(vector_string self) -> std::vector< std::string >::size_type"},
	 { "vector_string___getslice__", _wrap_vector_string___getslice__, METH_VARARGS, "\n"
		"vector_string___getslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vector_string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::string >::difference_type\n"
		"j: std::vector< std::string >::difference_type\n"
		"\n"
		""},
	 { "vector_string___setslice__", _wrap_vector_string___setslice__, METH_VARARGS, "\n"
		"vector_string___setslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::string >::difference_type\n"
		"j: std::vector< std::string >::difference_type\n"
		"\n"
		"vector_string___setslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vector_string v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::string >::difference_type\n"
		"j: std::vector< std::string >::difference_type\n"
		"v: std::vector< std::string,std::allocator< std::string > > const &\n"
		"\n"
		""},
	 { "vector_string___delslice__", _wrap_vector_string___delslice__, METH_VARARGS, "\n"
		"vector_string___delslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::string >::difference_type\n"
		"j: std::vector< std::string >::difference_type\n"
		"\n"
		""},
	 { "vector_string___delitem__", _wrap_vector_string___delitem__, METH_VARARGS, "\n"
		"vector_string___delitem__(vector_string self, std::vector< std::string >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::string >::difference_type\n"
		"\n"
		"vector_string___delitem__(vector_string self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_string___getitem__", _wrap_vector_string___getitem__, METH_VARARGS, "\n"
		"vector_string___getitem__(vector_string self, SWIGPY_SLICEOBJECT * slice) -> vector_string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_string___getitem__(vector_string self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::string >::difference_type\n"
		"\n"
		""},
	 { "vector_string___setitem__", _wrap_vector_string___setitem__, METH_VARARGS, "\n"
		"vector_string___setitem__(vector_string self, SWIGPY_SLICEOBJECT * slice, vector_string v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::string,std::allocator< std::string > > const &\n"
		"\n"
		"vector_string___setitem__(vector_string self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_string___setitem__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::string >::difference_type\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { "vector_string_pop", _wrap_vector_string_pop, METH_O, "vector_string_pop(vector_string self) -> std::vector< std::string >::value_type"},
	 { "vector_string_append", _wrap_vector_string_append, METH_VARARGS, "\n"
		"vector_string_append(vector_string self, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { "vector_string_empty", _wrap_vector_string_empty, METH_O, "vector_string_empty(vector_string self) -> bool"},
	 { "vector_string_size", _wrap_vector_string_size, METH_O, "vector_string_size(vector_string self) -> std::vector< std::string >::size_type"},
	 { "vector_string_swap", _wrap_vector_string_swap, METH_VARARGS, "\n"
		"vector_string_swap(vector_string self, vector_string v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::string > &\n"
		"\n"
		""},
	 { "vector_string_begin", _wrap_vector_string_begin, METH_O, "vector_string_begin(vector_string self) -> std::vector< std::string >::iterator"},
	 { "vector_string_end", _wrap_vector_string_end, METH_O, "vector_string_end(vector_string self) -> std::vector< std::string >::iterator"},
	 { "vector_string_rbegin", _wrap_vector_string_rbegin, METH_O, "vector_string_rbegin(vector_string self) -> std::vector< std::string >::reverse_iterator"},
	 { "vector_string_rend", _wrap_vector_string_rend, METH_O, "vector_string_rend(vector_string self) -> std::vector< std::string >::reverse_iterator"},
	 { "vector_string_clear", _wrap_vector_string_clear, METH_O, "vector_string_clear(vector_string self)"},
	 { "vector_string_get_allocator", _wrap_vector_string_get_allocator, METH_O, "vector_string_get_allocator(vector_string self) -> std::vector< std::string >::allocator_type"},
	 { "vector_string_pop_back", _wrap_vector_string_pop_back, METH_O, "vector_string_pop_back(vector_string self)"},
	 { "vector_string_erase", _wrap_vector_string_erase, METH_VARARGS, "\n"
		"vector_string_erase(vector_string self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::string >::iterator\n"
		"\n"
		"vector_string_erase(vector_string self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::string >::iterator\n"
		"last: std::vector< std::string >::iterator\n"
		"\n"
		""},
	 { "new_vector_string", _wrap_new_vector_string, METH_VARARGS, "\n"
		"vector_string()\n"
		"vector_string(vector_string other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::string > const &\n"
		"\n"
		"vector_string(std::vector< std::string >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::string >::size_type\n"
		"\n"
		"new_vector_string(std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::string >::size_type\n"
		"value: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { "vector_string_push_back", _wrap_vector_string_push_back, METH_VARARGS, "\n"
		"vector_string_push_back(vector_string self, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { "vector_string_front", _wrap_vector_string_front, METH_O, "vector_string_front(vector_string self) -> std::vector< std::string >::value_type const &"},
	 { "vector_string_back", _wrap_vector_string_back, METH_O, "vector_string_back(vector_string self) -> std::vector< std::string >::value_type const &"},
	 { "vector_string_assign", _wrap_vector_string_assign, METH_VARARGS, "\n"
		"vector_string_assign(vector_string self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::string >::size_type\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { "vector_string_resize", _wrap_vector_string_resize, METH_VARARGS, "\n"
		"vector_string_resize(vector_string self, std::vector< std::string >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::string >::size_type\n"
		"\n"
		"vector_string_resize(vector_string self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::string >::size_type\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { "vector_string_insert", _wrap_vector_string_insert, METH_VARARGS, "\n"
		"vector_string_insert(vector_string self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::string >::iterator\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		"vector_string_insert(vector_string self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::string >::iterator\n"
		"n: std::vector< std::string >::size_type\n"
		"x: std::vector< std::string >::value_type const &\n"
		"\n"
		""},
	 { "vector_string_reserve", _wrap_vector_string_reserve, METH_VARARGS, "\n"
		"vector_string_reserve(vector_string self, std::vector< std::string >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::string >::size_type\n"
		"\n"
		""},
	 { "vector_string_capacity", _wrap_vector_string_capacity, METH_O, "vector_string_capacity(vector_string self) -> std::vector< std::string >::size_type"},
	 { "delete_vector_string", _wrap_delete_vector_string, METH_O, "delete_vector_string(vector_string self)"},
	 { "vector_string_swigregister", vector_string_swigregister, METH_O, NULL},
	 { "vector_string_swiginit", vector_string_swiginit, METH_VARARGS, NULL},
	 { "vector_char_iterator", _wrap_vector_char_iterator, METH_O, "vector_char_iterator(vector_char self) -> SwigPyIterator"},
	 { "vector_char___nonzero__", _wrap_vector_char___nonzero__, METH_O, "vector_char___nonzero__(vector_char self) -> bool"},
	 { "vector_char___bool__", _wrap_vector_char___bool__, METH_O, "vector_char___bool__(vector_char self) -> bool"},
	 { "vector_char___len__", _wrap_vector_char___len__, METH_O, "vector_char___len__(vector_char self) -> std::vector< char >::size_type"},
	 { "vector_char___getslice__", _wrap_vector_char___getslice__, METH_VARARGS, "\n"
		"vector_char___getslice__(vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j) -> vector_char\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< char >::difference_type\n"
		"j: std::vector< char >::difference_type\n"
		"\n"
		""},
	 { "vector_char___setslice__", _wrap_vector_char___setslice__, METH_VARARGS, "\n"
		"vector_char___setslice__(vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< char >::difference_type\n"
		"j: std::vector< char >::difference_type\n"
		"\n"
		"vector_char___setslice__(vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j, vector_char v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< char >::difference_type\n"
		"j: std::vector< char >::difference_type\n"
		"v: std::vector< char,std::allocator< char > > const &\n"
		"\n"
		""},
	 { "vector_char___delslice__", _wrap_vector_char___delslice__, METH_VARARGS, "\n"
		"vector_char___delslice__(vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< char >::difference_type\n"
		"j: std::vector< char >::difference_type\n"
		"\n"
		""},
	 { "vector_char___delitem__", _wrap_vector_char___delitem__, METH_VARARGS, "\n"
		"vector_char___delitem__(vector_char self, std::vector< char >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< char >::difference_type\n"
		"\n"
		"vector_char___delitem__(vector_char self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_char___getitem__", _wrap_vector_char___getitem__, METH_VARARGS, "\n"
		"vector_char___getitem__(vector_char self, SWIGPY_SLICEOBJECT * slice) -> vector_char\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_char___getitem__(vector_char self, std::vector< char >::difference_type i) -> std::vector< char >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< char >::difference_type\n"
		"\n"
		""},
	 { "vector_char___setitem__", _wrap_vector_char___setitem__, METH_VARARGS, "\n"
		"vector_char___setitem__(vector_char self, SWIGPY_SLICEOBJECT * slice, vector_char v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< char,std::allocator< char > > const &\n"
		"\n"
		"vector_char___setitem__(vector_char self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_char___setitem__(vector_char self, std::vector< char >::difference_type i, std::vector< char >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< char >::difference_type\n"
		"x: std::vector< char >::value_type const &\n"
		"\n"
		""},
	 { "vector_char_pop", _wrap_vector_char_pop, METH_O, "vector_char_pop(vector_char self) -> std::vector< char >::value_type"},
	 { "vector_char_append", _wrap_vector_char_append, METH_VARARGS, "\n"
		"vector_char_append(vector_char self, std::vector< char >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< char >::value_type const &\n"
		"\n"
		""},
	 { "vector_char_empty", _wrap_vector_char_empty, METH_O, "vector_char_empty(vector_char self) -> bool"},
	 { "vector_char_size", _wrap_vector_char_size, METH_O, "vector_char_size(vector_char self) -> std::vector< char >::size_type"},
	 { "vector_char_swap", _wrap_vector_char_swap, METH_VARARGS, "\n"
		"vector_char_swap(vector_char self, vector_char v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< char > &\n"
		"\n"
		""},
	 { "vector_char_begin", _wrap_vector_char_begin, METH_O, "vector_char_begin(vector_char self) -> std::vector< char >::iterator"},
	 { "vector_char_end", _wrap_vector_char_end, METH_O, "vector_char_end(vector_char self) -> std::vector< char >::iterator"},
	 { "vector_char_rbegin", _wrap_vector_char_rbegin, METH_O, "vector_char_rbegin(vector_char self) -> std::vector< char >::reverse_iterator"},
	 { "vector_char_rend", _wrap_vector_char_rend, METH_O, "vector_char_rend(vector_char self) -> std::vector< char >::reverse_iterator"},
	 { "vector_char_clear", _wrap_vector_char_clear, METH_O, "vector_char_clear(vector_char self)"},
	 { "vector_char_get_allocator", _wrap_vector_char_get_allocator, METH_O, "vector_char_get_allocator(vector_char self) -> std::vector< char >::allocator_type"},
	 { "vector_char_pop_back", _wrap_vector_char_pop_back, METH_O, "vector_char_pop_back(vector_char self)"},
	 { "vector_char_erase", _wrap_vector_char_erase, METH_VARARGS, "\n"
		"vector_char_erase(vector_char self, std::vector< char >::iterator pos) -> std::vector< char >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< char >::iterator\n"
		"\n"
		"vector_char_erase(vector_char self, std::vector< char >::iterator first, std::vector< char >::iterator last) -> std::vector< char >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< char >::iterator\n"
		"last: std::vector< char >::iterator\n"
		"\n"
		""},
	 { "new_vector_char", _wrap_new_vector_char, METH_VARARGS, "\n"
		"vector_char()\n"
		"vector_char(vector_char other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< char > const &\n"
		"\n"
		"vector_char(std::vector< char >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< char >::size_type\n"
		"\n"
		"new_vector_char(std::vector< char >::size_type size, std::vector< char >::value_type const & value) -> vector_char\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< char >::size_type\n"
		"value: std::vector< char >::value_type const &\n"
		"\n"
		""},
	 { "vector_char_push_back", _wrap_vector_char_push_back, METH_VARARGS, "\n"
		"vector_char_push_back(vector_char self, std::vector< char >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< char >::value_type const &\n"
		"\n"
		""},
	 { "vector_char_front", _wrap_vector_char_front, METH_O, "vector_char_front(vector_char self) -> std::vector< char >::value_type const &"},
	 { "vector_char_back", _wrap_vector_char_back, METH_O, "vector_char_back(vector_char self) -> std::vector< char >::value_type const &"},
	 { "vector_char_assign", _wrap_vector_char_assign, METH_VARARGS, "\n"
		"vector_char_assign(vector_char self, std::vector< char >::size_type n, std::vector< char >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< char >::size_type\n"
		"x: std::vector< char >::value_type const &\n"
		"\n"
		""},
	 { "vector_char_resize", _wrap_vector_char_resize, METH_VARARGS, "\n"
		"vector_char_resize(vector_char self, std::vector< char >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< char >::size_type\n"
		"\n"
		"vector_char_resize(vector_char self, std::vector< char >::size_type new_size, std::vector< char >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< char >::size_type\n"
		"x: std::vector< char >::value_type const &\n"
		"\n"
		""},
	 { "vector_char_insert", _wrap_vector_char_insert, METH_VARARGS, "\n"
		"vector_char_insert(vector_char self, std::vector< char >::iterator pos, std::vector< char >::value_type const & x) -> std::vector< char >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< char >::iterator\n"
		"x: std::vector< char >::value_type const &\n"
		"\n"
		"vector_char_insert(vector_char self, std::vector< char >::iterator pos, std::vector< char >::size_type n, std::vector< char >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< char >::iterator\n"
		"n: std::vector< char >::size_type\n"
		"x: std::vector< char >::value_type const &\n"
		"\n"
		""},
	 { "vector_char_reserve", _wrap_vector_char_reserve, METH_VARARGS, "\n"
		"vector_char_reserve(vector_char self, std::vector< char >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< char >::size_type\n"
		"\n"
		""},
	 { "vector_char_capacity", _wrap_vector_char_capacity, METH_O, "vector_char_capacity(vector_char self) -> std::vector< char >::size_type"},
	 { "delete_vector_char", _wrap_delete_vector_char, METH_O, "delete_vector_char(vector_char self)"},
	 { "vector_char_swigregister", vector_char_swigregister, METH_O, NULL},
	 { "vector_char_swiginit", vector_char_swiginit, METH_VARARGS, NULL},
	 { "vector_int_iterator", _wrap_vector_int_iterator, METH_O, "vector_int_iterator(vector_int self) -> SwigPyIterator"},
	 { "vector_int___nonzero__", _wrap_vector_int___nonzero__, METH_O, "vector_int___nonzero__(vector_int self) -> bool"},
	 { "vector_int___bool__", _wrap_vector_int___bool__, METH_O, "vector_int___bool__(vector_int self) -> bool"},
	 { "vector_int___len__", _wrap_vector_int___len__, METH_O, "vector_int___len__(vector_int self) -> std::vector< int >::size_type"},
	 { "vector_int___getslice__", _wrap_vector_int___getslice__, METH_VARARGS, "\n"
		"vector_int___getslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< int >::difference_type\n"
		"j: std::vector< int >::difference_type\n"
		"\n"
		""},
	 { "vector_int___setslice__", _wrap_vector_int___setslice__, METH_VARARGS, "\n"
		"vector_int___setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< int >::difference_type\n"
		"j: std::vector< int >::difference_type\n"
		"\n"
		"vector_int___setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_int v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< int >::difference_type\n"
		"j: std::vector< int >::difference_type\n"
		"v: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "vector_int___delslice__", _wrap_vector_int___delslice__, METH_VARARGS, "\n"
		"vector_int___delslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< int >::difference_type\n"
		"j: std::vector< int >::difference_type\n"
		"\n"
		""},
	 { "vector_int___delitem__", _wrap_vector_int___delitem__, METH_VARARGS, "\n"
		"vector_int___delitem__(vector_int self, std::vector< int >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< int >::difference_type\n"
		"\n"
		"vector_int___delitem__(vector_int self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_int___getitem__", _wrap_vector_int___getitem__, METH_VARARGS, "\n"
		"vector_int___getitem__(vector_int self, SWIGPY_SLICEOBJECT * slice) -> vector_int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_int___getitem__(vector_int self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< int >::difference_type\n"
		"\n"
		""},
	 { "vector_int___setitem__", _wrap_vector_int___setitem__, METH_VARARGS, "\n"
		"vector_int___setitem__(vector_int self, SWIGPY_SLICEOBJECT * slice, vector_int v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		"vector_int___setitem__(vector_int self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_int___setitem__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< int >::difference_type\n"
		"x: std::vector< int >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_pop", _wrap_vector_int_pop, METH_O, "vector_int_pop(vector_int self) -> std::vector< int >::value_type"},
	 { "vector_int_append", _wrap_vector_int_append, METH_VARARGS, "\n"
		"vector_int_append(vector_int self, std::vector< int >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< int >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_empty", _wrap_vector_int_empty, METH_O, "vector_int_empty(vector_int self) -> bool"},
	 { "vector_int_size", _wrap_vector_int_size, METH_O, "vector_int_size(vector_int self) -> std::vector< int >::size_type"},
	 { "vector_int_swap", _wrap_vector_int_swap, METH_VARARGS, "\n"
		"vector_int_swap(vector_int self, vector_int v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< int > &\n"
		"\n"
		""},
	 { "vector_int_begin", _wrap_vector_int_begin, METH_O, "vector_int_begin(vector_int self) -> std::vector< int >::iterator"},
	 { "vector_int_end", _wrap_vector_int_end, METH_O, "vector_int_end(vector_int self) -> std::vector< int >::iterator"},
	 { "vector_int_rbegin", _wrap_vector_int_rbegin, METH_O, "vector_int_rbegin(vector_int self) -> std::vector< int >::reverse_iterator"},
	 { "vector_int_rend", _wrap_vector_int_rend, METH_O, "vector_int_rend(vector_int self) -> std::vector< int >::reverse_iterator"},
	 { "vector_int_clear", _wrap_vector_int_clear, METH_O, "vector_int_clear(vector_int self)"},
	 { "vector_int_get_allocator", _wrap_vector_int_get_allocator, METH_O, "vector_int_get_allocator(vector_int self) -> std::vector< int >::allocator_type"},
	 { "vector_int_pop_back", _wrap_vector_int_pop_back, METH_O, "vector_int_pop_back(vector_int self)"},
	 { "vector_int_erase", _wrap_vector_int_erase, METH_VARARGS, "\n"
		"vector_int_erase(vector_int self, std::vector< int >::iterator pos) -> std::vector< int >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< int >::iterator\n"
		"\n"
		"vector_int_erase(vector_int self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< int >::iterator\n"
		"last: std::vector< int >::iterator\n"
		"\n"
		""},
	 { "new_vector_int", _wrap_new_vector_int, METH_VARARGS, "\n"
		"vector_int()\n"
		"vector_int(vector_int other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< int > const &\n"
		"\n"
		"vector_int(std::vector< int >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< int >::size_type\n"
		"\n"
		"new_vector_int(std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< int >::size_type\n"
		"value: std::vector< int >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_push_back", _wrap_vector_int_push_back, METH_VARARGS, "\n"
		"vector_int_push_back(vector_int self, std::vector< int >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< int >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_front", _wrap_vector_int_front, METH_O, "vector_int_front(vector_int self) -> std::vector< int >::value_type const &"},
	 { "vector_int_back", _wrap_vector_int_back, METH_O, "vector_int_back(vector_int self) -> std::vector< int >::value_type const &"},
	 { "vector_int_assign", _wrap_vector_int_assign, METH_VARARGS, "\n"
		"vector_int_assign(vector_int self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< int >::size_type\n"
		"x: std::vector< int >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_resize", _wrap_vector_int_resize, METH_VARARGS, "\n"
		"vector_int_resize(vector_int self, std::vector< int >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< int >::size_type\n"
		"\n"
		"vector_int_resize(vector_int self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< int >::size_type\n"
		"x: std::vector< int >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_insert", _wrap_vector_int_insert, METH_VARARGS, "\n"
		"vector_int_insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< int >::iterator\n"
		"x: std::vector< int >::value_type const &\n"
		"\n"
		"vector_int_insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< int >::iterator\n"
		"n: std::vector< int >::size_type\n"
		"x: std::vector< int >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_reserve", _wrap_vector_int_reserve, METH_VARARGS, "\n"
		"vector_int_reserve(vector_int self, std::vector< int >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< int >::size_type\n"
		"\n"
		""},
	 { "vector_int_capacity", _wrap_vector_int_capacity, METH_O, "vector_int_capacity(vector_int self) -> std::vector< int >::size_type"},
	 { "delete_vector_int", _wrap_delete_vector_int, METH_O, "delete_vector_int(vector_int self)"},
	 { "vector_int_swigregister", vector_int_swigregister, METH_O, NULL},
	 { "vector_int_swiginit", vector_int_swiginit, METH_VARARGS, NULL},
	 { "vector_long_long_iterator", _wrap_vector_long_long_iterator, METH_O, "vector_long_long_iterator(vector_long_long self) -> SwigPyIterator"},
	 { "vector_long_long___nonzero__", _wrap_vector_long_long___nonzero__, METH_O, "vector_long_long___nonzero__(vector_long_long self) -> bool"},
	 { "vector_long_long___bool__", _wrap_vector_long_long___bool__, METH_O, "vector_long_long___bool__(vector_long_long self) -> bool"},
	 { "vector_long_long___len__", _wrap_vector_long_long___len__, METH_O, "vector_long_long___len__(vector_long_long self) -> std::vector< long >::size_type"},
	 { "vector_long_long___getslice__", _wrap_vector_long_long___getslice__, METH_VARARGS, "\n"
		"vector_long_long___getslice__(vector_long_long self, std::vector< long >::difference_type i, std::vector< long >::difference_type j) -> vector_long_long\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long >::difference_type\n"
		"j: std::vector< long >::difference_type\n"
		"\n"
		""},
	 { "vector_long_long___setslice__", _wrap_vector_long_long___setslice__, METH_VARARGS, "\n"
		"vector_long_long___setslice__(vector_long_long self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long >::difference_type\n"
		"j: std::vector< long >::difference_type\n"
		"\n"
		"vector_long_long___setslice__(vector_long_long self, std::vector< long >::difference_type i, std::vector< long >::difference_type j, vector_long_long v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long >::difference_type\n"
		"j: std::vector< long >::difference_type\n"
		"v: std::vector< long,std::allocator< long > > const &\n"
		"\n"
		""},
	 { "vector_long_long___delslice__", _wrap_vector_long_long___delslice__, METH_VARARGS, "\n"
		"vector_long_long___delslice__(vector_long_long self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long >::difference_type\n"
		"j: std::vector< long >::difference_type\n"
		"\n"
		""},
	 { "vector_long_long___delitem__", _wrap_vector_long_long___delitem__, METH_VARARGS, "\n"
		"vector_long_long___delitem__(vector_long_long self, std::vector< long >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long >::difference_type\n"
		"\n"
		"vector_long_long___delitem__(vector_long_long self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_long_long___getitem__", _wrap_vector_long_long___getitem__, METH_VARARGS, "\n"
		"vector_long_long___getitem__(vector_long_long self, SWIGPY_SLICEOBJECT * slice) -> vector_long_long\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_long_long___getitem__(vector_long_long self, std::vector< long >::difference_type i) -> std::vector< long >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long >::difference_type\n"
		"\n"
		""},
	 { "vector_long_long___setitem__", _wrap_vector_long_long___setitem__, METH_VARARGS, "\n"
		"vector_long_long___setitem__(vector_long_long self, SWIGPY_SLICEOBJECT * slice, vector_long_long v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< long,std::allocator< long > > const &\n"
		"\n"
		"vector_long_long___setitem__(vector_long_long self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_long_long___setitem__(vector_long_long self, std::vector< long >::difference_type i, std::vector< long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long >::difference_type\n"
		"x: std::vector< long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_long_pop", _wrap_vector_long_long_pop, METH_O, "vector_long_long_pop(vector_long_long self) -> std::vector< long >::value_type"},
	 { "vector_long_long_append", _wrap_vector_long_long_append, METH_VARARGS, "\n"
		"vector_long_long_append(vector_long_long self, std::vector< long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_long_empty", _wrap_vector_long_long_empty, METH_O, "vector_long_long_empty(vector_long_long self) -> bool"},
	 { "vector_long_long_size", _wrap_vector_long_long_size, METH_O, "vector_long_long_size(vector_long_long self) -> std::vector< long >::size_type"},
	 { "vector_long_long_swap", _wrap_vector_long_long_swap, METH_VARARGS, "\n"
		"vector_long_long_swap(vector_long_long self, vector_long_long v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< long > &\n"
		"\n"
		""},
	 { "vector_long_long_begin", _wrap_vector_long_long_begin, METH_O, "vector_long_long_begin(vector_long_long self) -> std::vector< long >::iterator"},
	 { "vector_long_long_end", _wrap_vector_long_long_end, METH_O, "vector_long_long_end(vector_long_long self) -> std::vector< long >::iterator"},
	 { "vector_long_long_rbegin", _wrap_vector_long_long_rbegin, METH_O, "vector_long_long_rbegin(vector_long_long self) -> std::vector< long >::reverse_iterator"},
	 { "vector_long_long_rend", _wrap_vector_long_long_rend, METH_O, "vector_long_long_rend(vector_long_long self) -> std::vector< long >::reverse_iterator"},
	 { "vector_long_long_clear", _wrap_vector_long_long_clear, METH_O, "vector_long_long_clear(vector_long_long self)"},
	 { "vector_long_long_get_allocator", _wrap_vector_long_long_get_allocator, METH_O, "vector_long_long_get_allocator(vector_long_long self) -> std::vector< long >::allocator_type"},
	 { "vector_long_long_pop_back", _wrap_vector_long_long_pop_back, METH_O, "vector_long_long_pop_back(vector_long_long self)"},
	 { "vector_long_long_erase", _wrap_vector_long_long_erase, METH_VARARGS, "\n"
		"vector_long_long_erase(vector_long_long self, std::vector< long >::iterator pos) -> std::vector< long >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< long >::iterator\n"
		"\n"
		"vector_long_long_erase(vector_long_long self, std::vector< long >::iterator first, std::vector< long >::iterator last) -> std::vector< long >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< long >::iterator\n"
		"last: std::vector< long >::iterator\n"
		"\n"
		""},
	 { "new_vector_long_long", _wrap_new_vector_long_long, METH_VARARGS, "\n"
		"vector_long_long()\n"
		"vector_long_long(vector_long_long other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< long > const &\n"
		"\n"
		"vector_long_long(std::vector< long >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< long >::size_type\n"
		"\n"
		"new_vector_long_long(std::vector< long >::size_type size, std::vector< long >::value_type const & value) -> vector_long_long\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< long >::size_type\n"
		"value: std::vector< long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_long_push_back", _wrap_vector_long_long_push_back, METH_VARARGS, "\n"
		"vector_long_long_push_back(vector_long_long self, std::vector< long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_long_front", _wrap_vector_long_long_front, METH_O, "vector_long_long_front(vector_long_long self) -> std::vector< long >::value_type const &"},
	 { "vector_long_long_back", _wrap_vector_long_long_back, METH_O, "vector_long_long_back(vector_long_long self) -> std::vector< long >::value_type const &"},
	 { "vector_long_long_assign", _wrap_vector_long_long_assign, METH_VARARGS, "\n"
		"vector_long_long_assign(vector_long_long self, std::vector< long >::size_type n, std::vector< long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< long >::size_type\n"
		"x: std::vector< long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_long_resize", _wrap_vector_long_long_resize, METH_VARARGS, "\n"
		"vector_long_long_resize(vector_long_long self, std::vector< long >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< long >::size_type\n"
		"\n"
		"vector_long_long_resize(vector_long_long self, std::vector< long >::size_type new_size, std::vector< long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< long >::size_type\n"
		"x: std::vector< long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_long_insert", _wrap_vector_long_long_insert, METH_VARARGS, "\n"
		"vector_long_long_insert(vector_long_long self, std::vector< long >::iterator pos, std::vector< long >::value_type const & x) -> std::vector< long >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< long >::iterator\n"
		"x: std::vector< long >::value_type const &\n"
		"\n"
		"vector_long_long_insert(vector_long_long self, std::vector< long >::iterator pos, std::vector< long >::size_type n, std::vector< long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< long >::iterator\n"
		"n: std::vector< long >::size_type\n"
		"x: std::vector< long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_long_reserve", _wrap_vector_long_long_reserve, METH_VARARGS, "\n"
		"vector_long_long_reserve(vector_long_long self, std::vector< long >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< long >::size_type\n"
		"\n"
		""},
	 { "vector_long_long_capacity", _wrap_vector_long_long_capacity, METH_O, "vector_long_long_capacity(vector_long_long self) -> std::vector< long >::size_type"},
	 { "delete_vector_long_long", _wrap_delete_vector_long_long, METH_O, "delete_vector_long_long(vector_long_long self)"},
	 { "vector_long_long_swigregister", vector_long_long_swigregister, METH_O, NULL},
	 { "vector_long_long_swiginit", vector_long_long_swiginit, METH_VARARGS, NULL},
	 { "vector_long_iterator", _wrap_vector_long_iterator, METH_O, "vector_long_iterator(vector_long self) -> SwigPyIterator"},
	 { "vector_long___nonzero__", _wrap_vector_long___nonzero__, METH_O, "vector_long___nonzero__(vector_long self) -> bool"},
	 { "vector_long___bool__", _wrap_vector_long___bool__, METH_O, "vector_long___bool__(vector_long self) -> bool"},
	 { "vector_long___len__", _wrap_vector_long___len__, METH_O, "vector_long___len__(vector_long self) -> std::vector< long long >::size_type"},
	 { "vector_long___getslice__", _wrap_vector_long___getslice__, METH_VARARGS, "\n"
		"vector_long___getslice__(vector_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j) -> vector_long\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long long >::difference_type\n"
		"j: std::vector< long long >::difference_type\n"
		"\n"
		""},
	 { "vector_long___setslice__", _wrap_vector_long___setslice__, METH_VARARGS, "\n"
		"vector_long___setslice__(vector_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long long >::difference_type\n"
		"j: std::vector< long long >::difference_type\n"
		"\n"
		"vector_long___setslice__(vector_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j, vector_long v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long long >::difference_type\n"
		"j: std::vector< long long >::difference_type\n"
		"v: std::vector< long long,std::allocator< long long > > const &\n"
		"\n"
		""},
	 { "vector_long___delslice__", _wrap_vector_long___delslice__, METH_VARARGS, "\n"
		"vector_long___delslice__(vector_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long long >::difference_type\n"
		"j: std::vector< long long >::difference_type\n"
		"\n"
		""},
	 { "vector_long___delitem__", _wrap_vector_long___delitem__, METH_VARARGS, "\n"
		"vector_long___delitem__(vector_long self, std::vector< long long >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long long >::difference_type\n"
		"\n"
		"vector_long___delitem__(vector_long self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_long___getitem__", _wrap_vector_long___getitem__, METH_VARARGS, "\n"
		"vector_long___getitem__(vector_long self, SWIGPY_SLICEOBJECT * slice) -> vector_long\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_long___getitem__(vector_long self, std::vector< long long >::difference_type i) -> std::vector< long long >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long long >::difference_type\n"
		"\n"
		""},
	 { "vector_long___setitem__", _wrap_vector_long___setitem__, METH_VARARGS, "\n"
		"vector_long___setitem__(vector_long self, SWIGPY_SLICEOBJECT * slice, vector_long v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< long long,std::allocator< long long > > const &\n"
		"\n"
		"vector_long___setitem__(vector_long self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_long___setitem__(vector_long self, std::vector< long long >::difference_type i, std::vector< long long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< long long >::difference_type\n"
		"x: std::vector< long long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_pop", _wrap_vector_long_pop, METH_O, "vector_long_pop(vector_long self) -> std::vector< long long >::value_type"},
	 { "vector_long_append", _wrap_vector_long_append, METH_VARARGS, "\n"
		"vector_long_append(vector_long self, std::vector< long long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< long long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_empty", _wrap_vector_long_empty, METH_O, "vector_long_empty(vector_long self) -> bool"},
	 { "vector_long_size", _wrap_vector_long_size, METH_O, "vector_long_size(vector_long self) -> std::vector< long long >::size_type"},
	 { "vector_long_swap", _wrap_vector_long_swap, METH_VARARGS, "\n"
		"vector_long_swap(vector_long self, vector_long v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< long long > &\n"
		"\n"
		""},
	 { "vector_long_begin", _wrap_vector_long_begin, METH_O, "vector_long_begin(vector_long self) -> std::vector< long long >::iterator"},
	 { "vector_long_end", _wrap_vector_long_end, METH_O, "vector_long_end(vector_long self) -> std::vector< long long >::iterator"},
	 { "vector_long_rbegin", _wrap_vector_long_rbegin, METH_O, "vector_long_rbegin(vector_long self) -> std::vector< long long >::reverse_iterator"},
	 { "vector_long_rend", _wrap_vector_long_rend, METH_O, "vector_long_rend(vector_long self) -> std::vector< long long >::reverse_iterator"},
	 { "vector_long_clear", _wrap_vector_long_clear, METH_O, "vector_long_clear(vector_long self)"},
	 { "vector_long_get_allocator", _wrap_vector_long_get_allocator, METH_O, "vector_long_get_allocator(vector_long self) -> std::vector< long long >::allocator_type"},
	 { "vector_long_pop_back", _wrap_vector_long_pop_back, METH_O, "vector_long_pop_back(vector_long self)"},
	 { "vector_long_erase", _wrap_vector_long_erase, METH_VARARGS, "\n"
		"vector_long_erase(vector_long self, std::vector< long long >::iterator pos) -> std::vector< long long >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< long long >::iterator\n"
		"\n"
		"vector_long_erase(vector_long self, std::vector< long long >::iterator first, std::vector< long long >::iterator last) -> std::vector< long long >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< long long >::iterator\n"
		"last: std::vector< long long >::iterator\n"
		"\n"
		""},
	 { "new_vector_long", _wrap_new_vector_long, METH_VARARGS, "\n"
		"vector_long()\n"
		"vector_long(vector_long other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< long long > const &\n"
		"\n"
		"vector_long(std::vector< long long >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< long long >::size_type\n"
		"\n"
		"new_vector_long(std::vector< long long >::size_type size, std::vector< long long >::value_type const & value) -> vector_long\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< long long >::size_type\n"
		"value: std::vector< long long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_push_back", _wrap_vector_long_push_back, METH_VARARGS, "\n"
		"vector_long_push_back(vector_long self, std::vector< long long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< long long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_front", _wrap_vector_long_front, METH_O, "vector_long_front(vector_long self) -> std::vector< long long >::value_type const &"},
	 { "vector_long_back", _wrap_vector_long_back, METH_O, "vector_long_back(vector_long self) -> std::vector< long long >::value_type const &"},
	 { "vector_long_assign", _wrap_vector_long_assign, METH_VARARGS, "\n"
		"vector_long_assign(vector_long self, std::vector< long long >::size_type n, std::vector< long long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< long long >::size_type\n"
		"x: std::vector< long long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_resize", _wrap_vector_long_resize, METH_VARARGS, "\n"
		"vector_long_resize(vector_long self, std::vector< long long >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< long long >::size_type\n"
		"\n"
		"vector_long_resize(vector_long self, std::vector< long long >::size_type new_size, std::vector< long long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< long long >::size_type\n"
		"x: std::vector< long long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_insert", _wrap_vector_long_insert, METH_VARARGS, "\n"
		"vector_long_insert(vector_long self, std::vector< long long >::iterator pos, std::vector< long long >::value_type const & x) -> std::vector< long long >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< long long >::iterator\n"
		"x: std::vector< long long >::value_type const &\n"
		"\n"
		"vector_long_insert(vector_long self, std::vector< long long >::iterator pos, std::vector< long long >::size_type n, std::vector< long long >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< long long >::iterator\n"
		"n: std::vector< long long >::size_type\n"
		"x: std::vector< long long >::value_type const &\n"
		"\n"
		""},
	 { "vector_long_reserve", _wrap_vector_long_reserve, METH_VARARGS, "\n"
		"vector_long_reserve(vector_long self, std::vector< long long >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< long long >::size_type\n"
		"\n"
		""},
	 { "vector_long_capacity", _wrap_vector_long_capacity, METH_O, "vector_long_capacity(vector_long self) -> std::vector< long long >::size_type"},
	 { "delete_vector_long", _wrap_delete_vector_long, METH_O, "delete_vector_long(vector_long self)"},
	 { "vector_long_swigregister", vector_long_swigregister, METH_O, NULL},
	 { "vector_long_swiginit", vector_long_swiginit, METH_VARARGS, NULL},
	 { "vector_float_iterator", _wrap_vector_float_iterator, METH_O, "vector_float_iterator(vector_float self) -> SwigPyIterator"},
	 { "vector_float___nonzero__", _wrap_vector_float___nonzero__, METH_O, "vector_float___nonzero__(vector_float self) -> bool"},
	 { "vector_float___bool__", _wrap_vector_float___bool__, METH_O, "vector_float___bool__(vector_float self) -> bool"},
	 { "vector_float___len__", _wrap_vector_float___len__, METH_O, "vector_float___len__(vector_float self) -> std::vector< float >::size_type"},
	 { "vector_float___getslice__", _wrap_vector_float___getslice__, METH_VARARGS, "\n"
		"vector_float___getslice__(vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> vector_float\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< float >::difference_type\n"
		"j: std::vector< float >::difference_type\n"
		"\n"
		""},
	 { "vector_float___setslice__", _wrap_vector_float___setslice__, METH_VARARGS, "\n"
		"vector_float___setslice__(vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< float >::difference_type\n"
		"j: std::vector< float >::difference_type\n"
		"\n"
		"vector_float___setslice__(vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, vector_float v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< float >::difference_type\n"
		"j: std::vector< float >::difference_type\n"
		"v: std::vector< float,std::allocator< float > > const &\n"
		"\n"
		""},
	 { "vector_float___delslice__", _wrap_vector_float___delslice__, METH_VARARGS, "\n"
		"vector_float___delslice__(vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< float >::difference_type\n"
		"j: std::vector< float >::difference_type\n"
		"\n"
		""},
	 { "vector_float___delitem__", _wrap_vector_float___delitem__, METH_VARARGS, "\n"
		"vector_float___delitem__(vector_float self, std::vector< float >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< float >::difference_type\n"
		"\n"
		"vector_float___delitem__(vector_float self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_float___getitem__", _wrap_vector_float___getitem__, METH_VARARGS, "\n"
		"vector_float___getitem__(vector_float self, SWIGPY_SLICEOBJECT * slice) -> vector_float\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_float___getitem__(vector_float self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< float >::difference_type\n"
		"\n"
		""},
	 { "vector_float___setitem__", _wrap_vector_float___setitem__, METH_VARARGS, "\n"
		"vector_float___setitem__(vector_float self, SWIGPY_SLICEOBJECT * slice, vector_float v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< float,std::allocator< float > > const &\n"
		"\n"
		"vector_float___setitem__(vector_float self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_float___setitem__(vector_float self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< float >::difference_type\n"
		"x: std::vector< float >::value_type const &\n"
		"\n"
		""},
	 { "vector_float_pop", _wrap_vector_float_pop, METH_O, "vector_float_pop(vector_float self) -> std::vector< float >::value_type"},
	 { "vector_float_append", _wrap_vector_float_append, METH_VARARGS, "\n"
		"vector_float_append(vector_float self, std::vector< float >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< float >::value_type const &\n"
		"\n"
		""},
	 { "vector_float_empty", _wrap_vector_float_empty, METH_O, "vector_float_empty(vector_float self) -> bool"},
	 { "vector_float_size", _wrap_vector_float_size, METH_O, "vector_float_size(vector_float self) -> std::vector< float >::size_type"},
	 { "vector_float_swap", _wrap_vector_float_swap, METH_VARARGS, "\n"
		"vector_float_swap(vector_float self, vector_float v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< float > &\n"
		"\n"
		""},
	 { "vector_float_begin", _wrap_vector_float_begin, METH_O, "vector_float_begin(vector_float self) -> std::vector< float >::iterator"},
	 { "vector_float_end", _wrap_vector_float_end, METH_O, "vector_float_end(vector_float self) -> std::vector< float >::iterator"},
	 { "vector_float_rbegin", _wrap_vector_float_rbegin, METH_O, "vector_float_rbegin(vector_float self) -> std::vector< float >::reverse_iterator"},
	 { "vector_float_rend", _wrap_vector_float_rend, METH_O, "vector_float_rend(vector_float self) -> std::vector< float >::reverse_iterator"},
	 { "vector_float_clear", _wrap_vector_float_clear, METH_O, "vector_float_clear(vector_float self)"},
	 { "vector_float_get_allocator", _wrap_vector_float_get_allocator, METH_O, "vector_float_get_allocator(vector_float self) -> std::vector< float >::allocator_type"},
	 { "vector_float_pop_back", _wrap_vector_float_pop_back, METH_O, "vector_float_pop_back(vector_float self)"},
	 { "vector_float_erase", _wrap_vector_float_erase, METH_VARARGS, "\n"
		"vector_float_erase(vector_float self, std::vector< float >::iterator pos) -> std::vector< float >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< float >::iterator\n"
		"\n"
		"vector_float_erase(vector_float self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< float >::iterator\n"
		"last: std::vector< float >::iterator\n"
		"\n"
		""},
	 { "new_vector_float", _wrap_new_vector_float, METH_VARARGS, "\n"
		"vector_float()\n"
		"vector_float(vector_float other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< float > const &\n"
		"\n"
		"vector_float(std::vector< float >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< float >::size_type\n"
		"\n"
		"new_vector_float(std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> vector_float\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< float >::size_type\n"
		"value: std::vector< float >::value_type const &\n"
		"\n"
		""},
	 { "vector_float_push_back", _wrap_vector_float_push_back, METH_VARARGS, "\n"
		"vector_float_push_back(vector_float self, std::vector< float >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< float >::value_type const &\n"
		"\n"
		""},
	 { "vector_float_front", _wrap_vector_float_front, METH_O, "vector_float_front(vector_float self) -> std::vector< float >::value_type const &"},
	 { "vector_float_back", _wrap_vector_float_back, METH_O, "vector_float_back(vector_float self) -> std::vector< float >::value_type const &"},
	 { "vector_float_assign", _wrap_vector_float_assign, METH_VARARGS, "\n"
		"vector_float_assign(vector_float self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< float >::size_type\n"
		"x: std::vector< float >::value_type const &\n"
		"\n"
		""},
	 { "vector_float_resize", _wrap_vector_float_resize, METH_VARARGS, "\n"
		"vector_float_resize(vector_float self, std::vector< float >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< float >::size_type\n"
		"\n"
		"vector_float_resize(vector_float self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< float >::size_type\n"
		"x: std::vector< float >::value_type const &\n"
		"\n"
		""},
	 { "vector_float_insert", _wrap_vector_float_insert, METH_VARARGS, "\n"
		"vector_float_insert(vector_float self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< float >::iterator\n"
		"x: std::vector< float >::value_type const &\n"
		"\n"
		"vector_float_insert(vector_float self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< float >::iterator\n"
		"n: std::vector< float >::size_type\n"
		"x: std::vector< float >::value_type const &\n"
		"\n"
		""},
	 { "vector_float_reserve", _wrap_vector_float_reserve, METH_VARARGS, "\n"
		"vector_float_reserve(vector_float self, std::vector< float >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< float >::size_type\n"
		"\n"
		""},
	 { "vector_float_capacity", _wrap_vector_float_capacity, METH_O, "vector_float_capacity(vector_float self) -> std::vector< float >::size_type"},
	 { "delete_vector_float", _wrap_delete_vector_float, METH_O, "delete_vector_float(vector_float self)"},
	 { "vector_float_swigregister", vector_float_swigregister, METH_O, NULL},
	 { "vector_float_swiginit", vector_float_swiginit, METH_VARARGS, NULL},
	 { "vector_double_iterator", _wrap_vector_double_iterator, METH_O, "vector_double_iterator(vector_double self) -> SwigPyIterator"},
	 { "vector_double___nonzero__", _wrap_vector_double___nonzero__, METH_O, "vector_double___nonzero__(vector_double self) -> bool"},
	 { "vector_double___bool__", _wrap_vector_double___bool__, METH_O, "vector_double___bool__(vector_double self) -> bool"},
	 { "vector_double___len__", _wrap_vector_double___len__, METH_O, "vector_double___len__(vector_double self) -> std::vector< double >::size_type"},
	 { "vector_double___getslice__", _wrap_vector_double___getslice__, METH_VARARGS, "\n"
		"vector_double___getslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> std::vector< double,std::allocator< double > > *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< double >::difference_type\n"
		"j: std::vector< double >::difference_type\n"
		"\n"
		""},
	 { "vector_double___setslice__", _wrap_vector_double___setslice__, METH_VARARGS, "\n"
		"vector_double___setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< double >::difference_type\n"
		"j: std::vector< double >::difference_type\n"
		"\n"
		"vector_double___setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, std::vector< double,std::allocator< double > > const & v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< double >::difference_type\n"
		"j: std::vector< double >::difference_type\n"
		"v: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { "vector_double___delslice__", _wrap_vector_double___delslice__, METH_VARARGS, "\n"
		"vector_double___delslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< double >::difference_type\n"
		"j: std::vector< double >::difference_type\n"
		"\n"
		""},
	 { "vector_double___delitem__", _wrap_vector_double___delitem__, METH_VARARGS, "\n"
		"vector_double___delitem__(vector_double self, std::vector< double >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< double >::difference_type\n"
		"\n"
		"vector_double___delitem__(vector_double self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_double___getitem__", _wrap_vector_double___getitem__, METH_VARARGS, "\n"
		"vector_double___getitem__(vector_double self, SWIGPY_SLICEOBJECT * slice) -> std::vector< double,std::allocator< double > >\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_double___getitem__(vector_double self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< double >::difference_type\n"
		"\n"
		""},
	 { "vector_double___setitem__", _wrap_vector_double___setitem__, METH_VARARGS, "\n"
		"vector_double___setitem__(vector_double self, SWIGPY_SLICEOBJECT * slice, std::vector< double,std::allocator< double > > const & v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		"vector_double___setitem__(vector_double self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_double___setitem__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< double >::difference_type\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_pop", _wrap_vector_double_pop, METH_O, "vector_double_pop(vector_double self) -> std::vector< double >::value_type"},
	 { "vector_double_append", _wrap_vector_double_append, METH_VARARGS, "\n"
		"vector_double_append(vector_double self, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_empty", _wrap_vector_double_empty, METH_O, "vector_double_empty(vector_double self) -> bool"},
	 { "vector_double_size", _wrap_vector_double_size, METH_O, "vector_double_size(vector_double self) -> std::vector< double >::size_type"},
	 { "vector_double_swap", _wrap_vector_double_swap, METH_VARARGS, "\n"
		"vector_double_swap(vector_double self, vector_double v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< double > &\n"
		"\n"
		""},
	 { "vector_double_begin", _wrap_vector_double_begin, METH_O, "vector_double_begin(vector_double self) -> std::vector< double >::iterator"},
	 { "vector_double_end", _wrap_vector_double_end, METH_O, "vector_double_end(vector_double self) -> std::vector< double >::iterator"},
	 { "vector_double_rbegin", _wrap_vector_double_rbegin, METH_O, "vector_double_rbegin(vector_double self) -> std::vector< double >::reverse_iterator"},
	 { "vector_double_rend", _wrap_vector_double_rend, METH_O, "vector_double_rend(vector_double self) -> std::vector< double >::reverse_iterator"},
	 { "vector_double_clear", _wrap_vector_double_clear, METH_O, "vector_double_clear(vector_double self)"},
	 { "vector_double_get_allocator", _wrap_vector_double_get_allocator, METH_O, "vector_double_get_allocator(vector_double self) -> std::vector< double >::allocator_type"},
	 { "vector_double_pop_back", _wrap_vector_double_pop_back, METH_O, "vector_double_pop_back(vector_double self)"},
	 { "vector_double_erase", _wrap_vector_double_erase, METH_VARARGS, "\n"
		"vector_double_erase(vector_double self, std::vector< double >::iterator pos) -> std::vector< double >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< double >::iterator\n"
		"\n"
		"vector_double_erase(vector_double self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< double >::iterator\n"
		"last: std::vector< double >::iterator\n"
		"\n"
		""},
	 { "new_vector_double", _wrap_new_vector_double, METH_VARARGS, "\n"
		"vector_double()\n"
		"vector_double(vector_double other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< double > const &\n"
		"\n"
		"vector_double(std::vector< double >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< double >::size_type\n"
		"\n"
		"new_vector_double(std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< double >::size_type\n"
		"value: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_push_back", _wrap_vector_double_push_back, METH_VARARGS, "\n"
		"vector_double_push_back(vector_double self, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_front", _wrap_vector_double_front, METH_O, "vector_double_front(vector_double self) -> std::vector< double >::value_type const &"},
	 { "vector_double_back", _wrap_vector_double_back, METH_O, "vector_double_back(vector_double self) -> std::vector< double >::value_type const &"},
	 { "vector_double_assign", _wrap_vector_double_assign, METH_VARARGS, "\n"
		"vector_double_assign(vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< double >::size_type\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_resize", _wrap_vector_double_resize, METH_VARARGS, "\n"
		"vector_double_resize(vector_double self, std::vector< double >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< double >::size_type\n"
		"\n"
		"vector_double_resize(vector_double self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< double >::size_type\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_insert", _wrap_vector_double_insert, METH_VARARGS, "\n"
		"vector_double_insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< double >::iterator\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		"vector_double_insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< double >::iterator\n"
		"n: std::vector< double >::size_type\n"
		"x: std::vector< double >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_reserve", _wrap_vector_double_reserve, METH_VARARGS, "\n"
		"vector_double_reserve(vector_double self, std::vector< double >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< double >::size_type\n"
		"\n"
		""},
	 { "vector_double_capacity", _wrap_vector_double_capacity, METH_O, "vector_double_capacity(vector_double self) -> std::vector< double >::size_type"},
	 { "delete_vector_double", _wrap_delete_vector_double, METH_O, "delete_vector_double(vector_double self)"},
	 { "vector_double_swigregister", vector_double_swigregister, METH_O, NULL},
	 { "vector_double_swiginit", vector_double_swiginit, METH_VARARGS, NULL},
	 { "vector_int_array_2_iterator", _wrap_vector_int_array_2_iterator, METH_O, "vector_int_array_2_iterator(vector_int_array_2 self) -> SwigPyIterator"},
	 { "vector_int_array_2___nonzero__", _wrap_vector_int_array_2___nonzero__, METH_O, "vector_int_array_2___nonzero__(vector_int_array_2 self) -> bool"},
	 { "vector_int_array_2___bool__", _wrap_vector_int_array_2___bool__, METH_O, "vector_int_array_2___bool__(vector_int_array_2 self) -> bool"},
	 { "vector_int_array_2___len__", _wrap_vector_int_array_2___len__, METH_O, "vector_int_array_2___len__(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::size_type"},
	 { "vector_int_array_2___getslice__", _wrap_vector_int_array_2___getslice__, METH_VARARGS, "\n"
		"vector_int_array_2___getslice__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i, std::vector< std::array< int,2 > >::difference_type j) -> vector_int_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,2 > >::difference_type\n"
		"j: std::vector< std::array< int,2 > >::difference_type\n"
		"\n"
		""},
	 { "vector_int_array_2___setslice__", _wrap_vector_int_array_2___setslice__, METH_VARARGS, "\n"
		"vector_int_array_2___setslice__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i, std::vector< std::array< int,2 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,2 > >::difference_type\n"
		"j: std::vector< std::array< int,2 > >::difference_type\n"
		"\n"
		"vector_int_array_2___setslice__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i, std::vector< std::array< int,2 > >::difference_type j, vector_int_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,2 > >::difference_type\n"
		"j: std::vector< std::array< int,2 > >::difference_type\n"
		"v: std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &\n"
		"\n"
		""},
	 { "vector_int_array_2___delslice__", _wrap_vector_int_array_2___delslice__, METH_VARARGS, "\n"
		"vector_int_array_2___delslice__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i, std::vector< std::array< int,2 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,2 > >::difference_type\n"
		"j: std::vector< std::array< int,2 > >::difference_type\n"
		"\n"
		""},
	 { "vector_int_array_2___delitem__", _wrap_vector_int_array_2___delitem__, METH_VARARGS, "\n"
		"vector_int_array_2___delitem__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,2 > >::difference_type\n"
		"\n"
		"vector_int_array_2___delitem__(vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_int_array_2___getitem__", _wrap_vector_int_array_2___getitem__, METH_VARARGS, "\n"
		"vector_int_array_2___getitem__(vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice) -> vector_int_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_int_array_2___getitem__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i) -> array_int_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,2 > >::difference_type\n"
		"\n"
		""},
	 { "vector_int_array_2___setitem__", _wrap_vector_int_array_2___setitem__, METH_VARARGS, "\n"
		"vector_int_array_2___setitem__(vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice, vector_int_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > const &\n"
		"\n"
		"vector_int_array_2___setitem__(vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_int_array_2___setitem__(vector_int_array_2 self, std::vector< std::array< int,2 > >::difference_type i, array_int_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,2 > >::difference_type\n"
		"x: std::vector< std::array< int,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_2_pop", _wrap_vector_int_array_2_pop, METH_O, "vector_int_array_2_pop(vector_int_array_2 self) -> array_int_2"},
	 { "vector_int_array_2_append", _wrap_vector_int_array_2_append, METH_VARARGS, "\n"
		"vector_int_array_2_append(vector_int_array_2 self, array_int_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< int,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_2_empty", _wrap_vector_int_array_2_empty, METH_O, "vector_int_array_2_empty(vector_int_array_2 self) -> bool"},
	 { "vector_int_array_2_size", _wrap_vector_int_array_2_size, METH_O, "vector_int_array_2_size(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::size_type"},
	 { "vector_int_array_2_swap", _wrap_vector_int_array_2_swap, METH_VARARGS, "\n"
		"vector_int_array_2_swap(vector_int_array_2 self, vector_int_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::array< int,2 > > &\n"
		"\n"
		""},
	 { "vector_int_array_2_begin", _wrap_vector_int_array_2_begin, METH_O, "vector_int_array_2_begin(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::iterator"},
	 { "vector_int_array_2_end", _wrap_vector_int_array_2_end, METH_O, "vector_int_array_2_end(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::iterator"},
	 { "vector_int_array_2_rbegin", _wrap_vector_int_array_2_rbegin, METH_O, "vector_int_array_2_rbegin(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::reverse_iterator"},
	 { "vector_int_array_2_rend", _wrap_vector_int_array_2_rend, METH_O, "vector_int_array_2_rend(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::reverse_iterator"},
	 { "vector_int_array_2_clear", _wrap_vector_int_array_2_clear, METH_O, "vector_int_array_2_clear(vector_int_array_2 self)"},
	 { "vector_int_array_2_get_allocator", _wrap_vector_int_array_2_get_allocator, METH_O, "vector_int_array_2_get_allocator(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::allocator_type"},
	 { "vector_int_array_2_pop_back", _wrap_vector_int_array_2_pop_back, METH_O, "vector_int_array_2_pop_back(vector_int_array_2 self)"},
	 { "vector_int_array_2_erase", _wrap_vector_int_array_2_erase, METH_VARARGS, "\n"
		"vector_int_array_2_erase(vector_int_array_2 self, std::vector< std::array< int,2 > >::iterator pos) -> std::vector< std::array< int,2 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< int,2 > >::iterator\n"
		"\n"
		"vector_int_array_2_erase(vector_int_array_2 self, std::vector< std::array< int,2 > >::iterator first, std::vector< std::array< int,2 > >::iterator last) -> std::vector< std::array< int,2 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::array< int,2 > >::iterator\n"
		"last: std::vector< std::array< int,2 > >::iterator\n"
		"\n"
		""},
	 { "new_vector_int_array_2", _wrap_new_vector_int_array_2, METH_VARARGS, "\n"
		"vector_int_array_2()\n"
		"vector_int_array_2(vector_int_array_2 other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::array< int,2 > > const &\n"
		"\n"
		"vector_int_array_2(std::vector< std::array< int,2 > >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< int,2 > >::size_type\n"
		"\n"
		"new_vector_int_array_2(std::vector< std::array< int,2 > >::size_type size, array_int_2 value) -> vector_int_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< int,2 > >::size_type\n"
		"value: std::vector< std::array< int,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_2_push_back", _wrap_vector_int_array_2_push_back, METH_VARARGS, "\n"
		"vector_int_array_2_push_back(vector_int_array_2 self, array_int_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< int,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_2_front", _wrap_vector_int_array_2_front, METH_O, "vector_int_array_2_front(vector_int_array_2 self) -> array_int_2"},
	 { "vector_int_array_2_back", _wrap_vector_int_array_2_back, METH_O, "vector_int_array_2_back(vector_int_array_2 self) -> array_int_2"},
	 { "vector_int_array_2_assign", _wrap_vector_int_array_2_assign, METH_VARARGS, "\n"
		"vector_int_array_2_assign(vector_int_array_2 self, std::vector< std::array< int,2 > >::size_type n, array_int_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< int,2 > >::size_type\n"
		"x: std::vector< std::array< int,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_2_resize", _wrap_vector_int_array_2_resize, METH_VARARGS, "\n"
		"vector_int_array_2_resize(vector_int_array_2 self, std::vector< std::array< int,2 > >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< int,2 > >::size_type\n"
		"\n"
		"vector_int_array_2_resize(vector_int_array_2 self, std::vector< std::array< int,2 > >::size_type new_size, array_int_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< int,2 > >::size_type\n"
		"x: std::vector< std::array< int,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_2_insert", _wrap_vector_int_array_2_insert, METH_VARARGS, "\n"
		"vector_int_array_2_insert(vector_int_array_2 self, std::vector< std::array< int,2 > >::iterator pos, array_int_2 x) -> std::vector< std::array< int,2 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< int,2 > >::iterator\n"
		"x: std::vector< std::array< int,2 > >::value_type const &\n"
		"\n"
		"vector_int_array_2_insert(vector_int_array_2 self, std::vector< std::array< int,2 > >::iterator pos, std::vector< std::array< int,2 > >::size_type n, array_int_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< int,2 > >::iterator\n"
		"n: std::vector< std::array< int,2 > >::size_type\n"
		"x: std::vector< std::array< int,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_2_reserve", _wrap_vector_int_array_2_reserve, METH_VARARGS, "\n"
		"vector_int_array_2_reserve(vector_int_array_2 self, std::vector< std::array< int,2 > >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< int,2 > >::size_type\n"
		"\n"
		""},
	 { "vector_int_array_2_capacity", _wrap_vector_int_array_2_capacity, METH_O, "vector_int_array_2_capacity(vector_int_array_2 self) -> std::vector< std::array< int,2 > >::size_type"},
	 { "delete_vector_int_array_2", _wrap_delete_vector_int_array_2, METH_O, "delete_vector_int_array_2(vector_int_array_2 self)"},
	 { "vector_int_array_2_swigregister", vector_int_array_2_swigregister, METH_O, NULL},
	 { "vector_int_array_2_swiginit", vector_int_array_2_swiginit, METH_VARARGS, NULL},
	 { "vector_int_array_3_iterator", _wrap_vector_int_array_3_iterator, METH_O, "vector_int_array_3_iterator(vector_int_array_3 self) -> SwigPyIterator"},
	 { "vector_int_array_3___nonzero__", _wrap_vector_int_array_3___nonzero__, METH_O, "vector_int_array_3___nonzero__(vector_int_array_3 self) -> bool"},
	 { "vector_int_array_3___bool__", _wrap_vector_int_array_3___bool__, METH_O, "vector_int_array_3___bool__(vector_int_array_3 self) -> bool"},
	 { "vector_int_array_3___len__", _wrap_vector_int_array_3___len__, METH_O, "vector_int_array_3___len__(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::size_type"},
	 { "vector_int_array_3___getslice__", _wrap_vector_int_array_3___getslice__, METH_VARARGS, "\n"
		"vector_int_array_3___getslice__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i, std::vector< std::array< int,3 > >::difference_type j) -> vector_int_array_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,3 > >::difference_type\n"
		"j: std::vector< std::array< int,3 > >::difference_type\n"
		"\n"
		""},
	 { "vector_int_array_3___setslice__", _wrap_vector_int_array_3___setslice__, METH_VARARGS, "\n"
		"vector_int_array_3___setslice__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i, std::vector< std::array< int,3 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,3 > >::difference_type\n"
		"j: std::vector< std::array< int,3 > >::difference_type\n"
		"\n"
		"vector_int_array_3___setslice__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i, std::vector< std::array< int,3 > >::difference_type j, vector_int_array_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,3 > >::difference_type\n"
		"j: std::vector< std::array< int,3 > >::difference_type\n"
		"v: std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &\n"
		"\n"
		""},
	 { "vector_int_array_3___delslice__", _wrap_vector_int_array_3___delslice__, METH_VARARGS, "\n"
		"vector_int_array_3___delslice__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i, std::vector< std::array< int,3 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,3 > >::difference_type\n"
		"j: std::vector< std::array< int,3 > >::difference_type\n"
		"\n"
		""},
	 { "vector_int_array_3___delitem__", _wrap_vector_int_array_3___delitem__, METH_VARARGS, "\n"
		"vector_int_array_3___delitem__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,3 > >::difference_type\n"
		"\n"
		"vector_int_array_3___delitem__(vector_int_array_3 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_int_array_3___getitem__", _wrap_vector_int_array_3___getitem__, METH_VARARGS, "\n"
		"vector_int_array_3___getitem__(vector_int_array_3 self, SWIGPY_SLICEOBJECT * slice) -> vector_int_array_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_int_array_3___getitem__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i) -> array_int_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,3 > >::difference_type\n"
		"\n"
		""},
	 { "vector_int_array_3___setitem__", _wrap_vector_int_array_3___setitem__, METH_VARARGS, "\n"
		"vector_int_array_3___setitem__(vector_int_array_3 self, SWIGPY_SLICEOBJECT * slice, vector_int_array_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &\n"
		"\n"
		"vector_int_array_3___setitem__(vector_int_array_3 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_int_array_3___setitem__(vector_int_array_3 self, std::vector< std::array< int,3 > >::difference_type i, array_int_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,3 > >::difference_type\n"
		"x: std::vector< std::array< int,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_3_pop", _wrap_vector_int_array_3_pop, METH_O, "vector_int_array_3_pop(vector_int_array_3 self) -> array_int_3"},
	 { "vector_int_array_3_append", _wrap_vector_int_array_3_append, METH_VARARGS, "\n"
		"vector_int_array_3_append(vector_int_array_3 self, array_int_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< int,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_3_empty", _wrap_vector_int_array_3_empty, METH_O, "vector_int_array_3_empty(vector_int_array_3 self) -> bool"},
	 { "vector_int_array_3_size", _wrap_vector_int_array_3_size, METH_O, "vector_int_array_3_size(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::size_type"},
	 { "vector_int_array_3_swap", _wrap_vector_int_array_3_swap, METH_VARARGS, "\n"
		"vector_int_array_3_swap(vector_int_array_3 self, vector_int_array_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::array< int,3 > > &\n"
		"\n"
		""},
	 { "vector_int_array_3_begin", _wrap_vector_int_array_3_begin, METH_O, "vector_int_array_3_begin(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::iterator"},
	 { "vector_int_array_3_end", _wrap_vector_int_array_3_end, METH_O, "vector_int_array_3_end(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::iterator"},
	 { "vector_int_array_3_rbegin", _wrap_vector_int_array_3_rbegin, METH_O, "vector_int_array_3_rbegin(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::reverse_iterator"},
	 { "vector_int_array_3_rend", _wrap_vector_int_array_3_rend, METH_O, "vector_int_array_3_rend(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::reverse_iterator"},
	 { "vector_int_array_3_clear", _wrap_vector_int_array_3_clear, METH_O, "vector_int_array_3_clear(vector_int_array_3 self)"},
	 { "vector_int_array_3_get_allocator", _wrap_vector_int_array_3_get_allocator, METH_O, "vector_int_array_3_get_allocator(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::allocator_type"},
	 { "vector_int_array_3_pop_back", _wrap_vector_int_array_3_pop_back, METH_O, "vector_int_array_3_pop_back(vector_int_array_3 self)"},
	 { "vector_int_array_3_erase", _wrap_vector_int_array_3_erase, METH_VARARGS, "\n"
		"vector_int_array_3_erase(vector_int_array_3 self, std::vector< std::array< int,3 > >::iterator pos) -> std::vector< std::array< int,3 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< int,3 > >::iterator\n"
		"\n"
		"vector_int_array_3_erase(vector_int_array_3 self, std::vector< std::array< int,3 > >::iterator first, std::vector< std::array< int,3 > >::iterator last) -> std::vector< std::array< int,3 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::array< int,3 > >::iterator\n"
		"last: std::vector< std::array< int,3 > >::iterator\n"
		"\n"
		""},
	 { "new_vector_int_array_3", _wrap_new_vector_int_array_3, METH_VARARGS, "\n"
		"vector_int_array_3()\n"
		"vector_int_array_3(vector_int_array_3 other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::array< int,3 > > const &\n"
		"\n"
		"vector_int_array_3(std::vector< std::array< int,3 > >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< int,3 > >::size_type\n"
		"\n"
		"new_vector_int_array_3(std::vector< std::array< int,3 > >::size_type size, array_int_3 value) -> vector_int_array_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< int,3 > >::size_type\n"
		"value: std::vector< std::array< int,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_3_push_back", _wrap_vector_int_array_3_push_back, METH_VARARGS, "\n"
		"vector_int_array_3_push_back(vector_int_array_3 self, array_int_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< int,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_3_front", _wrap_vector_int_array_3_front, METH_O, "vector_int_array_3_front(vector_int_array_3 self) -> array_int_3"},
	 { "vector_int_array_3_back", _wrap_vector_int_array_3_back, METH_O, "vector_int_array_3_back(vector_int_array_3 self) -> array_int_3"},
	 { "vector_int_array_3_assign", _wrap_vector_int_array_3_assign, METH_VARARGS, "\n"
		"vector_int_array_3_assign(vector_int_array_3 self, std::vector< std::array< int,3 > >::size_type n, array_int_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< int,3 > >::size_type\n"
		"x: std::vector< std::array< int,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_3_resize", _wrap_vector_int_array_3_resize, METH_VARARGS, "\n"
		"vector_int_array_3_resize(vector_int_array_3 self, std::vector< std::array< int,3 > >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< int,3 > >::size_type\n"
		"\n"
		"vector_int_array_3_resize(vector_int_array_3 self, std::vector< std::array< int,3 > >::size_type new_size, array_int_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< int,3 > >::size_type\n"
		"x: std::vector< std::array< int,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_3_insert", _wrap_vector_int_array_3_insert, METH_VARARGS, "\n"
		"vector_int_array_3_insert(vector_int_array_3 self, std::vector< std::array< int,3 > >::iterator pos, array_int_3 x) -> std::vector< std::array< int,3 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< int,3 > >::iterator\n"
		"x: std::vector< std::array< int,3 > >::value_type const &\n"
		"\n"
		"vector_int_array_3_insert(vector_int_array_3 self, std::vector< std::array< int,3 > >::iterator pos, std::vector< std::array< int,3 > >::size_type n, array_int_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< int,3 > >::iterator\n"
		"n: std::vector< std::array< int,3 > >::size_type\n"
		"x: std::vector< std::array< int,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_3_reserve", _wrap_vector_int_array_3_reserve, METH_VARARGS, "\n"
		"vector_int_array_3_reserve(vector_int_array_3 self, std::vector< std::array< int,3 > >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< int,3 > >::size_type\n"
		"\n"
		""},
	 { "vector_int_array_3_capacity", _wrap_vector_int_array_3_capacity, METH_O, "vector_int_array_3_capacity(vector_int_array_3 self) -> std::vector< std::array< int,3 > >::size_type"},
	 { "delete_vector_int_array_3", _wrap_delete_vector_int_array_3, METH_O, "delete_vector_int_array_3(vector_int_array_3 self)"},
	 { "vector_int_array_3_swigregister", vector_int_array_3_swigregister, METH_O, NULL},
	 { "vector_int_array_3_swiginit", vector_int_array_3_swiginit, METH_VARARGS, NULL},
	 { "vector_int_array_6_iterator", _wrap_vector_int_array_6_iterator, METH_O, "vector_int_array_6_iterator(vector_int_array_6 self) -> SwigPyIterator"},
	 { "vector_int_array_6___nonzero__", _wrap_vector_int_array_6___nonzero__, METH_O, "vector_int_array_6___nonzero__(vector_int_array_6 self) -> bool"},
	 { "vector_int_array_6___bool__", _wrap_vector_int_array_6___bool__, METH_O, "vector_int_array_6___bool__(vector_int_array_6 self) -> bool"},
	 { "vector_int_array_6___len__", _wrap_vector_int_array_6___len__, METH_O, "vector_int_array_6___len__(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::size_type"},
	 { "vector_int_array_6___getslice__", _wrap_vector_int_array_6___getslice__, METH_VARARGS, "\n"
		"vector_int_array_6___getslice__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i, std::vector< std::array< int,6 > >::difference_type j) -> vector_int_array_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,6 > >::difference_type\n"
		"j: std::vector< std::array< int,6 > >::difference_type\n"
		"\n"
		""},
	 { "vector_int_array_6___setslice__", _wrap_vector_int_array_6___setslice__, METH_VARARGS, "\n"
		"vector_int_array_6___setslice__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i, std::vector< std::array< int,6 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,6 > >::difference_type\n"
		"j: std::vector< std::array< int,6 > >::difference_type\n"
		"\n"
		"vector_int_array_6___setslice__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i, std::vector< std::array< int,6 > >::difference_type j, vector_int_array_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,6 > >::difference_type\n"
		"j: std::vector< std::array< int,6 > >::difference_type\n"
		"v: std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &\n"
		"\n"
		""},
	 { "vector_int_array_6___delslice__", _wrap_vector_int_array_6___delslice__, METH_VARARGS, "\n"
		"vector_int_array_6___delslice__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i, std::vector< std::array< int,6 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,6 > >::difference_type\n"
		"j: std::vector< std::array< int,6 > >::difference_type\n"
		"\n"
		""},
	 { "vector_int_array_6___delitem__", _wrap_vector_int_array_6___delitem__, METH_VARARGS, "\n"
		"vector_int_array_6___delitem__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,6 > >::difference_type\n"
		"\n"
		"vector_int_array_6___delitem__(vector_int_array_6 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_int_array_6___getitem__", _wrap_vector_int_array_6___getitem__, METH_VARARGS, "\n"
		"vector_int_array_6___getitem__(vector_int_array_6 self, SWIGPY_SLICEOBJECT * slice) -> vector_int_array_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_int_array_6___getitem__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i) -> array_int_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,6 > >::difference_type\n"
		"\n"
		""},
	 { "vector_int_array_6___setitem__", _wrap_vector_int_array_6___setitem__, METH_VARARGS, "\n"
		"vector_int_array_6___setitem__(vector_int_array_6 self, SWIGPY_SLICEOBJECT * slice, vector_int_array_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &\n"
		"\n"
		"vector_int_array_6___setitem__(vector_int_array_6 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_int_array_6___setitem__(vector_int_array_6 self, std::vector< std::array< int,6 > >::difference_type i, array_int_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< int,6 > >::difference_type\n"
		"x: std::vector< std::array< int,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_6_pop", _wrap_vector_int_array_6_pop, METH_O, "vector_int_array_6_pop(vector_int_array_6 self) -> array_int_6"},
	 { "vector_int_array_6_append", _wrap_vector_int_array_6_append, METH_VARARGS, "\n"
		"vector_int_array_6_append(vector_int_array_6 self, array_int_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< int,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_6_empty", _wrap_vector_int_array_6_empty, METH_O, "vector_int_array_6_empty(vector_int_array_6 self) -> bool"},
	 { "vector_int_array_6_size", _wrap_vector_int_array_6_size, METH_O, "vector_int_array_6_size(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::size_type"},
	 { "vector_int_array_6_swap", _wrap_vector_int_array_6_swap, METH_VARARGS, "\n"
		"vector_int_array_6_swap(vector_int_array_6 self, vector_int_array_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::array< int,6 > > &\n"
		"\n"
		""},
	 { "vector_int_array_6_begin", _wrap_vector_int_array_6_begin, METH_O, "vector_int_array_6_begin(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::iterator"},
	 { "vector_int_array_6_end", _wrap_vector_int_array_6_end, METH_O, "vector_int_array_6_end(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::iterator"},
	 { "vector_int_array_6_rbegin", _wrap_vector_int_array_6_rbegin, METH_O, "vector_int_array_6_rbegin(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::reverse_iterator"},
	 { "vector_int_array_6_rend", _wrap_vector_int_array_6_rend, METH_O, "vector_int_array_6_rend(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::reverse_iterator"},
	 { "vector_int_array_6_clear", _wrap_vector_int_array_6_clear, METH_O, "vector_int_array_6_clear(vector_int_array_6 self)"},
	 { "vector_int_array_6_get_allocator", _wrap_vector_int_array_6_get_allocator, METH_O, "vector_int_array_6_get_allocator(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::allocator_type"},
	 { "vector_int_array_6_pop_back", _wrap_vector_int_array_6_pop_back, METH_O, "vector_int_array_6_pop_back(vector_int_array_6 self)"},
	 { "vector_int_array_6_erase", _wrap_vector_int_array_6_erase, METH_VARARGS, "\n"
		"vector_int_array_6_erase(vector_int_array_6 self, std::vector< std::array< int,6 > >::iterator pos) -> std::vector< std::array< int,6 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< int,6 > >::iterator\n"
		"\n"
		"vector_int_array_6_erase(vector_int_array_6 self, std::vector< std::array< int,6 > >::iterator first, std::vector< std::array< int,6 > >::iterator last) -> std::vector< std::array< int,6 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::array< int,6 > >::iterator\n"
		"last: std::vector< std::array< int,6 > >::iterator\n"
		"\n"
		""},
	 { "new_vector_int_array_6", _wrap_new_vector_int_array_6, METH_VARARGS, "\n"
		"vector_int_array_6()\n"
		"vector_int_array_6(vector_int_array_6 other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::array< int,6 > > const &\n"
		"\n"
		"vector_int_array_6(std::vector< std::array< int,6 > >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< int,6 > >::size_type\n"
		"\n"
		"new_vector_int_array_6(std::vector< std::array< int,6 > >::size_type size, array_int_6 value) -> vector_int_array_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< int,6 > >::size_type\n"
		"value: std::vector< std::array< int,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_6_push_back", _wrap_vector_int_array_6_push_back, METH_VARARGS, "\n"
		"vector_int_array_6_push_back(vector_int_array_6 self, array_int_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< int,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_6_front", _wrap_vector_int_array_6_front, METH_O, "vector_int_array_6_front(vector_int_array_6 self) -> array_int_6"},
	 { "vector_int_array_6_back", _wrap_vector_int_array_6_back, METH_O, "vector_int_array_6_back(vector_int_array_6 self) -> array_int_6"},
	 { "vector_int_array_6_assign", _wrap_vector_int_array_6_assign, METH_VARARGS, "\n"
		"vector_int_array_6_assign(vector_int_array_6 self, std::vector< std::array< int,6 > >::size_type n, array_int_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< int,6 > >::size_type\n"
		"x: std::vector< std::array< int,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_6_resize", _wrap_vector_int_array_6_resize, METH_VARARGS, "\n"
		"vector_int_array_6_resize(vector_int_array_6 self, std::vector< std::array< int,6 > >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< int,6 > >::size_type\n"
		"\n"
		"vector_int_array_6_resize(vector_int_array_6 self, std::vector< std::array< int,6 > >::size_type new_size, array_int_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< int,6 > >::size_type\n"
		"x: std::vector< std::array< int,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_6_insert", _wrap_vector_int_array_6_insert, METH_VARARGS, "\n"
		"vector_int_array_6_insert(vector_int_array_6 self, std::vector< std::array< int,6 > >::iterator pos, array_int_6 x) -> std::vector< std::array< int,6 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< int,6 > >::iterator\n"
		"x: std::vector< std::array< int,6 > >::value_type const &\n"
		"\n"
		"vector_int_array_6_insert(vector_int_array_6 self, std::vector< std::array< int,6 > >::iterator pos, std::vector< std::array< int,6 > >::size_type n, array_int_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< int,6 > >::iterator\n"
		"n: std::vector< std::array< int,6 > >::size_type\n"
		"x: std::vector< std::array< int,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_int_array_6_reserve", _wrap_vector_int_array_6_reserve, METH_VARARGS, "\n"
		"vector_int_array_6_reserve(vector_int_array_6 self, std::vector< std::array< int,6 > >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< int,6 > >::size_type\n"
		"\n"
		""},
	 { "vector_int_array_6_capacity", _wrap_vector_int_array_6_capacity, METH_O, "vector_int_array_6_capacity(vector_int_array_6 self) -> std::vector< std::array< int,6 > >::size_type"},
	 { "delete_vector_int_array_6", _wrap_delete_vector_int_array_6, METH_O, "delete_vector_int_array_6(vector_int_array_6 self)"},
	 { "vector_int_array_6_swigregister", vector_int_array_6_swigregister, METH_O, NULL},
	 { "vector_int_array_6_swiginit", vector_int_array_6_swiginit, METH_VARARGS, NULL},
	 { "vector_double_array_2_iterator", _wrap_vector_double_array_2_iterator, METH_O, "vector_double_array_2_iterator(vector_double_array_2 self) -> SwigPyIterator"},
	 { "vector_double_array_2___nonzero__", _wrap_vector_double_array_2___nonzero__, METH_O, "vector_double_array_2___nonzero__(vector_double_array_2 self) -> bool"},
	 { "vector_double_array_2___bool__", _wrap_vector_double_array_2___bool__, METH_O, "vector_double_array_2___bool__(vector_double_array_2 self) -> bool"},
	 { "vector_double_array_2___len__", _wrap_vector_double_array_2___len__, METH_O, "vector_double_array_2___len__(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::size_type"},
	 { "vector_double_array_2___getslice__", _wrap_vector_double_array_2___getslice__, METH_VARARGS, "\n"
		"vector_double_array_2___getslice__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i, std::vector< std::array< double,2 > >::difference_type j) -> vector_double_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,2 > >::difference_type\n"
		"j: std::vector< std::array< double,2 > >::difference_type\n"
		"\n"
		""},
	 { "vector_double_array_2___setslice__", _wrap_vector_double_array_2___setslice__, METH_VARARGS, "\n"
		"vector_double_array_2___setslice__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i, std::vector< std::array< double,2 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,2 > >::difference_type\n"
		"j: std::vector< std::array< double,2 > >::difference_type\n"
		"\n"
		"vector_double_array_2___setslice__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i, std::vector< std::array< double,2 > >::difference_type j, vector_double_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,2 > >::difference_type\n"
		"j: std::vector< std::array< double,2 > >::difference_type\n"
		"v: std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &\n"
		"\n"
		""},
	 { "vector_double_array_2___delslice__", _wrap_vector_double_array_2___delslice__, METH_VARARGS, "\n"
		"vector_double_array_2___delslice__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i, std::vector< std::array< double,2 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,2 > >::difference_type\n"
		"j: std::vector< std::array< double,2 > >::difference_type\n"
		"\n"
		""},
	 { "vector_double_array_2___delitem__", _wrap_vector_double_array_2___delitem__, METH_VARARGS, "\n"
		"vector_double_array_2___delitem__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,2 > >::difference_type\n"
		"\n"
		"vector_double_array_2___delitem__(vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_double_array_2___getitem__", _wrap_vector_double_array_2___getitem__, METH_VARARGS, "\n"
		"vector_double_array_2___getitem__(vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice) -> vector_double_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_double_array_2___getitem__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i) -> array_double_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,2 > >::difference_type\n"
		"\n"
		""},
	 { "vector_double_array_2___setitem__", _wrap_vector_double_array_2___setitem__, METH_VARARGS, "\n"
		"vector_double_array_2___setitem__(vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice, vector_double_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &\n"
		"\n"
		"vector_double_array_2___setitem__(vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_double_array_2___setitem__(vector_double_array_2 self, std::vector< std::array< double,2 > >::difference_type i, array_double_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,2 > >::difference_type\n"
		"x: std::vector< std::array< double,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_2_pop", _wrap_vector_double_array_2_pop, METH_O, "vector_double_array_2_pop(vector_double_array_2 self) -> array_double_2"},
	 { "vector_double_array_2_append", _wrap_vector_double_array_2_append, METH_VARARGS, "\n"
		"vector_double_array_2_append(vector_double_array_2 self, array_double_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< double,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_2_empty", _wrap_vector_double_array_2_empty, METH_O, "vector_double_array_2_empty(vector_double_array_2 self) -> bool"},
	 { "vector_double_array_2_size", _wrap_vector_double_array_2_size, METH_O, "vector_double_array_2_size(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::size_type"},
	 { "vector_double_array_2_swap", _wrap_vector_double_array_2_swap, METH_VARARGS, "\n"
		"vector_double_array_2_swap(vector_double_array_2 self, vector_double_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::array< double,2 > > &\n"
		"\n"
		""},
	 { "vector_double_array_2_begin", _wrap_vector_double_array_2_begin, METH_O, "vector_double_array_2_begin(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::iterator"},
	 { "vector_double_array_2_end", _wrap_vector_double_array_2_end, METH_O, "vector_double_array_2_end(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::iterator"},
	 { "vector_double_array_2_rbegin", _wrap_vector_double_array_2_rbegin, METH_O, "vector_double_array_2_rbegin(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::reverse_iterator"},
	 { "vector_double_array_2_rend", _wrap_vector_double_array_2_rend, METH_O, "vector_double_array_2_rend(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::reverse_iterator"},
	 { "vector_double_array_2_clear", _wrap_vector_double_array_2_clear, METH_O, "vector_double_array_2_clear(vector_double_array_2 self)"},
	 { "vector_double_array_2_get_allocator", _wrap_vector_double_array_2_get_allocator, METH_O, "vector_double_array_2_get_allocator(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::allocator_type"},
	 { "vector_double_array_2_pop_back", _wrap_vector_double_array_2_pop_back, METH_O, "vector_double_array_2_pop_back(vector_double_array_2 self)"},
	 { "vector_double_array_2_erase", _wrap_vector_double_array_2_erase, METH_VARARGS, "\n"
		"vector_double_array_2_erase(vector_double_array_2 self, std::vector< std::array< double,2 > >::iterator pos) -> std::vector< std::array< double,2 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< double,2 > >::iterator\n"
		"\n"
		"vector_double_array_2_erase(vector_double_array_2 self, std::vector< std::array< double,2 > >::iterator first, std::vector< std::array< double,2 > >::iterator last) -> std::vector< std::array< double,2 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::array< double,2 > >::iterator\n"
		"last: std::vector< std::array< double,2 > >::iterator\n"
		"\n"
		""},
	 { "new_vector_double_array_2", _wrap_new_vector_double_array_2, METH_VARARGS, "\n"
		"vector_double_array_2()\n"
		"vector_double_array_2(vector_double_array_2 other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::array< double,2 > > const &\n"
		"\n"
		"vector_double_array_2(std::vector< std::array< double,2 > >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< double,2 > >::size_type\n"
		"\n"
		"new_vector_double_array_2(std::vector< std::array< double,2 > >::size_type size, array_double_2 value) -> vector_double_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< double,2 > >::size_type\n"
		"value: std::vector< std::array< double,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_2_push_back", _wrap_vector_double_array_2_push_back, METH_VARARGS, "\n"
		"vector_double_array_2_push_back(vector_double_array_2 self, array_double_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< double,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_2_front", _wrap_vector_double_array_2_front, METH_O, "vector_double_array_2_front(vector_double_array_2 self) -> array_double_2"},
	 { "vector_double_array_2_back", _wrap_vector_double_array_2_back, METH_O, "vector_double_array_2_back(vector_double_array_2 self) -> array_double_2"},
	 { "vector_double_array_2_assign", _wrap_vector_double_array_2_assign, METH_VARARGS, "\n"
		"vector_double_array_2_assign(vector_double_array_2 self, std::vector< std::array< double,2 > >::size_type n, array_double_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< double,2 > >::size_type\n"
		"x: std::vector< std::array< double,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_2_resize", _wrap_vector_double_array_2_resize, METH_VARARGS, "\n"
		"vector_double_array_2_resize(vector_double_array_2 self, std::vector< std::array< double,2 > >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< double,2 > >::size_type\n"
		"\n"
		"vector_double_array_2_resize(vector_double_array_2 self, std::vector< std::array< double,2 > >::size_type new_size, array_double_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< double,2 > >::size_type\n"
		"x: std::vector< std::array< double,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_2_insert", _wrap_vector_double_array_2_insert, METH_VARARGS, "\n"
		"vector_double_array_2_insert(vector_double_array_2 self, std::vector< std::array< double,2 > >::iterator pos, array_double_2 x) -> std::vector< std::array< double,2 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< double,2 > >::iterator\n"
		"x: std::vector< std::array< double,2 > >::value_type const &\n"
		"\n"
		"vector_double_array_2_insert(vector_double_array_2 self, std::vector< std::array< double,2 > >::iterator pos, std::vector< std::array< double,2 > >::size_type n, array_double_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< double,2 > >::iterator\n"
		"n: std::vector< std::array< double,2 > >::size_type\n"
		"x: std::vector< std::array< double,2 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_2_reserve", _wrap_vector_double_array_2_reserve, METH_VARARGS, "\n"
		"vector_double_array_2_reserve(vector_double_array_2 self, std::vector< std::array< double,2 > >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< double,2 > >::size_type\n"
		"\n"
		""},
	 { "vector_double_array_2_capacity", _wrap_vector_double_array_2_capacity, METH_O, "vector_double_array_2_capacity(vector_double_array_2 self) -> std::vector< std::array< double,2 > >::size_type"},
	 { "delete_vector_double_array_2", _wrap_delete_vector_double_array_2, METH_O, "delete_vector_double_array_2(vector_double_array_2 self)"},
	 { "vector_double_array_2_swigregister", vector_double_array_2_swigregister, METH_O, NULL},
	 { "vector_double_array_2_swiginit", vector_double_array_2_swiginit, METH_VARARGS, NULL},
	 { "vector_double_array_3_iterator", _wrap_vector_double_array_3_iterator, METH_O, "vector_double_array_3_iterator(vector_double_array_3 self) -> SwigPyIterator"},
	 { "vector_double_array_3___nonzero__", _wrap_vector_double_array_3___nonzero__, METH_O, "vector_double_array_3___nonzero__(vector_double_array_3 self) -> bool"},
	 { "vector_double_array_3___bool__", _wrap_vector_double_array_3___bool__, METH_O, "vector_double_array_3___bool__(vector_double_array_3 self) -> bool"},
	 { "vector_double_array_3___len__", _wrap_vector_double_array_3___len__, METH_O, "vector_double_array_3___len__(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::size_type"},
	 { "vector_double_array_3___getslice__", _wrap_vector_double_array_3___getslice__, METH_VARARGS, "\n"
		"vector_double_array_3___getslice__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i, std::vector< std::array< double,3 > >::difference_type j) -> vector_double_array_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,3 > >::difference_type\n"
		"j: std::vector< std::array< double,3 > >::difference_type\n"
		"\n"
		""},
	 { "vector_double_array_3___setslice__", _wrap_vector_double_array_3___setslice__, METH_VARARGS, "\n"
		"vector_double_array_3___setslice__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i, std::vector< std::array< double,3 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,3 > >::difference_type\n"
		"j: std::vector< std::array< double,3 > >::difference_type\n"
		"\n"
		"vector_double_array_3___setslice__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i, std::vector< std::array< double,3 > >::difference_type j, vector_double_array_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,3 > >::difference_type\n"
		"j: std::vector< std::array< double,3 > >::difference_type\n"
		"v: std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &\n"
		"\n"
		""},
	 { "vector_double_array_3___delslice__", _wrap_vector_double_array_3___delslice__, METH_VARARGS, "\n"
		"vector_double_array_3___delslice__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i, std::vector< std::array< double,3 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,3 > >::difference_type\n"
		"j: std::vector< std::array< double,3 > >::difference_type\n"
		"\n"
		""},
	 { "vector_double_array_3___delitem__", _wrap_vector_double_array_3___delitem__, METH_VARARGS, "\n"
		"vector_double_array_3___delitem__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,3 > >::difference_type\n"
		"\n"
		"vector_double_array_3___delitem__(vector_double_array_3 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_double_array_3___getitem__", _wrap_vector_double_array_3___getitem__, METH_VARARGS, "\n"
		"vector_double_array_3___getitem__(vector_double_array_3 self, SWIGPY_SLICEOBJECT * slice) -> vector_double_array_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_double_array_3___getitem__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i) -> array_double_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,3 > >::difference_type\n"
		"\n"
		""},
	 { "vector_double_array_3___setitem__", _wrap_vector_double_array_3___setitem__, METH_VARARGS, "\n"
		"vector_double_array_3___setitem__(vector_double_array_3 self, SWIGPY_SLICEOBJECT * slice, vector_double_array_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > const &\n"
		"\n"
		"vector_double_array_3___setitem__(vector_double_array_3 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_double_array_3___setitem__(vector_double_array_3 self, std::vector< std::array< double,3 > >::difference_type i, array_double_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,3 > >::difference_type\n"
		"x: std::vector< std::array< double,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_3_pop", _wrap_vector_double_array_3_pop, METH_O, "vector_double_array_3_pop(vector_double_array_3 self) -> array_double_3"},
	 { "vector_double_array_3_append", _wrap_vector_double_array_3_append, METH_VARARGS, "\n"
		"vector_double_array_3_append(vector_double_array_3 self, array_double_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< double,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_3_empty", _wrap_vector_double_array_3_empty, METH_O, "vector_double_array_3_empty(vector_double_array_3 self) -> bool"},
	 { "vector_double_array_3_size", _wrap_vector_double_array_3_size, METH_O, "vector_double_array_3_size(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::size_type"},
	 { "vector_double_array_3_swap", _wrap_vector_double_array_3_swap, METH_VARARGS, "\n"
		"vector_double_array_3_swap(vector_double_array_3 self, vector_double_array_3 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::array< double,3 > > &\n"
		"\n"
		""},
	 { "vector_double_array_3_begin", _wrap_vector_double_array_3_begin, METH_O, "vector_double_array_3_begin(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::iterator"},
	 { "vector_double_array_3_end", _wrap_vector_double_array_3_end, METH_O, "vector_double_array_3_end(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::iterator"},
	 { "vector_double_array_3_rbegin", _wrap_vector_double_array_3_rbegin, METH_O, "vector_double_array_3_rbegin(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::reverse_iterator"},
	 { "vector_double_array_3_rend", _wrap_vector_double_array_3_rend, METH_O, "vector_double_array_3_rend(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::reverse_iterator"},
	 { "vector_double_array_3_clear", _wrap_vector_double_array_3_clear, METH_O, "vector_double_array_3_clear(vector_double_array_3 self)"},
	 { "vector_double_array_3_get_allocator", _wrap_vector_double_array_3_get_allocator, METH_O, "vector_double_array_3_get_allocator(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::allocator_type"},
	 { "vector_double_array_3_pop_back", _wrap_vector_double_array_3_pop_back, METH_O, "vector_double_array_3_pop_back(vector_double_array_3 self)"},
	 { "vector_double_array_3_erase", _wrap_vector_double_array_3_erase, METH_VARARGS, "\n"
		"vector_double_array_3_erase(vector_double_array_3 self, std::vector< std::array< double,3 > >::iterator pos) -> std::vector< std::array< double,3 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< double,3 > >::iterator\n"
		"\n"
		"vector_double_array_3_erase(vector_double_array_3 self, std::vector< std::array< double,3 > >::iterator first, std::vector< std::array< double,3 > >::iterator last) -> std::vector< std::array< double,3 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::array< double,3 > >::iterator\n"
		"last: std::vector< std::array< double,3 > >::iterator\n"
		"\n"
		""},
	 { "new_vector_double_array_3", _wrap_new_vector_double_array_3, METH_VARARGS, "\n"
		"vector_double_array_3()\n"
		"vector_double_array_3(vector_double_array_3 other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::array< double,3 > > const &\n"
		"\n"
		"vector_double_array_3(std::vector< std::array< double,3 > >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< double,3 > >::size_type\n"
		"\n"
		"new_vector_double_array_3(std::vector< std::array< double,3 > >::size_type size, array_double_3 value) -> vector_double_array_3\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< double,3 > >::size_type\n"
		"value: std::vector< std::array< double,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_3_push_back", _wrap_vector_double_array_3_push_back, METH_VARARGS, "\n"
		"vector_double_array_3_push_back(vector_double_array_3 self, array_double_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< double,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_3_front", _wrap_vector_double_array_3_front, METH_O, "vector_double_array_3_front(vector_double_array_3 self) -> array_double_3"},
	 { "vector_double_array_3_back", _wrap_vector_double_array_3_back, METH_O, "vector_double_array_3_back(vector_double_array_3 self) -> array_double_3"},
	 { "vector_double_array_3_assign", _wrap_vector_double_array_3_assign, METH_VARARGS, "\n"
		"vector_double_array_3_assign(vector_double_array_3 self, std::vector< std::array< double,3 > >::size_type n, array_double_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< double,3 > >::size_type\n"
		"x: std::vector< std::array< double,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_3_resize", _wrap_vector_double_array_3_resize, METH_VARARGS, "\n"
		"vector_double_array_3_resize(vector_double_array_3 self, std::vector< std::array< double,3 > >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< double,3 > >::size_type\n"
		"\n"
		"vector_double_array_3_resize(vector_double_array_3 self, std::vector< std::array< double,3 > >::size_type new_size, array_double_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< double,3 > >::size_type\n"
		"x: std::vector< std::array< double,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_3_insert", _wrap_vector_double_array_3_insert, METH_VARARGS, "\n"
		"vector_double_array_3_insert(vector_double_array_3 self, std::vector< std::array< double,3 > >::iterator pos, array_double_3 x) -> std::vector< std::array< double,3 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< double,3 > >::iterator\n"
		"x: std::vector< std::array< double,3 > >::value_type const &\n"
		"\n"
		"vector_double_array_3_insert(vector_double_array_3 self, std::vector< std::array< double,3 > >::iterator pos, std::vector< std::array< double,3 > >::size_type n, array_double_3 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< double,3 > >::iterator\n"
		"n: std::vector< std::array< double,3 > >::size_type\n"
		"x: std::vector< std::array< double,3 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_3_reserve", _wrap_vector_double_array_3_reserve, METH_VARARGS, "\n"
		"vector_double_array_3_reserve(vector_double_array_3 self, std::vector< std::array< double,3 > >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< double,3 > >::size_type\n"
		"\n"
		""},
	 { "vector_double_array_3_capacity", _wrap_vector_double_array_3_capacity, METH_O, "vector_double_array_3_capacity(vector_double_array_3 self) -> std::vector< std::array< double,3 > >::size_type"},
	 { "delete_vector_double_array_3", _wrap_delete_vector_double_array_3, METH_O, "delete_vector_double_array_3(vector_double_array_3 self)"},
	 { "vector_double_array_3_swigregister", vector_double_array_3_swigregister, METH_O, NULL},
	 { "vector_double_array_3_swiginit", vector_double_array_3_swiginit, METH_VARARGS, NULL},
	 { "vector_double_array_6_iterator", _wrap_vector_double_array_6_iterator, METH_O, "vector_double_array_6_iterator(vector_double_array_6 self) -> SwigPyIterator"},
	 { "vector_double_array_6___nonzero__", _wrap_vector_double_array_6___nonzero__, METH_O, "vector_double_array_6___nonzero__(vector_double_array_6 self) -> bool"},
	 { "vector_double_array_6___bool__", _wrap_vector_double_array_6___bool__, METH_O, "vector_double_array_6___bool__(vector_double_array_6 self) -> bool"},
	 { "vector_double_array_6___len__", _wrap_vector_double_array_6___len__, METH_O, "vector_double_array_6___len__(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::size_type"},
	 { "vector_double_array_6___getslice__", _wrap_vector_double_array_6___getslice__, METH_VARARGS, "\n"
		"vector_double_array_6___getslice__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i, std::vector< std::array< double,6 > >::difference_type j) -> vector_double_array_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,6 > >::difference_type\n"
		"j: std::vector< std::array< double,6 > >::difference_type\n"
		"\n"
		""},
	 { "vector_double_array_6___setslice__", _wrap_vector_double_array_6___setslice__, METH_VARARGS, "\n"
		"vector_double_array_6___setslice__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i, std::vector< std::array< double,6 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,6 > >::difference_type\n"
		"j: std::vector< std::array< double,6 > >::difference_type\n"
		"\n"
		"vector_double_array_6___setslice__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i, std::vector< std::array< double,6 > >::difference_type j, vector_double_array_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,6 > >::difference_type\n"
		"j: std::vector< std::array< double,6 > >::difference_type\n"
		"v: std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &\n"
		"\n"
		""},
	 { "vector_double_array_6___delslice__", _wrap_vector_double_array_6___delslice__, METH_VARARGS, "\n"
		"vector_double_array_6___delslice__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i, std::vector< std::array< double,6 > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,6 > >::difference_type\n"
		"j: std::vector< std::array< double,6 > >::difference_type\n"
		"\n"
		""},
	 { "vector_double_array_6___delitem__", _wrap_vector_double_array_6___delitem__, METH_VARARGS, "\n"
		"vector_double_array_6___delitem__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,6 > >::difference_type\n"
		"\n"
		"vector_double_array_6___delitem__(vector_double_array_6 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_double_array_6___getitem__", _wrap_vector_double_array_6___getitem__, METH_VARARGS, "\n"
		"vector_double_array_6___getitem__(vector_double_array_6 self, SWIGPY_SLICEOBJECT * slice) -> vector_double_array_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_double_array_6___getitem__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i) -> array_double_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,6 > >::difference_type\n"
		"\n"
		""},
	 { "vector_double_array_6___setitem__", _wrap_vector_double_array_6___setitem__, METH_VARARGS, "\n"
		"vector_double_array_6___setitem__(vector_double_array_6 self, SWIGPY_SLICEOBJECT * slice, vector_double_array_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &\n"
		"\n"
		"vector_double_array_6___setitem__(vector_double_array_6 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_double_array_6___setitem__(vector_double_array_6 self, std::vector< std::array< double,6 > >::difference_type i, array_double_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::array< double,6 > >::difference_type\n"
		"x: std::vector< std::array< double,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_6_pop", _wrap_vector_double_array_6_pop, METH_O, "vector_double_array_6_pop(vector_double_array_6 self) -> array_double_6"},
	 { "vector_double_array_6_append", _wrap_vector_double_array_6_append, METH_VARARGS, "\n"
		"vector_double_array_6_append(vector_double_array_6 self, array_double_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< double,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_6_empty", _wrap_vector_double_array_6_empty, METH_O, "vector_double_array_6_empty(vector_double_array_6 self) -> bool"},
	 { "vector_double_array_6_size", _wrap_vector_double_array_6_size, METH_O, "vector_double_array_6_size(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::size_type"},
	 { "vector_double_array_6_swap", _wrap_vector_double_array_6_swap, METH_VARARGS, "\n"
		"vector_double_array_6_swap(vector_double_array_6 self, vector_double_array_6 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::array< double,6 > > &\n"
		"\n"
		""},
	 { "vector_double_array_6_begin", _wrap_vector_double_array_6_begin, METH_O, "vector_double_array_6_begin(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::iterator"},
	 { "vector_double_array_6_end", _wrap_vector_double_array_6_end, METH_O, "vector_double_array_6_end(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::iterator"},
	 { "vector_double_array_6_rbegin", _wrap_vector_double_array_6_rbegin, METH_O, "vector_double_array_6_rbegin(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::reverse_iterator"},
	 { "vector_double_array_6_rend", _wrap_vector_double_array_6_rend, METH_O, "vector_double_array_6_rend(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::reverse_iterator"},
	 { "vector_double_array_6_clear", _wrap_vector_double_array_6_clear, METH_O, "vector_double_array_6_clear(vector_double_array_6 self)"},
	 { "vector_double_array_6_get_allocator", _wrap_vector_double_array_6_get_allocator, METH_O, "vector_double_array_6_get_allocator(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::allocator_type"},
	 { "vector_double_array_6_pop_back", _wrap_vector_double_array_6_pop_back, METH_O, "vector_double_array_6_pop_back(vector_double_array_6 self)"},
	 { "vector_double_array_6_erase", _wrap_vector_double_array_6_erase, METH_VARARGS, "\n"
		"vector_double_array_6_erase(vector_double_array_6 self, std::vector< std::array< double,6 > >::iterator pos) -> std::vector< std::array< double,6 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< double,6 > >::iterator\n"
		"\n"
		"vector_double_array_6_erase(vector_double_array_6 self, std::vector< std::array< double,6 > >::iterator first, std::vector< std::array< double,6 > >::iterator last) -> std::vector< std::array< double,6 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::array< double,6 > >::iterator\n"
		"last: std::vector< std::array< double,6 > >::iterator\n"
		"\n"
		""},
	 { "new_vector_double_array_6", _wrap_new_vector_double_array_6, METH_VARARGS, "\n"
		"vector_double_array_6()\n"
		"vector_double_array_6(vector_double_array_6 other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::array< double,6 > > const &\n"
		"\n"
		"vector_double_array_6(std::vector< std::array< double,6 > >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< double,6 > >::size_type\n"
		"\n"
		"new_vector_double_array_6(std::vector< std::array< double,6 > >::size_type size, array_double_6 value) -> vector_double_array_6\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::array< double,6 > >::size_type\n"
		"value: std::vector< std::array< double,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_6_push_back", _wrap_vector_double_array_6_push_back, METH_VARARGS, "\n"
		"vector_double_array_6_push_back(vector_double_array_6 self, array_double_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::array< double,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_6_front", _wrap_vector_double_array_6_front, METH_O, "vector_double_array_6_front(vector_double_array_6 self) -> array_double_6"},
	 { "vector_double_array_6_back", _wrap_vector_double_array_6_back, METH_O, "vector_double_array_6_back(vector_double_array_6 self) -> array_double_6"},
	 { "vector_double_array_6_assign", _wrap_vector_double_array_6_assign, METH_VARARGS, "\n"
		"vector_double_array_6_assign(vector_double_array_6 self, std::vector< std::array< double,6 > >::size_type n, array_double_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< double,6 > >::size_type\n"
		"x: std::vector< std::array< double,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_6_resize", _wrap_vector_double_array_6_resize, METH_VARARGS, "\n"
		"vector_double_array_6_resize(vector_double_array_6 self, std::vector< std::array< double,6 > >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< double,6 > >::size_type\n"
		"\n"
		"vector_double_array_6_resize(vector_double_array_6 self, std::vector< std::array< double,6 > >::size_type new_size, array_double_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::array< double,6 > >::size_type\n"
		"x: std::vector< std::array< double,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_6_insert", _wrap_vector_double_array_6_insert, METH_VARARGS, "\n"
		"vector_double_array_6_insert(vector_double_array_6 self, std::vector< std::array< double,6 > >::iterator pos, array_double_6 x) -> std::vector< std::array< double,6 > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< double,6 > >::iterator\n"
		"x: std::vector< std::array< double,6 > >::value_type const &\n"
		"\n"
		"vector_double_array_6_insert(vector_double_array_6 self, std::vector< std::array< double,6 > >::iterator pos, std::vector< std::array< double,6 > >::size_type n, array_double_6 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::array< double,6 > >::iterator\n"
		"n: std::vector< std::array< double,6 > >::size_type\n"
		"x: std::vector< std::array< double,6 > >::value_type const &\n"
		"\n"
		""},
	 { "vector_double_array_6_reserve", _wrap_vector_double_array_6_reserve, METH_VARARGS, "\n"
		"vector_double_array_6_reserve(vector_double_array_6 self, std::vector< std::array< double,6 > >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::array< double,6 > >::size_type\n"
		"\n"
		""},
	 { "vector_double_array_6_capacity", _wrap_vector_double_array_6_capacity, METH_O, "vector_double_array_6_capacity(vector_double_array_6 self) -> std::vector< std::array< double,6 > >::size_type"},
	 { "delete_vector_double_array_6", _wrap_delete_vector_double_array_6, METH_O, "delete_vector_double_array_6(vector_double_array_6 self)"},
	 { "vector_double_array_6_swigregister", vector_double_array_6_swigregister, METH_O, NULL},
	 { "vector_double_array_6_swiginit", vector_double_array_6_swiginit, METH_VARARGS, NULL},
	 { "vector_vector_double_array_2_iterator", _wrap_vector_vector_double_array_2_iterator, METH_O, "vector_vector_double_array_2_iterator(vector_vector_double_array_2 self) -> SwigPyIterator"},
	 { "vector_vector_double_array_2___nonzero__", _wrap_vector_vector_double_array_2___nonzero__, METH_O, "vector_vector_double_array_2___nonzero__(vector_vector_double_array_2 self) -> bool"},
	 { "vector_vector_double_array_2___bool__", _wrap_vector_vector_double_array_2___bool__, METH_O, "vector_vector_double_array_2___bool__(vector_vector_double_array_2 self) -> bool"},
	 { "vector_vector_double_array_2___len__", _wrap_vector_vector_double_array_2___len__, METH_O, "vector_vector_double_array_2___len__(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::size_type"},
	 { "vector_vector_double_array_2___getslice__", _wrap_vector_vector_double_array_2___getslice__, METH_VARARGS, "\n"
		"vector_vector_double_array_2___getslice__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i, std::vector< std::vector< std::array< double,2 > > >::difference_type j) -> vector_vector_double_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"j: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_double_array_2___setslice__", _wrap_vector_vector_double_array_2___setslice__, METH_VARARGS, "\n"
		"vector_vector_double_array_2___setslice__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i, std::vector< std::vector< std::array< double,2 > > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"j: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"\n"
		"vector_vector_double_array_2___setslice__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i, std::vector< std::vector< std::array< double,2 > > >::difference_type j, vector_vector_double_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"j: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"v: std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &\n"
		"\n"
		""},
	 { "vector_vector_double_array_2___delslice__", _wrap_vector_vector_double_array_2___delslice__, METH_VARARGS, "\n"
		"vector_vector_double_array_2___delslice__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i, std::vector< std::vector< std::array< double,2 > > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"j: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_double_array_2___delitem__", _wrap_vector_vector_double_array_2___delitem__, METH_VARARGS, "\n"
		"vector_vector_double_array_2___delitem__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"\n"
		"vector_vector_double_array_2___delitem__(vector_vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_vector_double_array_2___getitem__", _wrap_vector_vector_double_array_2___getitem__, METH_VARARGS, "\n"
		"vector_vector_double_array_2___getitem__(vector_vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice) -> vector_vector_double_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_vector_double_array_2___getitem__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i) -> vector_double_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_double_array_2___setitem__", _wrap_vector_vector_double_array_2___setitem__, METH_VARARGS, "\n"
		"vector_vector_double_array_2___setitem__(vector_vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice, vector_vector_double_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &\n"
		"\n"
		"vector_vector_double_array_2___setitem__(vector_vector_double_array_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_vector_double_array_2___setitem__(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::difference_type i, vector_double_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< double,2 > > >::difference_type\n"
		"x: std::vector< std::vector< std::array< double,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_array_2_pop", _wrap_vector_vector_double_array_2_pop, METH_O, "vector_vector_double_array_2_pop(vector_vector_double_array_2 self) -> vector_double_array_2"},
	 { "vector_vector_double_array_2_append", _wrap_vector_vector_double_array_2_append, METH_VARARGS, "\n"
		"vector_vector_double_array_2_append(vector_vector_double_array_2 self, vector_double_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::vector< std::array< double,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_array_2_empty", _wrap_vector_vector_double_array_2_empty, METH_O, "vector_vector_double_array_2_empty(vector_vector_double_array_2 self) -> bool"},
	 { "vector_vector_double_array_2_size", _wrap_vector_vector_double_array_2_size, METH_O, "vector_vector_double_array_2_size(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::size_type"},
	 { "vector_vector_double_array_2_swap", _wrap_vector_vector_double_array_2_swap, METH_VARARGS, "\n"
		"vector_vector_double_array_2_swap(vector_vector_double_array_2 self, vector_vector_double_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > &\n"
		"\n"
		""},
	 { "vector_vector_double_array_2_begin", _wrap_vector_vector_double_array_2_begin, METH_O, "vector_vector_double_array_2_begin(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::iterator"},
	 { "vector_vector_double_array_2_end", _wrap_vector_vector_double_array_2_end, METH_O, "vector_vector_double_array_2_end(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::iterator"},
	 { "vector_vector_double_array_2_rbegin", _wrap_vector_vector_double_array_2_rbegin, METH_O, "vector_vector_double_array_2_rbegin(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::reverse_iterator"},
	 { "vector_vector_double_array_2_rend", _wrap_vector_vector_double_array_2_rend, METH_O, "vector_vector_double_array_2_rend(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::reverse_iterator"},
	 { "vector_vector_double_array_2_clear", _wrap_vector_vector_double_array_2_clear, METH_O, "vector_vector_double_array_2_clear(vector_vector_double_array_2 self)"},
	 { "vector_vector_double_array_2_get_allocator", _wrap_vector_vector_double_array_2_get_allocator, METH_O, "vector_vector_double_array_2_get_allocator(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::allocator_type"},
	 { "vector_vector_double_array_2_pop_back", _wrap_vector_vector_double_array_2_pop_back, METH_O, "vector_vector_double_array_2_pop_back(vector_vector_double_array_2 self)"},
	 { "vector_vector_double_array_2_erase", _wrap_vector_vector_double_array_2_erase, METH_VARARGS, "\n"
		"vector_vector_double_array_2_erase(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::iterator pos) -> std::vector< std::vector< std::array< double,2 > > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< std::array< double,2 > > >::iterator\n"
		"\n"
		"vector_vector_double_array_2_erase(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::iterator first, std::vector< std::vector< std::array< double,2 > > >::iterator last) -> std::vector< std::vector< std::array< double,2 > > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::vector< std::array< double,2 > > >::iterator\n"
		"last: std::vector< std::vector< std::array< double,2 > > >::iterator\n"
		"\n"
		""},
	 { "new_vector_vector_double_array_2", _wrap_new_vector_vector_double_array_2, METH_VARARGS, "\n"
		"vector_vector_double_array_2()\n"
		"vector_vector_double_array_2(vector_vector_double_array_2 other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > const &\n"
		"\n"
		"vector_vector_double_array_2(std::vector< std::vector< std::array< double,2 > > >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::vector< std::array< double,2 > > >::size_type\n"
		"\n"
		"new_vector_vector_double_array_2(std::vector< std::vector< std::array< double,2 > > >::size_type size, vector_double_array_2 value) -> vector_vector_double_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::vector< std::array< double,2 > > >::size_type\n"
		"value: std::vector< std::vector< std::array< double,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_array_2_push_back", _wrap_vector_vector_double_array_2_push_back, METH_VARARGS, "\n"
		"vector_vector_double_array_2_push_back(vector_vector_double_array_2 self, vector_double_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::vector< std::array< double,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_array_2_front", _wrap_vector_vector_double_array_2_front, METH_O, "vector_vector_double_array_2_front(vector_vector_double_array_2 self) -> vector_double_array_2"},
	 { "vector_vector_double_array_2_back", _wrap_vector_vector_double_array_2_back, METH_O, "vector_vector_double_array_2_back(vector_vector_double_array_2 self) -> vector_double_array_2"},
	 { "vector_vector_double_array_2_assign", _wrap_vector_vector_double_array_2_assign, METH_VARARGS, "\n"
		"vector_vector_double_array_2_assign(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::size_type n, vector_double_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::vector< std::array< double,2 > > >::size_type\n"
		"x: std::vector< std::vector< std::array< double,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_array_2_resize", _wrap_vector_vector_double_array_2_resize, METH_VARARGS, "\n"
		"vector_vector_double_array_2_resize(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::vector< std::array< double,2 > > >::size_type\n"
		"\n"
		"vector_vector_double_array_2_resize(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::size_type new_size, vector_double_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::vector< std::array< double,2 > > >::size_type\n"
		"x: std::vector< std::vector< std::array< double,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_array_2_insert", _wrap_vector_vector_double_array_2_insert, METH_VARARGS, "\n"
		"vector_vector_double_array_2_insert(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::iterator pos, vector_double_array_2 x) -> std::vector< std::vector< std::array< double,2 > > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< std::array< double,2 > > >::iterator\n"
		"x: std::vector< std::vector< std::array< double,2 > > >::value_type const &\n"
		"\n"
		"vector_vector_double_array_2_insert(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::iterator pos, std::vector< std::vector< std::array< double,2 > > >::size_type n, vector_double_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< std::array< double,2 > > >::iterator\n"
		"n: std::vector< std::vector< std::array< double,2 > > >::size_type\n"
		"x: std::vector< std::vector< std::array< double,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_array_2_reserve", _wrap_vector_vector_double_array_2_reserve, METH_VARARGS, "\n"
		"vector_vector_double_array_2_reserve(vector_vector_double_array_2 self, std::vector< std::vector< std::array< double,2 > > >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::vector< std::array< double,2 > > >::size_type\n"
		"\n"
		""},
	 { "vector_vector_double_array_2_capacity", _wrap_vector_vector_double_array_2_capacity, METH_O, "vector_vector_double_array_2_capacity(vector_vector_double_array_2 self) -> std::vector< std::vector< std::array< double,2 > > >::size_type"},
	 { "delete_vector_vector_double_array_2", _wrap_delete_vector_vector_double_array_2, METH_O, "delete_vector_vector_double_array_2(vector_vector_double_array_2 self)"},
	 { "vector_vector_double_array_2_swigregister", vector_vector_double_array_2_swigregister, METH_O, NULL},
	 { "vector_vector_double_array_2_swiginit", vector_vector_double_array_2_swiginit, METH_VARARGS, NULL},
	 { "vector_vector_int_array_2_iterator", _wrap_vector_vector_int_array_2_iterator, METH_O, "vector_vector_int_array_2_iterator(vector_vector_int_array_2 self) -> SwigPyIterator"},
	 { "vector_vector_int_array_2___nonzero__", _wrap_vector_vector_int_array_2___nonzero__, METH_O, "vector_vector_int_array_2___nonzero__(vector_vector_int_array_2 self) -> bool"},
	 { "vector_vector_int_array_2___bool__", _wrap_vector_vector_int_array_2___bool__, METH_O, "vector_vector_int_array_2___bool__(vector_vector_int_array_2 self) -> bool"},
	 { "vector_vector_int_array_2___len__", _wrap_vector_vector_int_array_2___len__, METH_O, "vector_vector_int_array_2___len__(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::size_type"},
	 { "vector_vector_int_array_2___getslice__", _wrap_vector_vector_int_array_2___getslice__, METH_VARARGS, "\n"
		"vector_vector_int_array_2___getslice__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i, std::vector< std::vector< std::array< int,2 > > >::difference_type j) -> vector_vector_int_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"j: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_int_array_2___setslice__", _wrap_vector_vector_int_array_2___setslice__, METH_VARARGS, "\n"
		"vector_vector_int_array_2___setslice__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i, std::vector< std::vector< std::array< int,2 > > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"j: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"\n"
		"vector_vector_int_array_2___setslice__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i, std::vector< std::vector< std::array< int,2 > > >::difference_type j, vector_vector_int_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"j: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"v: std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &\n"
		"\n"
		""},
	 { "vector_vector_int_array_2___delslice__", _wrap_vector_vector_int_array_2___delslice__, METH_VARARGS, "\n"
		"vector_vector_int_array_2___delslice__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i, std::vector< std::vector< std::array< int,2 > > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"j: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_int_array_2___delitem__", _wrap_vector_vector_int_array_2___delitem__, METH_VARARGS, "\n"
		"vector_vector_int_array_2___delitem__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"\n"
		"vector_vector_int_array_2___delitem__(vector_vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_vector_int_array_2___getitem__", _wrap_vector_vector_int_array_2___getitem__, METH_VARARGS, "\n"
		"vector_vector_int_array_2___getitem__(vector_vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice) -> vector_vector_int_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_vector_int_array_2___getitem__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i) -> vector_int_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_int_array_2___setitem__", _wrap_vector_vector_int_array_2___setitem__, METH_VARARGS, "\n"
		"vector_vector_int_array_2___setitem__(vector_vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice, vector_vector_int_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > const &\n"
		"\n"
		"vector_vector_int_array_2___setitem__(vector_vector_int_array_2 self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_vector_int_array_2___setitem__(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::difference_type i, vector_int_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< std::array< int,2 > > >::difference_type\n"
		"x: std::vector< std::vector< std::array< int,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_array_2_pop", _wrap_vector_vector_int_array_2_pop, METH_O, "vector_vector_int_array_2_pop(vector_vector_int_array_2 self) -> vector_int_array_2"},
	 { "vector_vector_int_array_2_append", _wrap_vector_vector_int_array_2_append, METH_VARARGS, "\n"
		"vector_vector_int_array_2_append(vector_vector_int_array_2 self, vector_int_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::vector< std::array< int,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_array_2_empty", _wrap_vector_vector_int_array_2_empty, METH_O, "vector_vector_int_array_2_empty(vector_vector_int_array_2 self) -> bool"},
	 { "vector_vector_int_array_2_size", _wrap_vector_vector_int_array_2_size, METH_O, "vector_vector_int_array_2_size(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::size_type"},
	 { "vector_vector_int_array_2_swap", _wrap_vector_vector_int_array_2_swap, METH_VARARGS, "\n"
		"vector_vector_int_array_2_swap(vector_vector_int_array_2 self, vector_vector_int_array_2 v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > &\n"
		"\n"
		""},
	 { "vector_vector_int_array_2_begin", _wrap_vector_vector_int_array_2_begin, METH_O, "vector_vector_int_array_2_begin(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::iterator"},
	 { "vector_vector_int_array_2_end", _wrap_vector_vector_int_array_2_end, METH_O, "vector_vector_int_array_2_end(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::iterator"},
	 { "vector_vector_int_array_2_rbegin", _wrap_vector_vector_int_array_2_rbegin, METH_O, "vector_vector_int_array_2_rbegin(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::reverse_iterator"},
	 { "vector_vector_int_array_2_rend", _wrap_vector_vector_int_array_2_rend, METH_O, "vector_vector_int_array_2_rend(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::reverse_iterator"},
	 { "vector_vector_int_array_2_clear", _wrap_vector_vector_int_array_2_clear, METH_O, "vector_vector_int_array_2_clear(vector_vector_int_array_2 self)"},
	 { "vector_vector_int_array_2_get_allocator", _wrap_vector_vector_int_array_2_get_allocator, METH_O, "vector_vector_int_array_2_get_allocator(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::allocator_type"},
	 { "vector_vector_int_array_2_pop_back", _wrap_vector_vector_int_array_2_pop_back, METH_O, "vector_vector_int_array_2_pop_back(vector_vector_int_array_2 self)"},
	 { "vector_vector_int_array_2_erase", _wrap_vector_vector_int_array_2_erase, METH_VARARGS, "\n"
		"vector_vector_int_array_2_erase(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::iterator pos) -> std::vector< std::vector< std::array< int,2 > > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< std::array< int,2 > > >::iterator\n"
		"\n"
		"vector_vector_int_array_2_erase(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::iterator first, std::vector< std::vector< std::array< int,2 > > >::iterator last) -> std::vector< std::vector< std::array< int,2 > > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::vector< std::array< int,2 > > >::iterator\n"
		"last: std::vector< std::vector< std::array< int,2 > > >::iterator\n"
		"\n"
		""},
	 { "new_vector_vector_int_array_2", _wrap_new_vector_vector_int_array_2, METH_VARARGS, "\n"
		"vector_vector_int_array_2()\n"
		"vector_vector_int_array_2(vector_vector_int_array_2 other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > const &\n"
		"\n"
		"vector_vector_int_array_2(std::vector< std::vector< std::array< int,2 > > >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::vector< std::array< int,2 > > >::size_type\n"
		"\n"
		"new_vector_vector_int_array_2(std::vector< std::vector< std::array< int,2 > > >::size_type size, vector_int_array_2 value) -> vector_vector_int_array_2\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::vector< std::array< int,2 > > >::size_type\n"
		"value: std::vector< std::vector< std::array< int,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_array_2_push_back", _wrap_vector_vector_int_array_2_push_back, METH_VARARGS, "\n"
		"vector_vector_int_array_2_push_back(vector_vector_int_array_2 self, vector_int_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::vector< std::array< int,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_array_2_front", _wrap_vector_vector_int_array_2_front, METH_O, "vector_vector_int_array_2_front(vector_vector_int_array_2 self) -> vector_int_array_2"},
	 { "vector_vector_int_array_2_back", _wrap_vector_vector_int_array_2_back, METH_O, "vector_vector_int_array_2_back(vector_vector_int_array_2 self) -> vector_int_array_2"},
	 { "vector_vector_int_array_2_assign", _wrap_vector_vector_int_array_2_assign, METH_VARARGS, "\n"
		"vector_vector_int_array_2_assign(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::size_type n, vector_int_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::vector< std::array< int,2 > > >::size_type\n"
		"x: std::vector< std::vector< std::array< int,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_array_2_resize", _wrap_vector_vector_int_array_2_resize, METH_VARARGS, "\n"
		"vector_vector_int_array_2_resize(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::vector< std::array< int,2 > > >::size_type\n"
		"\n"
		"vector_vector_int_array_2_resize(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::size_type new_size, vector_int_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::vector< std::array< int,2 > > >::size_type\n"
		"x: std::vector< std::vector< std::array< int,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_array_2_insert", _wrap_vector_vector_int_array_2_insert, METH_VARARGS, "\n"
		"vector_vector_int_array_2_insert(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::iterator pos, vector_int_array_2 x) -> std::vector< std::vector< std::array< int,2 > > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< std::array< int,2 > > >::iterator\n"
		"x: std::vector< std::vector< std::array< int,2 > > >::value_type const &\n"
		"\n"
		"vector_vector_int_array_2_insert(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::iterator pos, std::vector< std::vector< std::array< int,2 > > >::size_type n, vector_int_array_2 x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< std::array< int,2 > > >::iterator\n"
		"n: std::vector< std::vector< std::array< int,2 > > >::size_type\n"
		"x: std::vector< std::vector< std::array< int,2 > > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_array_2_reserve", _wrap_vector_vector_int_array_2_reserve, METH_VARARGS, "\n"
		"vector_vector_int_array_2_reserve(vector_vector_int_array_2 self, std::vector< std::vector< std::array< int,2 > > >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::vector< std::array< int,2 > > >::size_type\n"
		"\n"
		""},
	 { "vector_vector_int_array_2_capacity", _wrap_vector_vector_int_array_2_capacity, METH_O, "vector_vector_int_array_2_capacity(vector_vector_int_array_2 self) -> std::vector< std::vector< std::array< int,2 > > >::size_type"},
	 { "delete_vector_vector_int_array_2", _wrap_delete_vector_vector_int_array_2, METH_O, "delete_vector_vector_int_array_2(vector_vector_int_array_2 self)"},
	 { "vector_vector_int_array_2_swigregister", vector_vector_int_array_2_swigregister, METH_O, NULL},
	 { "vector_vector_int_array_2_swiginit", vector_vector_int_array_2_swiginit, METH_VARARGS, NULL},
	 { "vector_vector_int_iterator", _wrap_vector_vector_int_iterator, METH_O, "vector_vector_int_iterator(vector_vector_int self) -> SwigPyIterator"},
	 { "vector_vector_int___nonzero__", _wrap_vector_vector_int___nonzero__, METH_O, "vector_vector_int___nonzero__(vector_vector_int self) -> bool"},
	 { "vector_vector_int___bool__", _wrap_vector_vector_int___bool__, METH_O, "vector_vector_int___bool__(vector_vector_int self) -> bool"},
	 { "vector_vector_int___len__", _wrap_vector_vector_int___len__, METH_O, "vector_vector_int___len__(vector_vector_int self) -> std::vector< std::vector< int > >::size_type"},
	 { "vector_vector_int___getslice__", _wrap_vector_vector_int___getslice__, METH_VARARGS, "\n"
		"vector_vector_int___getslice__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j) -> vector_vector_int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< int > >::difference_type\n"
		"j: std::vector< std::vector< int > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_int___setslice__", _wrap_vector_vector_int___setslice__, METH_VARARGS, "\n"
		"vector_vector_int___setslice__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< int > >::difference_type\n"
		"j: std::vector< std::vector< int > >::difference_type\n"
		"\n"
		"vector_vector_int___setslice__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j, vector_vector_int v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< int > >::difference_type\n"
		"j: std::vector< std::vector< int > >::difference_type\n"
		"v: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &\n"
		"\n"
		""},
	 { "vector_vector_int___delslice__", _wrap_vector_vector_int___delslice__, METH_VARARGS, "\n"
		"vector_vector_int___delslice__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i, std::vector< std::vector< int > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< int > >::difference_type\n"
		"j: std::vector< std::vector< int > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_int___delitem__", _wrap_vector_vector_int___delitem__, METH_VARARGS, "\n"
		"vector_vector_int___delitem__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< int > >::difference_type\n"
		"\n"
		"vector_vector_int___delitem__(vector_vector_int self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_vector_int___getitem__", _wrap_vector_vector_int___getitem__, METH_VARARGS, "\n"
		"vector_vector_int___getitem__(vector_vector_int self, SWIGPY_SLICEOBJECT * slice) -> vector_vector_int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_vector_int___getitem__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i) -> vector_int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< int > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_int___setitem__", _wrap_vector_vector_int___setitem__, METH_VARARGS, "\n"
		"vector_vector_int___setitem__(vector_vector_int self, SWIGPY_SLICEOBJECT * slice, vector_vector_int v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &\n"
		"\n"
		"vector_vector_int___setitem__(vector_vector_int self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_vector_int___setitem__(vector_vector_int self, std::vector< std::vector< int > >::difference_type i, vector_int x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< int > >::difference_type\n"
		"x: std::vector< std::vector< int > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_pop", _wrap_vector_vector_int_pop, METH_O, "vector_vector_int_pop(vector_vector_int self) -> vector_int"},
	 { "vector_vector_int_append", _wrap_vector_vector_int_append, METH_VARARGS, "\n"
		"vector_vector_int_append(vector_vector_int self, vector_int x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::vector< int > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_empty", _wrap_vector_vector_int_empty, METH_O, "vector_vector_int_empty(vector_vector_int self) -> bool"},
	 { "vector_vector_int_size", _wrap_vector_vector_int_size, METH_O, "vector_vector_int_size(vector_vector_int self) -> std::vector< std::vector< int > >::size_type"},
	 { "vector_vector_int_swap", _wrap_vector_vector_int_swap, METH_VARARGS, "\n"
		"vector_vector_int_swap(vector_vector_int self, vector_vector_int v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::vector< int,std::allocator< int > > > &\n"
		"\n"
		""},
	 { "vector_vector_int_begin", _wrap_vector_vector_int_begin, METH_O, "vector_vector_int_begin(vector_vector_int self) -> std::vector< std::vector< int > >::iterator"},
	 { "vector_vector_int_end", _wrap_vector_vector_int_end, METH_O, "vector_vector_int_end(vector_vector_int self) -> std::vector< std::vector< int > >::iterator"},
	 { "vector_vector_int_rbegin", _wrap_vector_vector_int_rbegin, METH_O, "vector_vector_int_rbegin(vector_vector_int self) -> std::vector< std::vector< int > >::reverse_iterator"},
	 { "vector_vector_int_rend", _wrap_vector_vector_int_rend, METH_O, "vector_vector_int_rend(vector_vector_int self) -> std::vector< std::vector< int > >::reverse_iterator"},
	 { "vector_vector_int_clear", _wrap_vector_vector_int_clear, METH_O, "vector_vector_int_clear(vector_vector_int self)"},
	 { "vector_vector_int_get_allocator", _wrap_vector_vector_int_get_allocator, METH_O, "vector_vector_int_get_allocator(vector_vector_int self) -> std::vector< std::vector< int > >::allocator_type"},
	 { "vector_vector_int_pop_back", _wrap_vector_vector_int_pop_back, METH_O, "vector_vector_int_pop_back(vector_vector_int self)"},
	 { "vector_vector_int_erase", _wrap_vector_vector_int_erase, METH_VARARGS, "\n"
		"vector_vector_int_erase(vector_vector_int self, std::vector< std::vector< int > >::iterator pos) -> std::vector< std::vector< int > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< int > >::iterator\n"
		"\n"
		"vector_vector_int_erase(vector_vector_int self, std::vector< std::vector< int > >::iterator first, std::vector< std::vector< int > >::iterator last) -> std::vector< std::vector< int > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::vector< int > >::iterator\n"
		"last: std::vector< std::vector< int > >::iterator\n"
		"\n"
		""},
	 { "new_vector_vector_int", _wrap_new_vector_vector_int, METH_VARARGS, "\n"
		"vector_vector_int()\n"
		"vector_vector_int(vector_vector_int other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::vector< int,std::allocator< int > > > const &\n"
		"\n"
		"vector_vector_int(std::vector< std::vector< int > >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::vector< int > >::size_type\n"
		"\n"
		"new_vector_vector_int(std::vector< std::vector< int > >::size_type size, vector_int value) -> vector_vector_int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::vector< int > >::size_type\n"
		"value: std::vector< std::vector< int > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_push_back", _wrap_vector_vector_int_push_back, METH_VARARGS, "\n"
		"vector_vector_int_push_back(vector_vector_int self, vector_int x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::vector< int > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_front", _wrap_vector_vector_int_front, METH_O, "vector_vector_int_front(vector_vector_int self) -> vector_int"},
	 { "vector_vector_int_back", _wrap_vector_vector_int_back, METH_O, "vector_vector_int_back(vector_vector_int self) -> vector_int"},
	 { "vector_vector_int_assign", _wrap_vector_vector_int_assign, METH_VARARGS, "\n"
		"vector_vector_int_assign(vector_vector_int self, std::vector< std::vector< int > >::size_type n, vector_int x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::vector< int > >::size_type\n"
		"x: std::vector< std::vector< int > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_resize", _wrap_vector_vector_int_resize, METH_VARARGS, "\n"
		"vector_vector_int_resize(vector_vector_int self, std::vector< std::vector< int > >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::vector< int > >::size_type\n"
		"\n"
		"vector_vector_int_resize(vector_vector_int self, std::vector< std::vector< int > >::size_type new_size, vector_int x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::vector< int > >::size_type\n"
		"x: std::vector< std::vector< int > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_insert", _wrap_vector_vector_int_insert, METH_VARARGS, "\n"
		"vector_vector_int_insert(vector_vector_int self, std::vector< std::vector< int > >::iterator pos, vector_int x) -> std::vector< std::vector< int > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< int > >::iterator\n"
		"x: std::vector< std::vector< int > >::value_type const &\n"
		"\n"
		"vector_vector_int_insert(vector_vector_int self, std::vector< std::vector< int > >::iterator pos, std::vector< std::vector< int > >::size_type n, vector_int x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< int > >::iterator\n"
		"n: std::vector< std::vector< int > >::size_type\n"
		"x: std::vector< std::vector< int > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_int_reserve", _wrap_vector_vector_int_reserve, METH_VARARGS, "\n"
		"vector_vector_int_reserve(vector_vector_int self, std::vector< std::vector< int > >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::vector< int > >::size_type\n"
		"\n"
		""},
	 { "vector_vector_int_capacity", _wrap_vector_vector_int_capacity, METH_O, "vector_vector_int_capacity(vector_vector_int self) -> std::vector< std::vector< int > >::size_type"},
	 { "delete_vector_vector_int", _wrap_delete_vector_vector_int, METH_O, "delete_vector_vector_int(vector_vector_int self)"},
	 { "vector_vector_int_swigregister", vector_vector_int_swigregister, METH_O, NULL},
	 { "vector_vector_int_swiginit", vector_vector_int_swiginit, METH_VARARGS, NULL},
	 { "vector_vector_double_iterator", _wrap_vector_vector_double_iterator, METH_O, "vector_vector_double_iterator(vector_vector_double self) -> SwigPyIterator"},
	 { "vector_vector_double___nonzero__", _wrap_vector_vector_double___nonzero__, METH_O, "vector_vector_double___nonzero__(vector_vector_double self) -> bool"},
	 { "vector_vector_double___bool__", _wrap_vector_vector_double___bool__, METH_O, "vector_vector_double___bool__(vector_vector_double self) -> bool"},
	 { "vector_vector_double___len__", _wrap_vector_vector_double___len__, METH_O, "vector_vector_double___len__(vector_vector_double self) -> std::vector< std::vector< double > >::size_type"},
	 { "vector_vector_double___getslice__", _wrap_vector_vector_double___getslice__, METH_VARARGS, "\n"
		"vector_vector_double___getslice__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j) -> vector_vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< double > >::difference_type\n"
		"j: std::vector< std::vector< double > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_double___setslice__", _wrap_vector_vector_double___setslice__, METH_VARARGS, "\n"
		"vector_vector_double___setslice__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< double > >::difference_type\n"
		"j: std::vector< std::vector< double > >::difference_type\n"
		"\n"
		"vector_vector_double___setslice__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j, vector_vector_double v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< double > >::difference_type\n"
		"j: std::vector< std::vector< double > >::difference_type\n"
		"v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &\n"
		"\n"
		""},
	 { "vector_vector_double___delslice__", _wrap_vector_vector_double___delslice__, METH_VARARGS, "\n"
		"vector_vector_double___delslice__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::difference_type j)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< double > >::difference_type\n"
		"j: std::vector< std::vector< double > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_double___delitem__", _wrap_vector_vector_double___delitem__, METH_VARARGS, "\n"
		"vector_vector_double___delitem__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< double > >::difference_type\n"
		"\n"
		"vector_vector_double___delitem__(vector_vector_double self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		""},
	 { "vector_vector_double___getitem__", _wrap_vector_vector_double___getitem__, METH_VARARGS, "\n"
		"vector_vector_double___getitem__(vector_vector_double self, SWIGPY_SLICEOBJECT * slice) -> vector_vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_vector_double___getitem__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i) -> std::vector< std::vector< double > >::value_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< double > >::difference_type\n"
		"\n"
		""},
	 { "vector_vector_double___setitem__", _wrap_vector_vector_double___setitem__, METH_VARARGS, "\n"
		"vector_vector_double___setitem__(vector_vector_double self, SWIGPY_SLICEOBJECT * slice, vector_vector_double v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"v: std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &\n"
		"\n"
		"vector_vector_double___setitem__(vector_vector_double self, SWIGPY_SLICEOBJECT * slice)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"slice: SWIGPY_SLICEOBJECT *\n"
		"\n"
		"vector_vector_double___setitem__(vector_vector_double self, std::vector< std::vector< double > >::difference_type i, std::vector< std::vector< double > >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i: std::vector< std::vector< double > >::difference_type\n"
		"x: std::vector< std::vector< double > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_pop", _wrap_vector_vector_double_pop, METH_O, "vector_vector_double_pop(vector_vector_double self) -> std::vector< std::vector< double > >::value_type"},
	 { "vector_vector_double_append", _wrap_vector_vector_double_append, METH_VARARGS, "\n"
		"vector_vector_double_append(vector_vector_double self, std::vector< std::vector< double > >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::vector< double > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_empty", _wrap_vector_vector_double_empty, METH_O, "vector_vector_double_empty(vector_vector_double self) -> bool"},
	 { "vector_vector_double_size", _wrap_vector_vector_double_size, METH_O, "vector_vector_double_size(vector_vector_double self) -> std::vector< std::vector< double > >::size_type"},
	 { "vector_vector_double_swap", _wrap_vector_vector_double_swap, METH_VARARGS, "\n"
		"vector_vector_double_swap(vector_vector_double self, vector_vector_double v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::vector< std::vector< double,std::allocator< double > > > &\n"
		"\n"
		""},
	 { "vector_vector_double_begin", _wrap_vector_vector_double_begin, METH_O, "vector_vector_double_begin(vector_vector_double self) -> std::vector< std::vector< double > >::iterator"},
	 { "vector_vector_double_end", _wrap_vector_vector_double_end, METH_O, "vector_vector_double_end(vector_vector_double self) -> std::vector< std::vector< double > >::iterator"},
	 { "vector_vector_double_rbegin", _wrap_vector_vector_double_rbegin, METH_O, "vector_vector_double_rbegin(vector_vector_double self) -> std::vector< std::vector< double > >::reverse_iterator"},
	 { "vector_vector_double_rend", _wrap_vector_vector_double_rend, METH_O, "vector_vector_double_rend(vector_vector_double self) -> std::vector< std::vector< double > >::reverse_iterator"},
	 { "vector_vector_double_clear", _wrap_vector_vector_double_clear, METH_O, "vector_vector_double_clear(vector_vector_double self)"},
	 { "vector_vector_double_get_allocator", _wrap_vector_vector_double_get_allocator, METH_O, "vector_vector_double_get_allocator(vector_vector_double self) -> std::vector< std::vector< double > >::allocator_type"},
	 { "vector_vector_double_pop_back", _wrap_vector_vector_double_pop_back, METH_O, "vector_vector_double_pop_back(vector_vector_double self)"},
	 { "vector_vector_double_erase", _wrap_vector_vector_double_erase, METH_VARARGS, "\n"
		"vector_vector_double_erase(vector_vector_double self, std::vector< std::vector< double > >::iterator pos) -> std::vector< std::vector< double > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< double > >::iterator\n"
		"\n"
		"vector_vector_double_erase(vector_vector_double self, std::vector< std::vector< double > >::iterator first, std::vector< std::vector< double > >::iterator last) -> std::vector< std::vector< double > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::vector< std::vector< double > >::iterator\n"
		"last: std::vector< std::vector< double > >::iterator\n"
		"\n"
		""},
	 { "new_vector_vector_double", _wrap_new_vector_vector_double, METH_VARARGS, "\n"
		"vector_vector_double()\n"
		"vector_vector_double(vector_vector_double other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::vector< std::vector< double,std::allocator< double > > > const &\n"
		"\n"
		"vector_vector_double(std::vector< std::vector< double > >::size_type size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::vector< double > >::size_type\n"
		"\n"
		"new_vector_vector_double(std::vector< std::vector< double > >::size_type size, std::vector< std::vector< double > >::value_type const & value) -> vector_vector_double\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: std::vector< std::vector< double > >::size_type\n"
		"value: std::vector< std::vector< double > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_push_back", _wrap_vector_vector_double_push_back, METH_VARARGS, "\n"
		"vector_vector_double_push_back(vector_vector_double self, std::vector< std::vector< double > >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::vector< std::vector< double > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_front", _wrap_vector_vector_double_front, METH_O, "vector_vector_double_front(vector_vector_double self) -> std::vector< std::vector< double > >::value_type const &"},
	 { "vector_vector_double_back", _wrap_vector_vector_double_back, METH_O, "vector_vector_double_back(vector_vector_double self) -> std::vector< std::vector< double > >::value_type const &"},
	 { "vector_vector_double_assign", _wrap_vector_vector_double_assign, METH_VARARGS, "\n"
		"vector_vector_double_assign(vector_vector_double self, std::vector< std::vector< double > >::size_type n, std::vector< std::vector< double > >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::vector< double > >::size_type\n"
		"x: std::vector< std::vector< double > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_resize", _wrap_vector_vector_double_resize, METH_VARARGS, "\n"
		"vector_vector_double_resize(vector_vector_double self, std::vector< std::vector< double > >::size_type new_size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::vector< double > >::size_type\n"
		"\n"
		"vector_vector_double_resize(vector_vector_double self, std::vector< std::vector< double > >::size_type new_size, std::vector< std::vector< double > >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"new_size: std::vector< std::vector< double > >::size_type\n"
		"x: std::vector< std::vector< double > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_insert", _wrap_vector_vector_double_insert, METH_VARARGS, "\n"
		"vector_vector_double_insert(vector_vector_double self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::value_type const & x) -> std::vector< std::vector< double > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< double > >::iterator\n"
		"x: std::vector< std::vector< double > >::value_type const &\n"
		"\n"
		"vector_vector_double_insert(vector_vector_double self, std::vector< std::vector< double > >::iterator pos, std::vector< std::vector< double > >::size_type n, std::vector< std::vector< double > >::value_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pos: std::vector< std::vector< double > >::iterator\n"
		"n: std::vector< std::vector< double > >::size_type\n"
		"x: std::vector< std::vector< double > >::value_type const &\n"
		"\n"
		""},
	 { "vector_vector_double_reserve", _wrap_vector_vector_double_reserve, METH_VARARGS, "\n"
		"vector_vector_double_reserve(vector_vector_double self, std::vector< std::vector< double > >::size_type n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::vector< std::vector< double > >::size_type\n"
		"\n"
		""},
	 { "vector_vector_double_capacity", _wrap_vector_vector_double_capacity, METH_O, "vector_vector_double_capacity(vector_vector_double self) -> std::vector< std::vector< double > >::size_type"},
	 { "delete_vector_vector_double", _wrap_delete_vector_vector_double, METH_O, "delete_vector_vector_double(vector_vector_double self)"},
	 { "vector_vector_double_swigregister", vector_vector_double_swigregister, METH_O, NULL},
	 { "vector_vector_double_swiginit", vector_vector_double_swiginit, METH_VARARGS, NULL},
	 { "map_string_bool_iterator", _wrap_map_string_bool_iterator, METH_O, "map_string_bool_iterator(map_string_bool self) -> SwigPyIterator"},
	 { "map_string_bool___nonzero__", _wrap_map_string_bool___nonzero__, METH_O, "map_string_bool___nonzero__(map_string_bool self) -> bool"},
	 { "map_string_bool___bool__", _wrap_map_string_bool___bool__, METH_O, "map_string_bool___bool__(map_string_bool self) -> bool"},
	 { "map_string_bool___len__", _wrap_map_string_bool___len__, METH_O, "map_string_bool___len__(map_string_bool self) -> std::map< std::string,bool >::size_type"},
	 { "map_string_bool___getitem__", _wrap_map_string_bool___getitem__, METH_VARARGS, "\n"
		"map_string_bool___getitem__(map_string_bool self, std::map< std::string,bool >::key_type const & key) -> std::map< std::string,bool >::mapped_type const &\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< std::string,bool >::key_type const &\n"
		"\n"
		""},
	 { "map_string_bool___delitem__", _wrap_map_string_bool___delitem__, METH_VARARGS, "\n"
		"map_string_bool___delitem__(map_string_bool self, std::map< std::string,bool >::key_type const & key)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< std::string,bool >::key_type const &\n"
		"\n"
		""},
	 { "map_string_bool_has_key", _wrap_map_string_bool_has_key, METH_VARARGS, "\n"
		"map_string_bool_has_key(map_string_bool self, std::map< std::string,bool >::key_type const & key) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< std::string,bool >::key_type const &\n"
		"\n"
		""},
	 { "map_string_bool_keys", _wrap_map_string_bool_keys, METH_O, "map_string_bool_keys(map_string_bool self) -> PyObject *"},
	 { "map_string_bool_values", _wrap_map_string_bool_values, METH_O, "map_string_bool_values(map_string_bool self) -> PyObject *"},
	 { "map_string_bool_items", _wrap_map_string_bool_items, METH_O, "map_string_bool_items(map_string_bool self) -> PyObject *"},
	 { "map_string_bool___contains__", _wrap_map_string_bool___contains__, METH_VARARGS, "\n"
		"map_string_bool___contains__(map_string_bool self, std::map< std::string,bool >::key_type const & key) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< std::string,bool >::key_type const &\n"
		"\n"
		""},
	 { "map_string_bool_key_iterator", _wrap_map_string_bool_key_iterator, METH_O, "map_string_bool_key_iterator(map_string_bool self) -> SwigPyIterator"},
	 { "map_string_bool_value_iterator", _wrap_map_string_bool_value_iterator, METH_O, "map_string_bool_value_iterator(map_string_bool self) -> SwigPyIterator"},
	 { "map_string_bool___setitem__", _wrap_map_string_bool___setitem__, METH_VARARGS, "\n"
		"map_string_bool___setitem__(map_string_bool self, std::map< std::string,bool >::key_type const & key)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< std::string,bool >::key_type const &\n"
		"\n"
		"map_string_bool___setitem__(map_string_bool self, std::map< std::string,bool >::key_type const & key, std::map< std::string,bool >::mapped_type const & x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< std::string,bool >::key_type const &\n"
		"x: std::map< std::string,bool >::mapped_type const &\n"
		"\n"
		""},
	 { "map_string_bool_asdict", _wrap_map_string_bool_asdict, METH_O, "map_string_bool_asdict(map_string_bool self) -> PyObject *"},
	 { "new_map_string_bool", _wrap_new_map_string_bool, METH_VARARGS, "\n"
		"map_string_bool(std::less< std::string > const & other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::less< std::string > const &\n"
		"\n"
		"map_string_bool()\n"
		"new_map_string_bool(map_string_bool other) -> map_string_bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::map< std::string,bool > const &\n"
		"\n"
		""},
	 { "map_string_bool_empty", _wrap_map_string_bool_empty, METH_O, "map_string_bool_empty(map_string_bool self) -> bool"},
	 { "map_string_bool_size", _wrap_map_string_bool_size, METH_O, "map_string_bool_size(map_string_bool self) -> std::map< std::string,bool >::size_type"},
	 { "map_string_bool_swap", _wrap_map_string_bool_swap, METH_VARARGS, "\n"
		"map_string_bool_swap(map_string_bool self, map_string_bool v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::map< std::string,bool > &\n"
		"\n"
		""},
	 { "map_string_bool_begin", _wrap_map_string_bool_begin, METH_O, "map_string_bool_begin(map_string_bool self) -> std::map< std::string,bool >::iterator"},
	 { "map_string_bool_end", _wrap_map_string_bool_end, METH_O, "map_string_bool_end(map_string_bool self) -> std::map< std::string,bool >::iterator"},
	 { "map_string_bool_rbegin", _wrap_map_string_bool_rbegin, METH_O, "map_string_bool_rbegin(map_string_bool self) -> std::map< std::string,bool >::reverse_iterator"},
	 { "map_string_bool_rend", _wrap_map_string_bool_rend, METH_O, "map_string_bool_rend(map_string_bool self) -> std::map< std::string,bool >::reverse_iterator"},
	 { "map_string_bool_clear", _wrap_map_string_bool_clear, METH_O, "map_string_bool_clear(map_string_bool self)"},
	 { "map_string_bool_get_allocator", _wrap_map_string_bool_get_allocator, METH_O, "map_string_bool_get_allocator(map_string_bool self) -> std::map< std::string,bool >::allocator_type"},
	 { "map_string_bool_count", _wrap_map_string_bool_count, METH_VARARGS, "\n"
		"map_string_bool_count(map_string_bool self, std::map< std::string,bool >::key_type const & x) -> std::map< std::string,bool >::size_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::map< std::string,bool >::key_type const &\n"
		"\n"
		""},
	 { "map_string_bool_erase", _wrap_map_string_bool_erase, METH_VARARGS, "\n"
		"map_string_bool_erase(map_string_bool self, std::map< std::string,bool >::key_type const & x) -> std::map< std::string,bool >::size_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::map< std::string,bool >::key_type const &\n"
		"\n"
		"map_string_bool_erase(map_string_bool self, std::map< std::string,bool >::iterator position)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"position: std::map< std::string,bool >::iterator\n"
		"\n"
		"map_string_bool_erase(map_string_bool self, std::map< std::string,bool >::iterator first, std::map< std::string,bool >::iterator last)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::map< std::string,bool >::iterator\n"
		"last: std::map< std::string,bool >::iterator\n"
		"\n"
		""},
	 { "map_string_bool_find", _wrap_map_string_bool_find, METH_VARARGS, "\n"
		"map_string_bool_find(map_string_bool self, std::map< std::string,bool >::key_type const & x) -> std::map< std::string,bool >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::map< std::string,bool >::key_type const &\n"
		"\n"
		""},
	 { "map_string_bool_lower_bound", _wrap_map_string_bool_lower_bound, METH_VARARGS, "\n"
		"map_string_bool_lower_bound(map_string_bool self, std::map< std::string,bool >::key_type const & x) -> std::map< std::string,bool >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::map< std::string,bool >::key_type const &\n"
		"\n"
		""},
	 { "map_string_bool_upper_bound", _wrap_map_string_bool_upper_bound, METH_VARARGS, "\n"
		"map_string_bool_upper_bound(map_string_bool self, std::map< std::string,bool >::key_type const & x) -> std::map< std::string,bool >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::map< std::string,bool >::key_type const &\n"
		"\n"
		""},
	 { "delete_map_string_bool", _wrap_delete_map_string_bool, METH_O, "delete_map_string_bool(map_string_bool self)"},
	 { "map_string_bool_swigregister", map_string_bool_swigregister, METH_O, NULL},
	 { "map_string_bool_swiginit", map_string_bool_swiginit, METH_VARARGS, NULL},
	 { "map_int_vector_string_iterator", _wrap_map_int_vector_string_iterator, METH_O, "map_int_vector_string_iterator(map_int_vector_string self) -> SwigPyIterator"},
	 { "map_int_vector_string___nonzero__", _wrap_map_int_vector_string___nonzero__, METH_O, "map_int_vector_string___nonzero__(map_int_vector_string self) -> bool"},
	 { "map_int_vector_string___bool__", _wrap_map_int_vector_string___bool__, METH_O, "map_int_vector_string___bool__(map_int_vector_string self) -> bool"},
	 { "map_int_vector_string___len__", _wrap_map_int_vector_string___len__, METH_O, "map_int_vector_string___len__(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::size_type"},
	 { "map_int_vector_string___getitem__", _wrap_map_int_vector_string___getitem__, METH_VARARGS, "\n"
		"map_int_vector_string___getitem__(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key) -> vector_string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< int,std::vector< std::string > >::key_type const &\n"
		"\n"
		""},
	 { "map_int_vector_string___delitem__", _wrap_map_int_vector_string___delitem__, METH_VARARGS, "\n"
		"map_int_vector_string___delitem__(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< int,std::vector< std::string > >::key_type const &\n"
		"\n"
		""},
	 { "map_int_vector_string_has_key", _wrap_map_int_vector_string_has_key, METH_VARARGS, "\n"
		"map_int_vector_string_has_key(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< int,std::vector< std::string > >::key_type const &\n"
		"\n"
		""},
	 { "map_int_vector_string_keys", _wrap_map_int_vector_string_keys, METH_O, "map_int_vector_string_keys(map_int_vector_string self) -> PyObject *"},
	 { "map_int_vector_string_values", _wrap_map_int_vector_string_values, METH_O, "map_int_vector_string_values(map_int_vector_string self) -> PyObject *"},
	 { "map_int_vector_string_items", _wrap_map_int_vector_string_items, METH_O, "map_int_vector_string_items(map_int_vector_string self) -> PyObject *"},
	 { "map_int_vector_string___contains__", _wrap_map_int_vector_string___contains__, METH_VARARGS, "\n"
		"map_int_vector_string___contains__(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< int,std::vector< std::string > >::key_type const &\n"
		"\n"
		""},
	 { "map_int_vector_string_key_iterator", _wrap_map_int_vector_string_key_iterator, METH_O, "map_int_vector_string_key_iterator(map_int_vector_string self) -> SwigPyIterator"},
	 { "map_int_vector_string_value_iterator", _wrap_map_int_vector_string_value_iterator, METH_O, "map_int_vector_string_value_iterator(map_int_vector_string self) -> SwigPyIterator"},
	 { "map_int_vector_string___setitem__", _wrap_map_int_vector_string___setitem__, METH_VARARGS, "\n"
		"map_int_vector_string___setitem__(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< int,std::vector< std::string > >::key_type const &\n"
		"\n"
		"map_int_vector_string___setitem__(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & key, vector_string x)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"key: std::map< int,std::vector< std::string > >::key_type const &\n"
		"x: std::map< int,std::vector< std::string > >::mapped_type const &\n"
		"\n"
		""},
	 { "map_int_vector_string_asdict", _wrap_map_int_vector_string_asdict, METH_O, "map_int_vector_string_asdict(map_int_vector_string self) -> PyObject *"},
	 { "new_map_int_vector_string", _wrap_new_map_int_vector_string, METH_VARARGS, "\n"
		"map_int_vector_string(std::less< int > const & other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::less< int > const &\n"
		"\n"
		"map_int_vector_string()\n"
		"new_map_int_vector_string(map_int_vector_string other) -> map_int_vector_string\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: std::map< int,std::vector< std::string,std::allocator< std::string > > > const &\n"
		"\n"
		""},
	 { "map_int_vector_string_empty", _wrap_map_int_vector_string_empty, METH_O, "map_int_vector_string_empty(map_int_vector_string self) -> bool"},
	 { "map_int_vector_string_size", _wrap_map_int_vector_string_size, METH_O, "map_int_vector_string_size(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::size_type"},
	 { "map_int_vector_string_swap", _wrap_map_int_vector_string_swap, METH_VARARGS, "\n"
		"map_int_vector_string_swap(map_int_vector_string self, map_int_vector_string v)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"v: std::map< int,std::vector< std::string,std::allocator< std::string > > > &\n"
		"\n"
		""},
	 { "map_int_vector_string_begin", _wrap_map_int_vector_string_begin, METH_O, "map_int_vector_string_begin(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::iterator"},
	 { "map_int_vector_string_end", _wrap_map_int_vector_string_end, METH_O, "map_int_vector_string_end(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::iterator"},
	 { "map_int_vector_string_rbegin", _wrap_map_int_vector_string_rbegin, METH_O, "map_int_vector_string_rbegin(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::reverse_iterator"},
	 { "map_int_vector_string_rend", _wrap_map_int_vector_string_rend, METH_O, "map_int_vector_string_rend(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::reverse_iterator"},
	 { "map_int_vector_string_clear", _wrap_map_int_vector_string_clear, METH_O, "map_int_vector_string_clear(map_int_vector_string self)"},
	 { "map_int_vector_string_get_allocator", _wrap_map_int_vector_string_get_allocator, METH_O, "map_int_vector_string_get_allocator(map_int_vector_string self) -> std::map< int,std::vector< std::string > >::allocator_type"},
	 { "map_int_vector_string_count", _wrap_map_int_vector_string_count, METH_VARARGS, "\n"
		"map_int_vector_string_count(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & x) -> std::map< int,std::vector< std::string > >::size_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::map< int,std::vector< std::string > >::key_type const &\n"
		"\n"
		""},
	 { "map_int_vector_string_erase", _wrap_map_int_vector_string_erase, METH_VARARGS, "\n"
		"map_int_vector_string_erase(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & x) -> std::map< int,std::vector< std::string > >::size_type\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::map< int,std::vector< std::string > >::key_type const &\n"
		"\n"
		"map_int_vector_string_erase(map_int_vector_string self, std::map< int,std::vector< std::string > >::iterator position)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"position: std::map< int,std::vector< std::string > >::iterator\n"
		"\n"
		"map_int_vector_string_erase(map_int_vector_string self, std::map< int,std::vector< std::string > >::iterator first, std::map< int,std::vector< std::string > >::iterator last)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first: std::map< int,std::vector< std::string > >::iterator\n"
		"last: std::map< int,std::vector< std::string > >::iterator\n"
		"\n"
		""},
	 { "map_int_vector_string_find", _wrap_map_int_vector_string_find, METH_VARARGS, "\n"
		"map_int_vector_string_find(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & x) -> std::map< int,std::vector< std::string > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::map< int,std::vector< std::string > >::key_type const &\n"
		"\n"
		""},
	 { "map_int_vector_string_lower_bound", _wrap_map_int_vector_string_lower_bound, METH_VARARGS, "\n"
		"map_int_vector_string_lower_bound(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & x) -> std::map< int,std::vector< std::string > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::map< int,std::vector< std::string > >::key_type const &\n"
		"\n"
		""},
	 { "map_int_vector_string_upper_bound", _wrap_map_int_vector_string_upper_bound, METH_VARARGS, "\n"
		"map_int_vector_string_upper_bound(map_int_vector_string self, std::map< int,std::vector< std::string > >::key_type const & x) -> std::map< int,std::vector< std::string > >::iterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"x: std::map< int,std::vector< std::string > >::key_type const &\n"
		"\n"
		""},
	 { "delete_map_int_vector_string", _wrap_delete_map_int_vector_string, METH_O, "delete_map_int_vector_string(map_int_vector_string self)"},
	 { "map_int_vector_string_swigregister", map_int_vector_string_swigregister, METH_O, NULL},
	 { "map_int_vector_string_swiginit", map_int_vector_string_swiginit, METH_VARARGS, NULL},
	 { "new_metadata_ptr", _wrap_new_metadata_ptr, METH_NOARGS, "new_metadata_ptr() -> metadata_ptr"},
	 { "delete_metadata_ptr", _wrap_delete_metadata_ptr, METH_O, "delete_metadata_ptr(metadata_ptr self)"},
	 { "metadata_ptr_swigregister", metadata_ptr_swigregister, METH_O, NULL},
	 { "metadata_ptr_swiginit", metadata_ptr_swiginit, METH_VARARGS, NULL},
	 { "Profiler_Initialize", _wrap_Profiler_Initialize, METH_NOARGS, "Profiler_Initialize() -> int"},
	 { "Profiler_Finalize", _wrap_Profiler_Finalize, METH_NOARGS, "Profiler_Finalize() -> int"},
	 { "Profiler_Flush", _wrap_Profiler_Flush, METH_NOARGS, "Profiler_Flush() -> int"},
	 { "Profiler_SetCommunicator", _wrap_Profiler_SetCommunicator, METH_O, "\n"
		"Profiler_SetCommunicator(MPI_Comm comm)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"\n"
		""},
	 { "Profiler_SetTimerLogFile", _wrap_Profiler_SetTimerLogFile, METH_O, "\n"
		"Profiler_SetTimerLogFile(std::string const & fileName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"fileName: std::string const &\n"
		"\n"
		""},
	 { "Profiler_SetMemProfLogFile", _wrap_Profiler_SetMemProfLogFile, METH_O, "\n"
		"Profiler_SetMemProfLogFile(std::string const & fileName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"fileName: std::string const &\n"
		"\n"
		""},
	 { "Profiler_SetMemProfInterval", _wrap_Profiler_SetMemProfInterval, METH_O, "\n"
		"Profiler_SetMemProfInterval(int interval)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"interval: int\n"
		"\n"
		""},
	 { "Profiler_Enable", _wrap_Profiler_Enable, METH_VARARGS, "\n"
		"Profiler_Enable(int arg=0x03)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arg: int\n"
		"\n"
		""},
	 { "Profiler_Disable", _wrap_Profiler_Disable, METH_NOARGS, "Profiler_Disable()"},
	 { "Profiler_Enabled", _wrap_Profiler_Enabled, METH_NOARGS, "Profiler_Enabled() -> bool"},
	 { "Profiler_StartEvent", _wrap_Profiler_StartEvent, METH_VARARGS, "\n"
		"Profiler_StartEvent(char const * eventname, long long nbytes=-1) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eventname: char const *\n"
		"nbytes: long long\n"
		"\n"
		""},
	 { "Profiler_EndEvent", _wrap_Profiler_EndEvent, METH_VARARGS, "\n"
		"Profiler_EndEvent(char const * eventname, long long nbytes=-1) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"eventname: char const *\n"
		"nbytes: long long\n"
		"\n"
		""},
	 { "Profiler_WriteCStdio", _wrap_Profiler_WriteCStdio, METH_VARARGS, "\n"
		"Profiler_WriteCStdio(char const * fileName, char const * mode, std::string const & str) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"fileName: char const *\n"
		"mode: char const *\n"
		"str: std::string const &\n"
		"\n"
		""},
	 { "Profiler_WriteMpiIo", _wrap_Profiler_WriteMpiIo, METH_VARARGS, "\n"
		"Profiler_WriteMpiIo(MPI_Comm comm, char const * fileName, std::string const & str) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"fileName: char const *\n"
		"str: std::string const &\n"
		"\n"
		""},
	 { "Profiler_Validate", _wrap_Profiler_Validate, METH_NOARGS, "Profiler_Validate() -> int"},
	 { "Profiler_ToStream", _wrap_Profiler_ToStream, METH_O, "\n"
		"Profiler_ToStream(std::ostream & os) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"os: std::ostream &\n"
		"\n"
		""},
	 { "new_Profiler", _wrap_new_Profiler, METH_NOARGS, "new_Profiler() -> Profiler"},
	 { "delete_Profiler", _wrap_delete_Profiler, METH_O, "delete_Profiler(Profiler self)"},
	 { "Profiler_swigregister", Profiler_swigregister, METH_O, NULL},
	 { "Profiler_swiginit", Profiler_swiginit, METH_VARARGS, NULL},
	 { "delete_BinaryStream", _wrap_delete_BinaryStream, METH_O, "delete_BinaryStream(BinaryStream self)"},
	 { "new_BinaryStream", _wrap_new_BinaryStream, METH_VARARGS, "\n"
		"BinaryStream()\n"
		"new_BinaryStream(BinaryStream s) -> BinaryStream\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"s: sensei::BinaryStream const &\n"
		"\n"
		""},
	 { "BinaryStream___nonzero__", _wrap_BinaryStream___nonzero__, METH_O, "BinaryStream___nonzero__(BinaryStream self) -> bool"},
	 { "BinaryStream_Clear", _wrap_BinaryStream_Clear, METH_O, "BinaryStream_Clear(BinaryStream self)"},
	 { "BinaryStream_Resize", _wrap_BinaryStream_Resize, METH_VARARGS, "\n"
		"BinaryStream_Resize(BinaryStream self, unsigned long nBytes)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nBytes: unsigned long\n"
		"\n"
		""},
	 { "BinaryStream_Grow", _wrap_BinaryStream_Grow, METH_VARARGS, "\n"
		"BinaryStream_Grow(BinaryStream self, unsigned long nBytes)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nBytes: unsigned long\n"
		"\n"
		""},
	 { "BinaryStream_GetData", _wrap_BinaryStream_GetData, METH_VARARGS, "\n"
		"BinaryStream_GetData(BinaryStream self) -> unsigned char\n"
		"BinaryStream_GetData(BinaryStream self) -> unsigned char const *\n"
		""},
	 { "BinaryStream_Size", _wrap_BinaryStream_Size, METH_O, "BinaryStream_Size(BinaryStream self) -> unsigned long"},
	 { "BinaryStream_Capacity", _wrap_BinaryStream_Capacity, METH_O, "BinaryStream_Capacity(BinaryStream self) -> unsigned long"},
	 { "BinaryStream_SetReadPos", _wrap_BinaryStream_SetReadPos, METH_VARARGS, "\n"
		"BinaryStream_SetReadPos(BinaryStream self, unsigned long n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: unsigned long\n"
		"\n"
		""},
	 { "BinaryStream_SetWritePos", _wrap_BinaryStream_SetWritePos, METH_VARARGS, "\n"
		"BinaryStream_SetWritePos(BinaryStream self, unsigned long n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: unsigned long\n"
		"\n"
		""},
	 { "BinaryStream_Swap", _wrap_BinaryStream_Swap, METH_VARARGS, "\n"
		"BinaryStream_Swap(BinaryStream self, BinaryStream other)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: sensei::BinaryStream &\n"
		"\n"
		""},
	 { "BinaryStream_Pack", _wrap_BinaryStream_Pack, METH_VARARGS, "\n"
		"BinaryStream_Pack(BinaryStream self, std::string const & str)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"str: std::string const &\n"
		"\n"
		""},
	 { "BinaryStream_Unpack", _wrap_BinaryStream_Unpack, METH_VARARGS, "\n"
		"BinaryStream_Unpack(BinaryStream self, std::string & str)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"str: std::string &\n"
		"\n"
		""},
	 { "BinaryStream_Broadcast", _wrap_BinaryStream_Broadcast, METH_VARARGS, "\n"
		"BinaryStream_Broadcast(BinaryStream self, int rootRank=0) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rootRank: int\n"
		"\n"
		""},
	 { "BinaryStream_swigregister", BinaryStream_swigregister, METH_O, NULL},
	 { "BinaryStream_swiginit", BinaryStream_swiginit, METH_VARARGS, NULL},
	 { "new_MeshMetadataFlags", _wrap_new_MeshMetadataFlags, METH_VARARGS, "\n"
		"MeshMetadataFlags()\n"
		"new_MeshMetadataFlags(long long flags) -> MeshMetadataFlags\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"flags: long long\n"
		"\n"
		""},
	 { "MeshMetadataFlags_SetAll", _wrap_MeshMetadataFlags_SetAll, METH_O, "MeshMetadataFlags_SetAll(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_ClearAll", _wrap_MeshMetadataFlags_ClearAll, METH_O, "MeshMetadataFlags_ClearAll(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_SetBlockDecomp", _wrap_MeshMetadataFlags_SetBlockDecomp, METH_O, "MeshMetadataFlags_SetBlockDecomp(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_ClearBlockDecomp", _wrap_MeshMetadataFlags_ClearBlockDecomp, METH_O, "MeshMetadataFlags_ClearBlockDecomp(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_BlockDecompSet", _wrap_MeshMetadataFlags_BlockDecompSet, METH_O, "MeshMetadataFlags_BlockDecompSet(MeshMetadataFlags self) -> bool"},
	 { "MeshMetadataFlags_SetBlockSize", _wrap_MeshMetadataFlags_SetBlockSize, METH_O, "MeshMetadataFlags_SetBlockSize(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_ClearBlockSize", _wrap_MeshMetadataFlags_ClearBlockSize, METH_O, "MeshMetadataFlags_ClearBlockSize(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_BlockSizeSet", _wrap_MeshMetadataFlags_BlockSizeSet, METH_O, "MeshMetadataFlags_BlockSizeSet(MeshMetadataFlags self) -> bool"},
	 { "MeshMetadataFlags_SetBlockExtents", _wrap_MeshMetadataFlags_SetBlockExtents, METH_O, "MeshMetadataFlags_SetBlockExtents(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_ClearBlockExtents", _wrap_MeshMetadataFlags_ClearBlockExtents, METH_O, "MeshMetadataFlags_ClearBlockExtents(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_BlockExtentsSet", _wrap_MeshMetadataFlags_BlockExtentsSet, METH_O, "MeshMetadataFlags_BlockExtentsSet(MeshMetadataFlags self) -> bool"},
	 { "MeshMetadataFlags_SetBlockBounds", _wrap_MeshMetadataFlags_SetBlockBounds, METH_O, "MeshMetadataFlags_SetBlockBounds(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_ClearBlockBounds", _wrap_MeshMetadataFlags_ClearBlockBounds, METH_O, "MeshMetadataFlags_ClearBlockBounds(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_BlockBoundsSet", _wrap_MeshMetadataFlags_BlockBoundsSet, METH_O, "MeshMetadataFlags_BlockBoundsSet(MeshMetadataFlags self) -> bool"},
	 { "MeshMetadataFlags_SetBlockArrayRange", _wrap_MeshMetadataFlags_SetBlockArrayRange, METH_O, "MeshMetadataFlags_SetBlockArrayRange(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_ClearBlockArrayRange", _wrap_MeshMetadataFlags_ClearBlockArrayRange, METH_O, "MeshMetadataFlags_ClearBlockArrayRange(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_BlockArrayRangeSet", _wrap_MeshMetadataFlags_BlockArrayRangeSet, METH_O, "MeshMetadataFlags_BlockArrayRangeSet(MeshMetadataFlags self) -> bool"},
	 { "MeshMetadataFlags_FromStream", _wrap_MeshMetadataFlags_FromStream, METH_VARARGS, "\n"
		"MeshMetadataFlags_FromStream(MeshMetadataFlags self, BinaryStream str) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"str: sensei::BinaryStream &\n"
		"\n"
		""},
	 { "MeshMetadataFlags_ToStream", _wrap_MeshMetadataFlags_ToStream, METH_VARARGS, "\n"
		"MeshMetadataFlags_ToStream(MeshMetadataFlags self, BinaryStream str) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"str: sensei::BinaryStream &\n"
		"\n"
		"MeshMetadataFlags_ToStream(MeshMetadataFlags self, ostream & str) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"str: ostream &\n"
		"\n"
		""},
	 { "MeshMetadataFlags___str__", _wrap_MeshMetadataFlags___str__, METH_O, "MeshMetadataFlags___str__(MeshMetadataFlags self) -> PyObject *"},
	 { "delete_MeshMetadataFlags", _wrap_delete_MeshMetadataFlags, METH_O, "delete_MeshMetadataFlags(MeshMetadataFlags self)"},
	 { "MeshMetadataFlags_swigregister", MeshMetadataFlags_swigregister, METH_O, NULL},
	 { "MeshMetadataFlags_swiginit", MeshMetadataFlags_swiginit, METH_VARARGS, NULL},
	 { "MeshMetadata_New", _wrap_MeshMetadata_New, METH_VARARGS, "\n"
		"MeshMetadata_New() -> metadata_ptr\n"
		"MeshMetadata_New(MeshMetadataFlags flags) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"flags: sensei::MeshMetadataFlags const\n"
		"\n"
		""},
	 { "MeshMetadata_NewCopy", _wrap_MeshMetadata_NewCopy, METH_O, "MeshMetadata_NewCopy(MeshMetadata self) -> metadata_ptr"},
	 { "MeshMetadata_FromStream", _wrap_MeshMetadata_FromStream, METH_VARARGS, "\n"
		"MeshMetadata_FromStream(MeshMetadata self, BinaryStream str) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"str: sensei::BinaryStream &\n"
		"\n"
		""},
	 { "MeshMetadata_ToStream", _wrap_MeshMetadata_ToStream, METH_VARARGS, "\n"
		"MeshMetadata_ToStream(MeshMetadata self, BinaryStream str) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"str: sensei::BinaryStream &\n"
		"\n"
		"MeshMetadata_ToStream(MeshMetadata self, ostream & str) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"str: ostream &\n"
		"\n"
		""},
	 { "MeshMetadata_Validate", _wrap_MeshMetadata_Validate, METH_VARARGS, "\n"
		"MeshMetadata_Validate(MeshMetadata self, MPI_Comm comm, MeshMetadataFlags requiredFlags=0xffffffffffffffff) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"requiredFlags: sensei::MeshMetadataFlags const &\n"
		"\n"
		""},
	 { "MeshMetadata_GlobalizeView", _wrap_MeshMetadata_GlobalizeView, METH_VARARGS, "\n"
		"MeshMetadata_GlobalizeView(MeshMetadata self, MPI_Comm arg2) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arg2: MPI_Comm\n"
		"\n"
		""},
	 { "MeshMetadata_ClearBlockInfo", _wrap_MeshMetadata_ClearBlockInfo, METH_O, "MeshMetadata_ClearBlockInfo(MeshMetadata self) -> int"},
	 { "MeshMetadata_CopyBlockInfo", _wrap_MeshMetadata_CopyBlockInfo, METH_VARARGS, "\n"
		"MeshMetadata_CopyBlockInfo(MeshMetadata self, metadata_ptr other, int bid) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: sensei::MeshMetadataPtr const &\n"
		"bid: int\n"
		"\n"
		""},
	 { "MeshMetadata_ClearArrayInfo", _wrap_MeshMetadata_ClearArrayInfo, METH_O, "MeshMetadata_ClearArrayInfo(MeshMetadata self) -> int"},
	 { "MeshMetadata_CopyArrayInfo", _wrap_MeshMetadata_CopyArrayInfo, METH_VARARGS, "\n"
		"MeshMetadata_CopyArrayInfo(MeshMetadata self, metadata_ptr other, std::string const & arrayName) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"other: sensei::MeshMetadataPtr const &\n"
		"arrayName: std::string const &\n"
		"\n"
		""},
	 { "MeshMetadata_GlobalView_set", _wrap_MeshMetadata_GlobalView_set, METH_VARARGS, "\n"
		"MeshMetadata_GlobalView_set(MeshMetadata self, bool GlobalView)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"GlobalView: bool\n"
		"\n"
		""},
	 { "MeshMetadata_GlobalView_get", _wrap_MeshMetadata_GlobalView_get, METH_O, "MeshMetadata_GlobalView_get(MeshMetadata self) -> bool"},
	 { "MeshMetadata_MeshName_set", _wrap_MeshMetadata_MeshName_set, METH_VARARGS, "\n"
		"MeshMetadata_MeshName_set(MeshMetadata self, std::string const & MeshName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"MeshName: std::string const &\n"
		"\n"
		""},
	 { "MeshMetadata_MeshName_get", _wrap_MeshMetadata_MeshName_get, METH_O, "MeshMetadata_MeshName_get(MeshMetadata self) -> std::string const &"},
	 { "MeshMetadata_MeshType_set", _wrap_MeshMetadata_MeshType_set, METH_VARARGS, "\n"
		"MeshMetadata_MeshType_set(MeshMetadata self, int MeshType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"MeshType: int\n"
		"\n"
		""},
	 { "MeshMetadata_MeshType_get", _wrap_MeshMetadata_MeshType_get, METH_O, "MeshMetadata_MeshType_get(MeshMetadata self) -> int"},
	 { "MeshMetadata_BlockType_set", _wrap_MeshMetadata_BlockType_set, METH_VARARGS, "\n"
		"MeshMetadata_BlockType_set(MeshMetadata self, int BlockType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlockType: int\n"
		"\n"
		""},
	 { "MeshMetadata_BlockType_get", _wrap_MeshMetadata_BlockType_get, METH_O, "MeshMetadata_BlockType_get(MeshMetadata self) -> int"},
	 { "MeshMetadata_NumBlocks_set", _wrap_MeshMetadata_NumBlocks_set, METH_VARARGS, "\n"
		"MeshMetadata_NumBlocks_set(MeshMetadata self, int NumBlocks)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"NumBlocks: int\n"
		"\n"
		""},
	 { "MeshMetadata_NumBlocks_get", _wrap_MeshMetadata_NumBlocks_get, METH_O, "MeshMetadata_NumBlocks_get(MeshMetadata self) -> int"},
	 { "MeshMetadata_NumBlocksLocal_set", _wrap_MeshMetadata_NumBlocksLocal_set, METH_VARARGS, "\n"
		"MeshMetadata_NumBlocksLocal_set(MeshMetadata self, vector_int NumBlocksLocal)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"NumBlocksLocal: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_NumBlocksLocal_get", _wrap_MeshMetadata_NumBlocksLocal_get, METH_O, "MeshMetadata_NumBlocksLocal_get(MeshMetadata self) -> vector_int"},
	 { "MeshMetadata_Extent_set", _wrap_MeshMetadata_Extent_set, METH_VARARGS, "\n"
		"MeshMetadata_Extent_set(MeshMetadata self, array_int_6 Extent)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Extent: std::array< int,6 > const &\n"
		"\n"
		""},
	 { "MeshMetadata_Extent_get", _wrap_MeshMetadata_Extent_get, METH_O, "MeshMetadata_Extent_get(MeshMetadata self) -> array_int_6"},
	 { "MeshMetadata_Bounds_set", _wrap_MeshMetadata_Bounds_set, METH_VARARGS, "\n"
		"MeshMetadata_Bounds_set(MeshMetadata self, array_double_6 Bounds)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Bounds: std::array< double,6 > const &\n"
		"\n"
		""},
	 { "MeshMetadata_Bounds_get", _wrap_MeshMetadata_Bounds_get, METH_O, "MeshMetadata_Bounds_get(MeshMetadata self) -> array_double_6"},
	 { "MeshMetadata_CoordinateType_set", _wrap_MeshMetadata_CoordinateType_set, METH_VARARGS, "\n"
		"MeshMetadata_CoordinateType_set(MeshMetadata self, int CoordinateType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"CoordinateType: int\n"
		"\n"
		""},
	 { "MeshMetadata_CoordinateType_get", _wrap_MeshMetadata_CoordinateType_get, METH_O, "MeshMetadata_CoordinateType_get(MeshMetadata self) -> int"},
	 { "MeshMetadata_NumPoints_set", _wrap_MeshMetadata_NumPoints_set, METH_VARARGS, "\n"
		"MeshMetadata_NumPoints_set(MeshMetadata self, long NumPoints)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"NumPoints: long\n"
		"\n"
		""},
	 { "MeshMetadata_NumPoints_get", _wrap_MeshMetadata_NumPoints_get, METH_O, "MeshMetadata_NumPoints_get(MeshMetadata self) -> long"},
	 { "MeshMetadata_NumCells_set", _wrap_MeshMetadata_NumCells_set, METH_VARARGS, "\n"
		"MeshMetadata_NumCells_set(MeshMetadata self, long NumCells)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"NumCells: long\n"
		"\n"
		""},
	 { "MeshMetadata_NumCells_get", _wrap_MeshMetadata_NumCells_get, METH_O, "MeshMetadata_NumCells_get(MeshMetadata self) -> long"},
	 { "MeshMetadata_CellArraySize_set", _wrap_MeshMetadata_CellArraySize_set, METH_VARARGS, "\n"
		"MeshMetadata_CellArraySize_set(MeshMetadata self, long CellArraySize)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"CellArraySize: long\n"
		"\n"
		""},
	 { "MeshMetadata_CellArraySize_get", _wrap_MeshMetadata_CellArraySize_get, METH_O, "MeshMetadata_CellArraySize_get(MeshMetadata self) -> long"},
	 { "MeshMetadata_CellArrayType_set", _wrap_MeshMetadata_CellArrayType_set, METH_VARARGS, "\n"
		"MeshMetadata_CellArrayType_set(MeshMetadata self, int CellArrayType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"CellArrayType: int\n"
		"\n"
		""},
	 { "MeshMetadata_CellArrayType_get", _wrap_MeshMetadata_CellArrayType_get, METH_O, "MeshMetadata_CellArrayType_get(MeshMetadata self) -> int"},
	 { "MeshMetadata_NumArrays_set", _wrap_MeshMetadata_NumArrays_set, METH_VARARGS, "\n"
		"MeshMetadata_NumArrays_set(MeshMetadata self, int NumArrays)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"NumArrays: int\n"
		"\n"
		""},
	 { "MeshMetadata_NumArrays_get", _wrap_MeshMetadata_NumArrays_get, METH_O, "MeshMetadata_NumArrays_get(MeshMetadata self) -> int"},
	 { "MeshMetadata_NumGhostCells_set", _wrap_MeshMetadata_NumGhostCells_set, METH_VARARGS, "\n"
		"MeshMetadata_NumGhostCells_set(MeshMetadata self, int NumGhostCells)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"NumGhostCells: int\n"
		"\n"
		""},
	 { "MeshMetadata_NumGhostCells_get", _wrap_MeshMetadata_NumGhostCells_get, METH_O, "MeshMetadata_NumGhostCells_get(MeshMetadata self) -> int"},
	 { "MeshMetadata_NumGhostNodes_set", _wrap_MeshMetadata_NumGhostNodes_set, METH_VARARGS, "\n"
		"MeshMetadata_NumGhostNodes_set(MeshMetadata self, int NumGhostNodes)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"NumGhostNodes: int\n"
		"\n"
		""},
	 { "MeshMetadata_NumGhostNodes_get", _wrap_MeshMetadata_NumGhostNodes_get, METH_O, "MeshMetadata_NumGhostNodes_get(MeshMetadata self) -> int"},
	 { "MeshMetadata_NumLevels_set", _wrap_MeshMetadata_NumLevels_set, METH_VARARGS, "\n"
		"MeshMetadata_NumLevels_set(MeshMetadata self, int NumLevels)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"NumLevels: int\n"
		"\n"
		""},
	 { "MeshMetadata_NumLevels_get", _wrap_MeshMetadata_NumLevels_get, METH_O, "MeshMetadata_NumLevels_get(MeshMetadata self) -> int"},
	 { "MeshMetadata_StaticMesh_set", _wrap_MeshMetadata_StaticMesh_set, METH_VARARGS, "\n"
		"MeshMetadata_StaticMesh_set(MeshMetadata self, int StaticMesh)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"StaticMesh: int\n"
		"\n"
		""},
	 { "MeshMetadata_StaticMesh_get", _wrap_MeshMetadata_StaticMesh_get, METH_O, "MeshMetadata_StaticMesh_get(MeshMetadata self) -> int"},
	 { "MeshMetadata_ArrayName_set", _wrap_MeshMetadata_ArrayName_set, METH_VARARGS, "\n"
		"MeshMetadata_ArrayName_set(MeshMetadata self, vector_string ArrayName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ArrayName: std::vector< std::string,std::allocator< std::string > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_ArrayName_get", _wrap_MeshMetadata_ArrayName_get, METH_O, "MeshMetadata_ArrayName_get(MeshMetadata self) -> vector_string"},
	 { "MeshMetadata_ArrayCentering_set", _wrap_MeshMetadata_ArrayCentering_set, METH_VARARGS, "\n"
		"MeshMetadata_ArrayCentering_set(MeshMetadata self, vector_int ArrayCentering)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ArrayCentering: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_ArrayCentering_get", _wrap_MeshMetadata_ArrayCentering_get, METH_O, "MeshMetadata_ArrayCentering_get(MeshMetadata self) -> vector_int"},
	 { "MeshMetadata_ArrayComponents_set", _wrap_MeshMetadata_ArrayComponents_set, METH_VARARGS, "\n"
		"MeshMetadata_ArrayComponents_set(MeshMetadata self, vector_int ArrayComponents)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ArrayComponents: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_ArrayComponents_get", _wrap_MeshMetadata_ArrayComponents_get, METH_O, "MeshMetadata_ArrayComponents_get(MeshMetadata self) -> vector_int"},
	 { "MeshMetadata_ArrayType_set", _wrap_MeshMetadata_ArrayType_set, METH_VARARGS, "\n"
		"MeshMetadata_ArrayType_set(MeshMetadata self, vector_int ArrayType)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ArrayType: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_ArrayType_get", _wrap_MeshMetadata_ArrayType_get, METH_O, "MeshMetadata_ArrayType_get(MeshMetadata self) -> vector_int"},
	 { "MeshMetadata_ArrayRange_set", _wrap_MeshMetadata_ArrayRange_set, METH_VARARGS, "\n"
		"MeshMetadata_ArrayRange_set(MeshMetadata self, vector_double_array_2 ArrayRange)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ArrayRange: std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_ArrayRange_get", _wrap_MeshMetadata_ArrayRange_get, METH_O, "MeshMetadata_ArrayRange_get(MeshMetadata self) -> vector_double_array_2"},
	 { "MeshMetadata_BlockOwner_set", _wrap_MeshMetadata_BlockOwner_set, METH_VARARGS, "\n"
		"MeshMetadata_BlockOwner_set(MeshMetadata self, vector_int BlockOwner)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlockOwner: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_BlockOwner_get", _wrap_MeshMetadata_BlockOwner_get, METH_O, "MeshMetadata_BlockOwner_get(MeshMetadata self) -> vector_int"},
	 { "MeshMetadata_BlockIds_set", _wrap_MeshMetadata_BlockIds_set, METH_VARARGS, "\n"
		"MeshMetadata_BlockIds_set(MeshMetadata self, vector_int BlockIds)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlockIds: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_BlockIds_get", _wrap_MeshMetadata_BlockIds_get, METH_O, "MeshMetadata_BlockIds_get(MeshMetadata self) -> vector_int"},
	 { "MeshMetadata_BlockNumPoints_set", _wrap_MeshMetadata_BlockNumPoints_set, METH_VARARGS, "\n"
		"MeshMetadata_BlockNumPoints_set(MeshMetadata self, vector_long_long BlockNumPoints)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlockNumPoints: std::vector< long,std::allocator< long > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_BlockNumPoints_get", _wrap_MeshMetadata_BlockNumPoints_get, METH_O, "MeshMetadata_BlockNumPoints_get(MeshMetadata self) -> vector_long_long"},
	 { "MeshMetadata_BlockNumCells_set", _wrap_MeshMetadata_BlockNumCells_set, METH_VARARGS, "\n"
		"MeshMetadata_BlockNumCells_set(MeshMetadata self, vector_long_long BlockNumCells)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlockNumCells: std::vector< long,std::allocator< long > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_BlockNumCells_get", _wrap_MeshMetadata_BlockNumCells_get, METH_O, "MeshMetadata_BlockNumCells_get(MeshMetadata self) -> vector_long_long"},
	 { "MeshMetadata_BlockCellArraySize_set", _wrap_MeshMetadata_BlockCellArraySize_set, METH_VARARGS, "\n"
		"MeshMetadata_BlockCellArraySize_set(MeshMetadata self, vector_long_long BlockCellArraySize)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlockCellArraySize: std::vector< long,std::allocator< long > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_BlockCellArraySize_get", _wrap_MeshMetadata_BlockCellArraySize_get, METH_O, "MeshMetadata_BlockCellArraySize_get(MeshMetadata self) -> vector_long_long"},
	 { "MeshMetadata_BlockExtents_set", _wrap_MeshMetadata_BlockExtents_set, METH_VARARGS, "\n"
		"MeshMetadata_BlockExtents_set(MeshMetadata self, vector_int_array_6 BlockExtents)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlockExtents: std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_BlockExtents_get", _wrap_MeshMetadata_BlockExtents_get, METH_O, "MeshMetadata_BlockExtents_get(MeshMetadata self) -> vector_int_array_6"},
	 { "MeshMetadata_BlockBounds_set", _wrap_MeshMetadata_BlockBounds_set, METH_VARARGS, "\n"
		"MeshMetadata_BlockBounds_set(MeshMetadata self, vector_double_array_6 BlockBounds)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlockBounds: std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_BlockBounds_get", _wrap_MeshMetadata_BlockBounds_get, METH_O, "MeshMetadata_BlockBounds_get(MeshMetadata self) -> vector_double_array_6"},
	 { "MeshMetadata_BlockArrayRange_set", _wrap_MeshMetadata_BlockArrayRange_set, METH_VARARGS, "\n"
		"MeshMetadata_BlockArrayRange_set(MeshMetadata self, vector_vector_double_array_2 BlockArrayRange)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlockArrayRange: std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_BlockArrayRange_get", _wrap_MeshMetadata_BlockArrayRange_get, METH_O, "MeshMetadata_BlockArrayRange_get(MeshMetadata self) -> vector_vector_double_array_2"},
	 { "MeshMetadata_RefRatio_set", _wrap_MeshMetadata_RefRatio_set, METH_VARARGS, "\n"
		"MeshMetadata_RefRatio_set(MeshMetadata self, vector_int_array_3 RefRatio)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"RefRatio: std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_RefRatio_get", _wrap_MeshMetadata_RefRatio_get, METH_O, "MeshMetadata_RefRatio_get(MeshMetadata self) -> vector_int_array_3"},
	 { "MeshMetadata_BlocksPerLevel_set", _wrap_MeshMetadata_BlocksPerLevel_set, METH_VARARGS, "\n"
		"MeshMetadata_BlocksPerLevel_set(MeshMetadata self, vector_int BlocksPerLevel)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlocksPerLevel: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_BlocksPerLevel_get", _wrap_MeshMetadata_BlocksPerLevel_get, METH_O, "MeshMetadata_BlocksPerLevel_get(MeshMetadata self) -> vector_int"},
	 { "MeshMetadata_BlockLevel_set", _wrap_MeshMetadata_BlockLevel_set, METH_VARARGS, "\n"
		"MeshMetadata_BlockLevel_set(MeshMetadata self, vector_int BlockLevel)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"BlockLevel: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MeshMetadata_BlockLevel_get", _wrap_MeshMetadata_BlockLevel_get, METH_O, "MeshMetadata_BlockLevel_get(MeshMetadata self) -> vector_int"},
	 { "MeshMetadata_PeriodicBoundary_set", _wrap_MeshMetadata_PeriodicBoundary_set, METH_VARARGS, "\n"
		"MeshMetadata_PeriodicBoundary_set(MeshMetadata self, array_int_3 PeriodicBoundary)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"PeriodicBoundary: std::array< int,3 > const &\n"
		"\n"
		""},
	 { "MeshMetadata_PeriodicBoundary_get", _wrap_MeshMetadata_PeriodicBoundary_get, METH_O, "MeshMetadata_PeriodicBoundary_get(MeshMetadata self) -> array_int_3"},
	 { "MeshMetadata_Flags_set", _wrap_MeshMetadata_Flags_set, METH_VARARGS, "\n"
		"MeshMetadata_Flags_set(MeshMetadata self, MeshMetadataFlags Flags)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Flags: sensei::MeshMetadataFlags const &\n"
		"\n"
		""},
	 { "MeshMetadata_Flags_get", _wrap_MeshMetadata_Flags_get, METH_O, "MeshMetadata_Flags_get(MeshMetadata self) -> MeshMetadataFlags"},
	 { "MeshMetadata___str__", _wrap_MeshMetadata___str__, METH_O, "MeshMetadata___str__(MeshMetadata self) -> PyObject *"},
	 { "delete_MeshMetadata", _wrap_delete_MeshMetadata, METH_O, "delete_MeshMetadata(MeshMetadata self)"},
	 { "MeshMetadata_swigregister", MeshMetadata_swigregister, METH_O, NULL},
	 { "DataAdaptor_IsTypeOf", _wrap_DataAdaptor_IsTypeOf, METH_O, "\n"
		"DataAdaptor_IsTypeOf(char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "DataAdaptor_IsA", _wrap_DataAdaptor_IsA, METH_VARARGS, "\n"
		"DataAdaptor_IsA(DataAdaptor self, char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "DataAdaptor_SafeDownCast", _wrap_DataAdaptor_SafeDownCast, METH_O, "\n"
		"DataAdaptor_SafeDownCast(svtkObjectBase o) -> DataAdaptor\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"o: svtkObjectBase *\n"
		"\n"
		""},
	 { "DataAdaptor_NewInstance", _wrap_DataAdaptor_NewInstance, METH_O, "DataAdaptor_NewInstance(DataAdaptor self) -> DataAdaptor"},
	 { "DataAdaptor_GetNumberOfGenerationsFromBaseType", _wrap_DataAdaptor_GetNumberOfGenerationsFromBaseType, METH_O, "\n"
		"DataAdaptor_GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "DataAdaptor_GetNumberOfGenerationsFromBase", _wrap_DataAdaptor_GetNumberOfGenerationsFromBase, METH_VARARGS, "\n"
		"DataAdaptor_GetNumberOfGenerationsFromBase(DataAdaptor self, char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "DataAdaptor_PrintSelf", _wrap_DataAdaptor_PrintSelf, METH_VARARGS, "\n"
		"DataAdaptor_PrintSelf(DataAdaptor self, ostream & os, svtkIndent indent)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"os: ostream &\n"
		"indent: svtkIndent\n"
		"\n"
		""},
	 { "DataAdaptor_SetCommunicator", _wrap_DataAdaptor_SetCommunicator, METH_VARARGS, "\n"
		"DataAdaptor_SetCommunicator(DataAdaptor self, MPI_Comm comm) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"\n"
		""},
	 { "DataAdaptor_GetCommunicator", _wrap_DataAdaptor_GetCommunicator, METH_O, "DataAdaptor_GetCommunicator(DataAdaptor self) -> MPI_Comm"},
	 { "DataAdaptor_AddGhostNodesArray", _wrap_DataAdaptor_AddGhostNodesArray, METH_VARARGS, "\n"
		"DataAdaptor_AddGhostNodesArray(DataAdaptor self, svtkDataObject mesh, std::string const & meshName) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"\n"
		""},
	 { "DataAdaptor_AddGhostCellsArray", _wrap_DataAdaptor_AddGhostCellsArray, METH_VARARGS, "\n"
		"DataAdaptor_AddGhostCellsArray(DataAdaptor self, svtkDataObject mesh, std::string const & meshName) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"\n"
		""},
	 { "DataAdaptor_AddArrays", _wrap_DataAdaptor_AddArrays, METH_VARARGS, "\n"
		"DataAdaptor_AddArrays(DataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, vector_string arrayNames) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrayNames: std::vector< std::string,std::allocator< std::string > > const &\n"
		"\n"
		""},
	 { "DataAdaptor_GetDataTime", _wrap_DataAdaptor_GetDataTime, METH_O, "DataAdaptor_GetDataTime(DataAdaptor self) -> double"},
	 { "DataAdaptor_SetDataTime", _wrap_DataAdaptor_SetDataTime, METH_VARARGS, "\n"
		"DataAdaptor_SetDataTime(DataAdaptor self, double time)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"time: double\n"
		"\n"
		""},
	 { "DataAdaptor_GetDataTimeStep", _wrap_DataAdaptor_GetDataTimeStep, METH_O, "DataAdaptor_GetDataTimeStep(DataAdaptor self) -> long"},
	 { "DataAdaptor_SetDataTimeStep", _wrap_DataAdaptor_SetDataTimeStep, METH_VARARGS, "\n"
		"DataAdaptor_SetDataTimeStep(DataAdaptor self, long index)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"index: long\n"
		"\n"
		""},
	 { "delete_DataAdaptor", _wrap_delete_DataAdaptor, METH_O, "delete_DataAdaptor(DataAdaptor self)"},
	 { "DataAdaptor___str__", _wrap_DataAdaptor___str__, METH_O, "DataAdaptor___str__(DataAdaptor self) -> std::string"},
	 { "DataAdaptor_GetNumberOfMeshes", _wrap_DataAdaptor_GetNumberOfMeshes, METH_O, "DataAdaptor_GetNumberOfMeshes(DataAdaptor self) -> unsigned int"},
	 { "DataAdaptor_GetMeshMetadata", _wrap_DataAdaptor_GetMeshMetadata, METH_VARARGS, "\n"
		"DataAdaptor_GetMeshMetadata(DataAdaptor self, unsigned int id, MeshMetadataFlags flags=sensei::MeshMetadataFlags()) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"flags: sensei::MeshMetadataFlags\n"
		"\n"
		""},
	 { "DataAdaptor_GetMesh", _wrap_DataAdaptor_GetMesh, METH_VARARGS, "\n"
		"DataAdaptor_GetMesh(DataAdaptor self, std::string const & meshName, bool structureOnly) -> svtkDataObject\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"structureOnly: bool\n"
		"\n"
		""},
	 { "DataAdaptor_AddArray", _wrap_DataAdaptor_AddArray, METH_VARARGS, "\n"
		"DataAdaptor_AddArray(DataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, std::string const & arrayName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrayName: std::string const &\n"
		"\n"
		""},
	 { "DataAdaptor_ReleaseData", _wrap_DataAdaptor_ReleaseData, METH_O, "DataAdaptor_ReleaseData(DataAdaptor self)"},
	 { "DataAdaptor_swigregister", DataAdaptor_swigregister, METH_O, NULL},
	 { "Partitioner_GetClassName", _wrap_Partitioner_GetClassName, METH_O, "Partitioner_GetClassName(Partitioner self) -> char const *"},
	 { "Partitioner_Initialize", _wrap_Partitioner_Initialize, METH_VARARGS, "\n"
		"Partitioner_Initialize(Partitioner self, pugi::xml_node & arg2) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arg2: pugi::xml_node &\n"
		"\n"
		""},
	 { "Partitioner_SetVerbose", _wrap_Partitioner_SetVerbose, METH_VARARGS, "\n"
		"Partitioner_SetVerbose(Partitioner self, int val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"val: int\n"
		"\n"
		""},
	 { "Partitioner_GetVerbose", _wrap_Partitioner_GetVerbose, METH_O, "Partitioner_GetVerbose(Partitioner self) -> int"},
	 { "delete_Partitioner", _wrap_delete_Partitioner, METH_O, "delete_Partitioner(Partitioner self)"},
	 { "Partitioner_GetPartition", _wrap_Partitioner_GetPartition, METH_VARARGS, "\n"
		"Partitioner_GetPartition(Partitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"in: sensei::MeshMetadataPtr const &\n"
		"\n"
		""},
	 { "Partitioner_swigregister", Partitioner_swigregister, METH_O, NULL},
	 { "BlockPartitioner_New", _wrap_BlockPartitioner_New, METH_NOARGS, "BlockPartitioner_New() -> sensei::BlockPartitionerPtr"},
	 { "BlockPartitioner_GetClassName", _wrap_BlockPartitioner_GetClassName, METH_O, "BlockPartitioner_GetClassName(BlockPartitioner self) -> char const *"},
	 { "BlockPartitioner_GetPartition", _wrap_BlockPartitioner_GetPartition, METH_VARARGS, "\n"
		"BlockPartitioner_GetPartition(BlockPartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"in: sensei::MeshMetadataPtr const &\n"
		"\n"
		""},
	 { "delete_BlockPartitioner", _wrap_delete_BlockPartitioner, METH_O, "delete_BlockPartitioner(BlockPartitioner self)"},
	 { "BlockPartitioner_swigregister", BlockPartitioner_swigregister, METH_O, NULL},
	 { "PlanarPartitioner_New", _wrap_PlanarPartitioner_New, METH_NOARGS, "PlanarPartitioner_New() -> sensei::PlanarPartitionerPtr"},
	 { "PlanarPartitioner_GetClassName", _wrap_PlanarPartitioner_GetClassName, METH_O, "PlanarPartitioner_GetClassName(PlanarPartitioner self) -> char const *"},
	 { "PlanarPartitioner_SetPlaneSize", _wrap_PlanarPartitioner_SetPlaneSize, METH_VARARGS, "\n"
		"PlanarPartitioner_SetPlaneSize(PlanarPartitioner self, unsigned int size)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"size: unsigned int\n"
		"\n"
		""},
	 { "PlanarPartitioner_GetPlaneSize", _wrap_PlanarPartitioner_GetPlaneSize, METH_O, "PlanarPartitioner_GetPlaneSize(PlanarPartitioner self) -> unsigned int"},
	 { "PlanarPartitioner_Initialize", _wrap_PlanarPartitioner_Initialize, METH_VARARGS, "\n"
		"PlanarPartitioner_Initialize(PlanarPartitioner self, pugi::xml_node & node) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"node: pugi::xml_node &\n"
		"\n"
		""},
	 { "PlanarPartitioner_GetPartition", _wrap_PlanarPartitioner_GetPartition, METH_VARARGS, "\n"
		"PlanarPartitioner_GetPartition(PlanarPartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"in: sensei::MeshMetadataPtr const &\n"
		"\n"
		""},
	 { "delete_PlanarPartitioner", _wrap_delete_PlanarPartitioner, METH_O, "delete_PlanarPartitioner(PlanarPartitioner self)"},
	 { "PlanarPartitioner_swigregister", PlanarPartitioner_swigregister, METH_O, NULL},
	 { "MappedPartitioner_New", _wrap_MappedPartitioner_New, METH_NOARGS, "MappedPartitioner_New() -> sensei::MappedPartitionerPtr"},
	 { "MappedPartitioner_GetClassName", _wrap_MappedPartitioner_GetClassName, METH_O, "MappedPartitioner_GetClassName(MappedPartitioner self) -> char const *"},
	 { "new_MappedPartitioner", _wrap_new_MappedPartitioner, METH_VARARGS, "\n"
		"new_MappedPartitioner(vector_int blkOwner, vector_int blkIds) -> MappedPartitioner\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"blkOwner: std::vector< int,std::allocator< int > > const &\n"
		"blkIds: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MappedPartitioner_Initialize", _wrap_MappedPartitioner_Initialize, METH_VARARGS, "\n"
		"MappedPartitioner_Initialize(MappedPartitioner self, pugi::xml_node & node) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"node: pugi::xml_node &\n"
		"\n"
		""},
	 { "MappedPartitioner_SetBlockOwner", _wrap_MappedPartitioner_SetBlockOwner, METH_VARARGS, "\n"
		"MappedPartitioner_SetBlockOwner(MappedPartitioner self, vector_int blkOwner)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"blkOwner: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MappedPartitioner_SetBlockIds", _wrap_MappedPartitioner_SetBlockIds, METH_VARARGS, "\n"
		"MappedPartitioner_SetBlockIds(MappedPartitioner self, vector_int blkIds)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"blkIds: std::vector< int,std::allocator< int > > const &\n"
		"\n"
		""},
	 { "MappedPartitioner_GetPartition", _wrap_MappedPartitioner_GetPartition, METH_VARARGS, "\n"
		"MappedPartitioner_GetPartition(MappedPartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"in: sensei::MeshMetadataPtr const &\n"
		"\n"
		""},
	 { "delete_MappedPartitioner", _wrap_delete_MappedPartitioner, METH_O, "delete_MappedPartitioner(MappedPartitioner self)"},
	 { "MappedPartitioner_swigregister", MappedPartitioner_swigregister, METH_O, NULL},
	 { "MappedPartitioner_swiginit", MappedPartitioner_swiginit, METH_VARARGS, NULL},
	 { "PlanarSlicePartitioner_New", _wrap_PlanarSlicePartitioner_New, METH_NOARGS, "PlanarSlicePartitioner_New() -> sensei::PlanarSlicePartitionerPtr"},
	 { "PlanarSlicePartitioner_GetClassName", _wrap_PlanarSlicePartitioner_GetClassName, METH_O, "PlanarSlicePartitioner_GetClassName(PlanarSlicePartitioner self) -> char const *"},
	 { "PlanarSlicePartitioner_SetPoint", _wrap_PlanarSlicePartitioner_SetPoint, METH_VARARGS, "\n"
		"PlanarSlicePartitioner_SetPoint(PlanarSlicePartitioner self, array_double_3 p)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p: std::array< double,3 > const &\n"
		"\n"
		""},
	 { "PlanarSlicePartitioner_GetPoint", _wrap_PlanarSlicePartitioner_GetPoint, METH_VARARGS, "\n"
		"PlanarSlicePartitioner_GetPoint(PlanarSlicePartitioner self, array_double_3 p)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"p: std::array< double,3 > &\n"
		"\n"
		""},
	 { "PlanarSlicePartitioner_SetNormal", _wrap_PlanarSlicePartitioner_SetNormal, METH_VARARGS, "\n"
		"PlanarSlicePartitioner_SetNormal(PlanarSlicePartitioner self, array_double_3 n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::array< double,3 > const &\n"
		"\n"
		""},
	 { "PlanarSlicePartitioner_GetNormal", _wrap_PlanarSlicePartitioner_GetNormal, METH_VARARGS, "\n"
		"PlanarSlicePartitioner_GetNormal(PlanarSlicePartitioner self, array_double_3 n)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: std::array< double,3 > &\n"
		"\n"
		""},
	 { "PlanarSlicePartitioner_Initialize", _wrap_PlanarSlicePartitioner_Initialize, METH_VARARGS, "\n"
		"PlanarSlicePartitioner_Initialize(PlanarSlicePartitioner self, pugi::xml_node & node) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"node: pugi::xml_node &\n"
		"\n"
		""},
	 { "PlanarSlicePartitioner_GetPartition", _wrap_PlanarSlicePartitioner_GetPartition, METH_VARARGS, "\n"
		"PlanarSlicePartitioner_GetPartition(PlanarSlicePartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"in: sensei::MeshMetadataPtr const &\n"
		"\n"
		""},
	 { "delete_PlanarSlicePartitioner", _wrap_delete_PlanarSlicePartitioner, METH_O, "delete_PlanarSlicePartitioner(PlanarSlicePartitioner self)"},
	 { "PlanarSlicePartitioner_swigregister", PlanarSlicePartitioner_swigregister, METH_O, NULL},
	 { "IsoSurfacePartitioner_New", _wrap_IsoSurfacePartitioner_New, METH_NOARGS, "IsoSurfacePartitioner_New() -> sensei::IsoSurfacePartitionerPtr"},
	 { "IsoSurfacePartitioner_GetClassName", _wrap_IsoSurfacePartitioner_GetClassName, METH_O, "IsoSurfacePartitioner_GetClassName(IsoSurfacePartitioner self) -> char const *"},
	 { "IsoSurfacePartitioner_SetIsoValues", _wrap_IsoSurfacePartitioner_SetIsoValues, METH_VARARGS, "\n"
		"IsoSurfacePartitioner_SetIsoValues(IsoSurfacePartitioner self, std::string const & meshName, std::string const & arrayName, int arrayCentering, std::vector< double,std::allocator< double > > const & vals)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"arrayName: std::string const &\n"
		"arrayCentering: int\n"
		"vals: std::vector< double,std::allocator< double > > const &\n"
		"\n"
		""},
	 { "IsoSurfacePartitioner_GetIsoValues", _wrap_IsoSurfacePartitioner_GetIsoValues, METH_VARARGS, "\n"
		"IsoSurfacePartitioner_GetIsoValues(IsoSurfacePartitioner self, std::string & meshName, std::string & arrayName, int & arrayCentering, std::vector< double,std::allocator< double > > & vals) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string &\n"
		"arrayName: std::string &\n"
		"arrayCentering: int &\n"
		"vals: std::vector< double,std::allocator< double > > &\n"
		"\n"
		""},
	 { "IsoSurfacePartitioner_Initialize", _wrap_IsoSurfacePartitioner_Initialize, METH_VARARGS, "\n"
		"IsoSurfacePartitioner_Initialize(IsoSurfacePartitioner self, pugi::xml_node & node) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"node: pugi::xml_node &\n"
		"\n"
		""},
	 { "IsoSurfacePartitioner_GetPartition", _wrap_IsoSurfacePartitioner_GetPartition, METH_VARARGS, "\n"
		"IsoSurfacePartitioner_GetPartition(IsoSurfacePartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"in: sensei::MeshMetadataPtr const &\n"
		"\n"
		""},
	 { "delete_IsoSurfacePartitioner", _wrap_delete_IsoSurfacePartitioner, METH_O, "delete_IsoSurfacePartitioner(IsoSurfacePartitioner self)"},
	 { "IsoSurfacePartitioner_swigregister", IsoSurfacePartitioner_swigregister, METH_O, NULL},
	 { "delete_ConfigurablePartitioner", _wrap_delete_ConfigurablePartitioner, METH_O, "delete_ConfigurablePartitioner(ConfigurablePartitioner self)"},
	 { "ConfigurablePartitioner_New", _wrap_ConfigurablePartitioner_New, METH_NOARGS, "ConfigurablePartitioner_New() -> sensei::ConfigurablePartitionerPtr"},
	 { "ConfigurablePartitioner_GetClassName", _wrap_ConfigurablePartitioner_GetClassName, METH_O, "ConfigurablePartitioner_GetClassName(ConfigurablePartitioner self) -> char const *"},
	 { "ConfigurablePartitioner_Initialize", _wrap_ConfigurablePartitioner_Initialize, METH_VARARGS, "\n"
		"ConfigurablePartitioner_Initialize(ConfigurablePartitioner self, pugi::xml_node & arg2) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"arg2: pugi::xml_node &\n"
		"\n"
		""},
	 { "ConfigurablePartitioner_GetPartition", _wrap_ConfigurablePartitioner_GetPartition, METH_VARARGS, "\n"
		"ConfigurablePartitioner_GetPartition(ConfigurablePartitioner self, MPI_Comm comm, metadata_ptr _in) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"in: sensei::MeshMetadataPtr const &\n"
		"\n"
		""},
	 { "ConfigurablePartitioner_swigregister", ConfigurablePartitioner_swigregister, METH_O, NULL},
	 { "InTransitDataAdaptor_IsTypeOf", _wrap_InTransitDataAdaptor_IsTypeOf, METH_O, "\n"
		"InTransitDataAdaptor_IsTypeOf(char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_IsA", _wrap_InTransitDataAdaptor_IsA, METH_VARARGS, "\n"
		"InTransitDataAdaptor_IsA(InTransitDataAdaptor self, char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_SafeDownCast", _wrap_InTransitDataAdaptor_SafeDownCast, METH_O, "\n"
		"InTransitDataAdaptor_SafeDownCast(svtkObjectBase o) -> InTransitDataAdaptor\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"o: svtkObjectBase *\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_NewInstance", _wrap_InTransitDataAdaptor_NewInstance, METH_O, "InTransitDataAdaptor_NewInstance(InTransitDataAdaptor self) -> InTransitDataAdaptor"},
	 { "InTransitDataAdaptor_GetNumberOfGenerationsFromBaseType", _wrap_InTransitDataAdaptor_GetNumberOfGenerationsFromBaseType, METH_O, "\n"
		"InTransitDataAdaptor_GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_GetNumberOfGenerationsFromBase", _wrap_InTransitDataAdaptor_GetNumberOfGenerationsFromBase, METH_VARARGS, "\n"
		"InTransitDataAdaptor_GetNumberOfGenerationsFromBase(InTransitDataAdaptor self, char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_SetConnectionInfo", _wrap_InTransitDataAdaptor_SetConnectionInfo, METH_VARARGS, "\n"
		"InTransitDataAdaptor_SetConnectionInfo(InTransitDataAdaptor self, std::string const & info) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"info: std::string const &\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_GetConnectionInfo", _wrap_InTransitDataAdaptor_GetConnectionInfo, METH_O, "InTransitDataAdaptor_GetConnectionInfo(InTransitDataAdaptor self) -> std::string const &"},
	 { "InTransitDataAdaptor_Initialize", _wrap_InTransitDataAdaptor_Initialize, METH_VARARGS, "\n"
		"InTransitDataAdaptor_Initialize(InTransitDataAdaptor self, pugi::xml_node & node) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"node: pugi::xml_node &\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_SetPartitioner", _wrap_InTransitDataAdaptor_SetPartitioner, METH_VARARGS, "\n"
		"InTransitDataAdaptor_SetPartitioner(InTransitDataAdaptor self, sensei::PartitionerPtr const & partitioner)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"partitioner: sensei::PartitionerPtr const &\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_GetPartitioner", _wrap_InTransitDataAdaptor_GetPartitioner, METH_O, "InTransitDataAdaptor_GetPartitioner(InTransitDataAdaptor self) -> sensei::PartitionerPtr"},
	 { "InTransitDataAdaptor_OpenStream", _wrap_InTransitDataAdaptor_OpenStream, METH_O, "InTransitDataAdaptor_OpenStream(InTransitDataAdaptor self) -> int"},
	 { "InTransitDataAdaptor_CloseStream", _wrap_InTransitDataAdaptor_CloseStream, METH_O, "InTransitDataAdaptor_CloseStream(InTransitDataAdaptor self) -> int"},
	 { "InTransitDataAdaptor_AdvanceStream", _wrap_InTransitDataAdaptor_AdvanceStream, METH_O, "InTransitDataAdaptor_AdvanceStream(InTransitDataAdaptor self) -> int"},
	 { "InTransitDataAdaptor_StreamGood", _wrap_InTransitDataAdaptor_StreamGood, METH_O, "InTransitDataAdaptor_StreamGood(InTransitDataAdaptor self) -> int"},
	 { "InTransitDataAdaptor_Finalize", _wrap_InTransitDataAdaptor_Finalize, METH_O, "InTransitDataAdaptor_Finalize(InTransitDataAdaptor self) -> int"},
	 { "delete_InTransitDataAdaptor", _wrap_delete_InTransitDataAdaptor, METH_O, "delete_InTransitDataAdaptor(InTransitDataAdaptor self)"},
	 { "InTransitDataAdaptor_GetNumberOfMeshes", _wrap_InTransitDataAdaptor_GetNumberOfMeshes, METH_O, "InTransitDataAdaptor_GetNumberOfMeshes(InTransitDataAdaptor self) -> unsigned int"},
	 { "InTransitDataAdaptor_GetMeshMetadata", _wrap_InTransitDataAdaptor_GetMeshMetadata, METH_VARARGS, "\n"
		"InTransitDataAdaptor_GetMeshMetadata(InTransitDataAdaptor self, unsigned int id, MeshMetadataFlags flags=sensei::MeshMetadataFlags()) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"flags: sensei::MeshMetadataFlags\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_GetMesh", _wrap_InTransitDataAdaptor_GetMesh, METH_VARARGS, "\n"
		"InTransitDataAdaptor_GetMesh(InTransitDataAdaptor self, std::string const & meshName, bool structureOnly) -> svtkDataObject\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"structureOnly: bool\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_AddArray", _wrap_InTransitDataAdaptor_AddArray, METH_VARARGS, "\n"
		"InTransitDataAdaptor_AddArray(InTransitDataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, std::string const & arrayName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrayName: std::string const &\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_ReleaseData", _wrap_InTransitDataAdaptor_ReleaseData, METH_O, "InTransitDataAdaptor_ReleaseData(InTransitDataAdaptor self)"},
	 { "InTransitDataAdaptor_GetSenderMeshMetadata", _wrap_InTransitDataAdaptor_GetSenderMeshMetadata, METH_VARARGS, "\n"
		"InTransitDataAdaptor_GetSenderMeshMetadata(InTransitDataAdaptor self, unsigned int id) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_GetReceiverMeshMetadata", _wrap_InTransitDataAdaptor_GetReceiverMeshMetadata, METH_VARARGS, "\n"
		"InTransitDataAdaptor_GetReceiverMeshMetadata(InTransitDataAdaptor self, unsigned int id) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"\n"
		""},
	 { "InTransitDataAdaptor_SetReceiverMeshMetadata", _wrap_InTransitDataAdaptor_SetReceiverMeshMetadata, METH_VARARGS, "\n"
		"InTransitDataAdaptor_SetReceiverMeshMetadata(InTransitDataAdaptor self, unsigned int id, metadata_ptr md)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"md: sensei::MeshMetadataPtr &\n"
		"\n"
		""},
	 { "InTransitDataAdaptor___str__", _wrap_InTransitDataAdaptor___str__, METH_O, "InTransitDataAdaptor___str__(InTransitDataAdaptor self) -> std::string"},
	 { "InTransitDataAdaptor_swigregister", InTransitDataAdaptor_swigregister, METH_O, NULL},
	 { "AsInTransitDataAdaptor", _wrap_AsInTransitDataAdaptor, METH_O, "\n"
		"AsInTransitDataAdaptor(DataAdaptor da) -> InTransitDataAdaptor\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"da: sensei::DataAdaptor *\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_New", _wrap_ConfigurableInTransitDataAdaptor_New, METH_NOARGS, "ConfigurableInTransitDataAdaptor_New() -> ConfigurableInTransitDataAdaptor"},
	 { "ConfigurableInTransitDataAdaptor_IsTypeOf", _wrap_ConfigurableInTransitDataAdaptor_IsTypeOf, METH_O, "\n"
		"ConfigurableInTransitDataAdaptor_IsTypeOf(char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_IsA", _wrap_ConfigurableInTransitDataAdaptor_IsA, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_IsA(ConfigurableInTransitDataAdaptor self, char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_SafeDownCast", _wrap_ConfigurableInTransitDataAdaptor_SafeDownCast, METH_O, "\n"
		"ConfigurableInTransitDataAdaptor_SafeDownCast(svtkObjectBase o) -> ConfigurableInTransitDataAdaptor\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"o: svtkObjectBase *\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_NewInstance", _wrap_ConfigurableInTransitDataAdaptor_NewInstance, METH_O, "ConfigurableInTransitDataAdaptor_NewInstance(ConfigurableInTransitDataAdaptor self) -> ConfigurableInTransitDataAdaptor"},
	 { "ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBaseType", _wrap_ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBaseType, METH_O, "\n"
		"ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBase", _wrap_ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBase, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_GetNumberOfGenerationsFromBase(ConfigurableInTransitDataAdaptor self, char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_SetConnectionInfo", _wrap_ConfigurableInTransitDataAdaptor_SetConnectionInfo, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_SetConnectionInfo(ConfigurableInTransitDataAdaptor self, std::string const & info) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"info: std::string const &\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_GetConnectionInfo", _wrap_ConfigurableInTransitDataAdaptor_GetConnectionInfo, METH_O, "ConfigurableInTransitDataAdaptor_GetConnectionInfo(ConfigurableInTransitDataAdaptor self) -> std::string const &"},
	 { "ConfigurableInTransitDataAdaptor_Initialize", _wrap_ConfigurableInTransitDataAdaptor_Initialize, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_Initialize(ConfigurableInTransitDataAdaptor self, std::string const & fileName) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"fileName: std::string const &\n"
		"\n"
		"ConfigurableInTransitDataAdaptor_Initialize(ConfigurableInTransitDataAdaptor self, pugi::xml_node & node) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"node: pugi::xml_node &\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_SetPartitioner", _wrap_ConfigurableInTransitDataAdaptor_SetPartitioner, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_SetPartitioner(ConfigurableInTransitDataAdaptor self, sensei::PartitionerPtr const & partitioner)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"partitioner: sensei::PartitionerPtr const &\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_GetPartitioner", _wrap_ConfigurableInTransitDataAdaptor_GetPartitioner, METH_O, "ConfigurableInTransitDataAdaptor_GetPartitioner(ConfigurableInTransitDataAdaptor self) -> sensei::PartitionerPtr"},
	 { "ConfigurableInTransitDataAdaptor_OpenStream", _wrap_ConfigurableInTransitDataAdaptor_OpenStream, METH_O, "ConfigurableInTransitDataAdaptor_OpenStream(ConfigurableInTransitDataAdaptor self) -> int"},
	 { "ConfigurableInTransitDataAdaptor_CloseStream", _wrap_ConfigurableInTransitDataAdaptor_CloseStream, METH_O, "ConfigurableInTransitDataAdaptor_CloseStream(ConfigurableInTransitDataAdaptor self) -> int"},
	 { "ConfigurableInTransitDataAdaptor_AdvanceStream", _wrap_ConfigurableInTransitDataAdaptor_AdvanceStream, METH_O, "ConfigurableInTransitDataAdaptor_AdvanceStream(ConfigurableInTransitDataAdaptor self) -> int"},
	 { "ConfigurableInTransitDataAdaptor_StreamGood", _wrap_ConfigurableInTransitDataAdaptor_StreamGood, METH_O, "ConfigurableInTransitDataAdaptor_StreamGood(ConfigurableInTransitDataAdaptor self) -> int"},
	 { "ConfigurableInTransitDataAdaptor_Finalize", _wrap_ConfigurableInTransitDataAdaptor_Finalize, METH_O, "ConfigurableInTransitDataAdaptor_Finalize(ConfigurableInTransitDataAdaptor self) -> int"},
	 { "ConfigurableInTransitDataAdaptor_AddGhostNodesArray", _wrap_ConfigurableInTransitDataAdaptor_AddGhostNodesArray, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_AddGhostNodesArray(ConfigurableInTransitDataAdaptor self, svtkDataObject mesh, std::string const & meshName) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_AddGhostCellsArray", _wrap_ConfigurableInTransitDataAdaptor_AddGhostCellsArray, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_AddGhostCellsArray(ConfigurableInTransitDataAdaptor self, svtkDataObject mesh, std::string const & meshName) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_AddArrays", _wrap_ConfigurableInTransitDataAdaptor_AddArrays, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_AddArrays(ConfigurableInTransitDataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, vector_string arrayName) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrayName: std::vector< std::string,std::allocator< std::string > > const &\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_GetDataTime", _wrap_ConfigurableInTransitDataAdaptor_GetDataTime, METH_O, "ConfigurableInTransitDataAdaptor_GetDataTime(ConfigurableInTransitDataAdaptor self) -> double"},
	 { "ConfigurableInTransitDataAdaptor_SetDataTime", _wrap_ConfigurableInTransitDataAdaptor_SetDataTime, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_SetDataTime(ConfigurableInTransitDataAdaptor self, double time)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"time: double\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_GetDataTimeStep", _wrap_ConfigurableInTransitDataAdaptor_GetDataTimeStep, METH_O, "ConfigurableInTransitDataAdaptor_GetDataTimeStep(ConfigurableInTransitDataAdaptor self) -> long"},
	 { "ConfigurableInTransitDataAdaptor_SetDataTimeStep", _wrap_ConfigurableInTransitDataAdaptor_SetDataTimeStep, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_SetDataTimeStep(ConfigurableInTransitDataAdaptor self, long index)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"index: long\n"
		"\n"
		""},
	 { "delete_ConfigurableInTransitDataAdaptor", _wrap_delete_ConfigurableInTransitDataAdaptor, METH_O, "delete_ConfigurableInTransitDataAdaptor(ConfigurableInTransitDataAdaptor self)"},
	 { "new_ConfigurableInTransitDataAdaptor", _wrap_new_ConfigurableInTransitDataAdaptor, METH_NOARGS, "new_ConfigurableInTransitDataAdaptor() -> ConfigurableInTransitDataAdaptor"},
	 { "ConfigurableInTransitDataAdaptor_GetNumberOfMeshes", _wrap_ConfigurableInTransitDataAdaptor_GetNumberOfMeshes, METH_O, "ConfigurableInTransitDataAdaptor_GetNumberOfMeshes(ConfigurableInTransitDataAdaptor self) -> unsigned int"},
	 { "ConfigurableInTransitDataAdaptor_GetMeshMetadata", _wrap_ConfigurableInTransitDataAdaptor_GetMeshMetadata, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_GetMeshMetadata(ConfigurableInTransitDataAdaptor self, unsigned int id, MeshMetadataFlags flags=sensei::MeshMetadataFlags()) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"flags: sensei::MeshMetadataFlags\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_GetMesh", _wrap_ConfigurableInTransitDataAdaptor_GetMesh, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_GetMesh(ConfigurableInTransitDataAdaptor self, std::string const & meshName, bool structureOnly) -> svtkDataObject\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"structureOnly: bool\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_AddArray", _wrap_ConfigurableInTransitDataAdaptor_AddArray, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_AddArray(ConfigurableInTransitDataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, std::string const & arrayName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrayName: std::string const &\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_ReleaseData", _wrap_ConfigurableInTransitDataAdaptor_ReleaseData, METH_O, "ConfigurableInTransitDataAdaptor_ReleaseData(ConfigurableInTransitDataAdaptor self)"},
	 { "ConfigurableInTransitDataAdaptor_GetSenderMeshMetadata", _wrap_ConfigurableInTransitDataAdaptor_GetSenderMeshMetadata, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_GetSenderMeshMetadata(ConfigurableInTransitDataAdaptor self, unsigned int id) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_GetReceiverMeshMetadata", _wrap_ConfigurableInTransitDataAdaptor_GetReceiverMeshMetadata, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_GetReceiverMeshMetadata(ConfigurableInTransitDataAdaptor self, unsigned int id) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata", _wrap_ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata, METH_VARARGS, "\n"
		"ConfigurableInTransitDataAdaptor_SetReceiverMeshMetadata(ConfigurableInTransitDataAdaptor self, unsigned int id, metadata_ptr md)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"md: sensei::MeshMetadataPtr &\n"
		"\n"
		""},
	 { "ConfigurableInTransitDataAdaptor___str__", _wrap_ConfigurableInTransitDataAdaptor___str__, METH_O, "ConfigurableInTransitDataAdaptor___str__(ConfigurableInTransitDataAdaptor self) -> std::string"},
	 { "ConfigurableInTransitDataAdaptor_swigregister", ConfigurableInTransitDataAdaptor_swigregister, METH_O, NULL},
	 { "ConfigurableInTransitDataAdaptor_swiginit", ConfigurableInTransitDataAdaptor_swiginit, METH_VARARGS, NULL},
	 { "new_DataRequirements", _wrap_new_DataRequirements, METH_NOARGS, "new_DataRequirements() -> DataRequirements"},
	 { "delete_DataRequirements", _wrap_delete_DataRequirements, METH_O, "delete_DataRequirements(DataRequirements self)"},
	 { "DataRequirements_Empty", _wrap_DataRequirements_Empty, METH_O, "DataRequirements_Empty(DataRequirements self) -> bool"},
	 { "DataRequirements_Initialize", _wrap_DataRequirements_Initialize, METH_VARARGS, "\n"
		"DataRequirements_Initialize(DataRequirements self, pugi::xml_node parent) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"parent: pugi::xml_node\n"
		"\n"
		"DataRequirements_Initialize(DataRequirements self, DataAdaptor adaptor, bool structureOnly) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"adaptor: sensei::DataAdaptor *\n"
		"structureOnly: bool\n"
		"\n"
		""},
	 { "DataRequirements_AddRequirement", _wrap_DataRequirements_AddRequirement, METH_VARARGS, "\n"
		"DataRequirements_AddRequirement(DataRequirements self, std::string const & meshName, bool structureOnly) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"structureOnly: bool\n"
		"\n"
		"DataRequirements_AddRequirement(DataRequirements self, std::string const & meshName, int association, vector_string arrays) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrays: std::vector< std::string,std::allocator< std::string > > const &\n"
		"\n"
		"DataRequirements_AddRequirement(DataRequirements self, std::string const & meshName, int association, std::string const & array) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"array: std::string const &\n"
		"\n"
		""},
	 { "DataRequirements_GetRequiredMeshes", _wrap_DataRequirements_GetRequiredMeshes, METH_VARARGS, "\n"
		"DataRequirements_GetRequiredMeshes(DataRequirements self, vector_string meshes) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshes: std::vector< std::string,std::allocator< std::string > > &\n"
		"\n"
		""},
	 { "DataRequirements_GetNumberOfRequiredMeshes", _wrap_DataRequirements_GetNumberOfRequiredMeshes, METH_O, "DataRequirements_GetNumberOfRequiredMeshes(DataRequirements self) -> unsigned int"},
	 { "DataRequirements_GetRequiredMesh", _wrap_DataRequirements_GetRequiredMesh, METH_VARARGS, "\n"
		"DataRequirements_GetRequiredMesh(DataRequirements self, unsigned int id, std::string & mesh) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"mesh: std::string &\n"
		"\n"
		""},
	 { "DataRequirements_GetRequiredArrays", _wrap_DataRequirements_GetRequiredArrays, METH_VARARGS, "\n"
		"DataRequirements_GetRequiredArrays(DataRequirements self, std::string const & meshName, int association, vector_string arrays) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrays: std::vector< std::string,std::allocator< std::string > > &\n"
		"\n"
		""},
	 { "DataRequirements_GetNumberOfRequiredArrays", _wrap_DataRequirements_GetNumberOfRequiredArrays, METH_VARARGS, "\n"
		"DataRequirements_GetNumberOfRequiredArrays(DataRequirements self, std::string const & meshName, int association, unsigned int & nArrays) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"nArrays: unsigned int &\n"
		"\n"
		""},
	 { "DataRequirements_Clear", _wrap_DataRequirements_Clear, METH_O, "DataRequirements_Clear(DataRequirements self)"},
	 { "DataRequirements_GetMeshRequirementsIterator", _wrap_DataRequirements_GetMeshRequirementsIterator, METH_O, "DataRequirements_GetMeshRequirementsIterator(DataRequirements self) -> MeshRequirementsIterator"},
	 { "DataRequirements_GetArrayRequirementsIterator", _wrap_DataRequirements_GetArrayRequirementsIterator, METH_VARARGS, "\n"
		"DataRequirements_GetArrayRequirementsIterator(DataRequirements self, std::string const & meshName) -> ArrayRequirementsIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"\n"
		""},
	 { "DataRequirements_swigregister", DataRequirements_swigregister, METH_O, NULL},
	 { "DataRequirements_swiginit", DataRequirements_swiginit, METH_VARARGS, NULL},
	 { "new_MeshRequirementsIterator", _wrap_new_MeshRequirementsIterator, METH_VARARGS, "\n"
		"MeshRequirementsIterator()\n"
		"new_MeshRequirementsIterator(map_string_bool meshNames) -> MeshRequirementsIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshNames: sensei::DataRequirements::MeshNamesType const &\n"
		"\n"
		""},
	 { "MeshRequirementsIterator_MeshName", _wrap_MeshRequirementsIterator_MeshName, METH_O, "MeshRequirementsIterator_MeshName(MeshRequirementsIterator self) -> std::string const &"},
	 { "MeshRequirementsIterator_StructureOnly", _wrap_MeshRequirementsIterator_StructureOnly, METH_O, "MeshRequirementsIterator_StructureOnly(MeshRequirementsIterator self) -> bool"},
	 { "MeshRequirementsIterator___bool__", _wrap_MeshRequirementsIterator___bool__, METH_O, "MeshRequirementsIterator___bool__(MeshRequirementsIterator self) -> int"},
	 { "MeshRequirementsIterator___iadd__", _wrap_MeshRequirementsIterator___iadd__, METH_VARARGS, "\n"
		"MeshRequirementsIterator___iadd__(MeshRequirementsIterator self, int n) -> MeshRequirementsIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: int\n"
		"\n"
		""},
	 { "delete_MeshRequirementsIterator", _wrap_delete_MeshRequirementsIterator, METH_O, "delete_MeshRequirementsIterator(MeshRequirementsIterator self)"},
	 { "MeshRequirementsIterator_swigregister", MeshRequirementsIterator_swigregister, METH_O, NULL},
	 { "MeshRequirementsIterator_swiginit", MeshRequirementsIterator_swiginit, METH_VARARGS, NULL},
	 { "new_ArrayRequirementsIterator", _wrap_new_ArrayRequirementsIterator, METH_VARARGS, "\n"
		"ArrayRequirementsIterator()\n"
		"new_ArrayRequirementsIterator(map_int_vector_string aa) -> ArrayRequirementsIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"aa: sensei::DataRequirements::AssocArrayMapType const &\n"
		"\n"
		""},
	 { "ArrayRequirementsIterator_SetMode", _wrap_ArrayRequirementsIterator_SetMode, METH_VARARGS, "\n"
		"ArrayRequirementsIterator_SetMode(ArrayRequirementsIterator self, int mode)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mode: int\n"
		"\n"
		""},
	 { "ArrayRequirementsIterator_Association", _wrap_ArrayRequirementsIterator_Association, METH_O, "ArrayRequirementsIterator_Association(ArrayRequirementsIterator self) -> int"},
	 { "ArrayRequirementsIterator_Arrays", _wrap_ArrayRequirementsIterator_Arrays, METH_O, "ArrayRequirementsIterator_Arrays(ArrayRequirementsIterator self) -> vector_string"},
	 { "ArrayRequirementsIterator_Array", _wrap_ArrayRequirementsIterator_Array, METH_O, "ArrayRequirementsIterator_Array(ArrayRequirementsIterator self) -> std::string const &"},
	 { "ArrayRequirementsIterator_NextAssociation", _wrap_ArrayRequirementsIterator_NextAssociation, METH_O, "ArrayRequirementsIterator_NextAssociation(ArrayRequirementsIterator self) -> ArrayRequirementsIterator"},
	 { "ArrayRequirementsIterator_NextArray", _wrap_ArrayRequirementsIterator_NextArray, METH_O, "ArrayRequirementsIterator_NextArray(ArrayRequirementsIterator self) -> ArrayRequirementsIterator"},
	 { "ArrayRequirementsIterator___bool__", _wrap_ArrayRequirementsIterator___bool__, METH_O, "ArrayRequirementsIterator___bool__(ArrayRequirementsIterator self) -> int"},
	 { "ArrayRequirementsIterator___iadd__", _wrap_ArrayRequirementsIterator___iadd__, METH_VARARGS, "\n"
		"ArrayRequirementsIterator___iadd__(ArrayRequirementsIterator self, int n) -> ArrayRequirementsIterator\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n: int\n"
		"\n"
		""},
	 { "delete_ArrayRequirementsIterator", _wrap_delete_ArrayRequirementsIterator, METH_O, "delete_ArrayRequirementsIterator(ArrayRequirementsIterator self)"},
	 { "ArrayRequirementsIterator_swigregister", ArrayRequirementsIterator_swigregister, METH_O, NULL},
	 { "ArrayRequirementsIterator_swiginit", ArrayRequirementsIterator_swiginit, METH_VARARGS, NULL},
	 { "AnalysisAdaptor_IsTypeOf", _wrap_AnalysisAdaptor_IsTypeOf, METH_O, "\n"
		"AnalysisAdaptor_IsTypeOf(char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "AnalysisAdaptor_IsA", _wrap_AnalysisAdaptor_IsA, METH_VARARGS, "\n"
		"AnalysisAdaptor_IsA(AnalysisAdaptor self, char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "AnalysisAdaptor_SafeDownCast", _wrap_AnalysisAdaptor_SafeDownCast, METH_O, "\n"
		"AnalysisAdaptor_SafeDownCast(svtkObjectBase o) -> AnalysisAdaptor\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"o: svtkObjectBase *\n"
		"\n"
		""},
	 { "AnalysisAdaptor_NewInstance", _wrap_AnalysisAdaptor_NewInstance, METH_O, "AnalysisAdaptor_NewInstance(AnalysisAdaptor self) -> AnalysisAdaptor"},
	 { "AnalysisAdaptor_GetNumberOfGenerationsFromBaseType", _wrap_AnalysisAdaptor_GetNumberOfGenerationsFromBaseType, METH_O, "\n"
		"AnalysisAdaptor_GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "AnalysisAdaptor_GetNumberOfGenerationsFromBase", _wrap_AnalysisAdaptor_GetNumberOfGenerationsFromBase, METH_VARARGS, "\n"
		"AnalysisAdaptor_GetNumberOfGenerationsFromBase(AnalysisAdaptor self, char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "AnalysisAdaptor_PrintSelf", _wrap_AnalysisAdaptor_PrintSelf, METH_VARARGS, "\n"
		"AnalysisAdaptor_PrintSelf(AnalysisAdaptor self, ostream & os, svtkIndent indent)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"os: ostream &\n"
		"indent: svtkIndent\n"
		"\n"
		""},
	 { "AnalysisAdaptor_SetVerbose", _wrap_AnalysisAdaptor_SetVerbose, METH_VARARGS, "\n"
		"AnalysisAdaptor_SetVerbose(AnalysisAdaptor self, int val)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"val: int\n"
		"\n"
		""},
	 { "AnalysisAdaptor_GetVerbose", _wrap_AnalysisAdaptor_GetVerbose, METH_O, "AnalysisAdaptor_GetVerbose(AnalysisAdaptor self) -> int"},
	 { "AnalysisAdaptor_SetCommunicator", _wrap_AnalysisAdaptor_SetCommunicator, METH_VARARGS, "\n"
		"AnalysisAdaptor_SetCommunicator(AnalysisAdaptor self, MPI_Comm comm) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"\n"
		""},
	 { "AnalysisAdaptor_GetCommunicator", _wrap_AnalysisAdaptor_GetCommunicator, METH_O, "AnalysisAdaptor_GetCommunicator(AnalysisAdaptor self) -> MPI_Comm"},
	 { "AnalysisAdaptor_Execute", _wrap_AnalysisAdaptor_Execute, METH_VARARGS, "\n"
		"AnalysisAdaptor_Execute(AnalysisAdaptor self, DataAdaptor dataIn, sensei::DataAdaptor ** dataOut) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"dataIn: sensei::DataAdaptor *\n"
		"dataOut: sensei::DataAdaptor **\n"
		"\n"
		""},
	 { "AnalysisAdaptor_Finalize", _wrap_AnalysisAdaptor_Finalize, METH_O, "AnalysisAdaptor_Finalize(AnalysisAdaptor self) -> int"},
	 { "delete_AnalysisAdaptor", _wrap_delete_AnalysisAdaptor, METH_O, "delete_AnalysisAdaptor(AnalysisAdaptor self)"},
	 { "AnalysisAdaptor___str__", _wrap_AnalysisAdaptor___str__, METH_O, "AnalysisAdaptor___str__(AnalysisAdaptor self) -> std::string"},
	 { "AnalysisAdaptor_swigregister", AnalysisAdaptor_swigregister, METH_O, NULL},
	 { "SVTKDataAdaptor_New", _wrap_SVTKDataAdaptor_New, METH_NOARGS, "SVTKDataAdaptor_New() -> SVTKDataAdaptor"},
	 { "SVTKDataAdaptor_IsTypeOf", _wrap_SVTKDataAdaptor_IsTypeOf, METH_O, "\n"
		"SVTKDataAdaptor_IsTypeOf(char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "SVTKDataAdaptor_IsA", _wrap_SVTKDataAdaptor_IsA, METH_VARARGS, "\n"
		"SVTKDataAdaptor_IsA(SVTKDataAdaptor self, char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "SVTKDataAdaptor_SafeDownCast", _wrap_SVTKDataAdaptor_SafeDownCast, METH_O, "\n"
		"SVTKDataAdaptor_SafeDownCast(svtkObjectBase o) -> SVTKDataAdaptor\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"o: svtkObjectBase *\n"
		"\n"
		""},
	 { "SVTKDataAdaptor_NewInstance", _wrap_SVTKDataAdaptor_NewInstance, METH_O, "SVTKDataAdaptor_NewInstance(SVTKDataAdaptor self) -> SVTKDataAdaptor"},
	 { "SVTKDataAdaptor_GetNumberOfGenerationsFromBaseType", _wrap_SVTKDataAdaptor_GetNumberOfGenerationsFromBaseType, METH_O, "\n"
		"SVTKDataAdaptor_GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "SVTKDataAdaptor_GetNumberOfGenerationsFromBase", _wrap_SVTKDataAdaptor_GetNumberOfGenerationsFromBase, METH_VARARGS, "\n"
		"SVTKDataAdaptor_GetNumberOfGenerationsFromBase(SVTKDataAdaptor self, char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "SVTKDataAdaptor_SetDataObject", _wrap_SVTKDataAdaptor_SetDataObject, METH_VARARGS, "\n"
		"SVTKDataAdaptor_SetDataObject(SVTKDataAdaptor self, std::string const & meshName, svtkDataObject mesh)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"mesh: svtkDataObject *\n"
		"\n"
		""},
	 { "SVTKDataAdaptor_GetDataObject", _wrap_SVTKDataAdaptor_GetDataObject, METH_VARARGS, "\n"
		"SVTKDataAdaptor_GetDataObject(SVTKDataAdaptor self, std::string const & meshName, svtkDataObject *& dobj) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"dobj: svtkDataObject *&\n"
		"\n"
		""},
	 { "delete_SVTKDataAdaptor", _wrap_delete_SVTKDataAdaptor, METH_O, "delete_SVTKDataAdaptor(SVTKDataAdaptor self)"},
	 { "new_SVTKDataAdaptor", _wrap_new_SVTKDataAdaptor, METH_NOARGS, "new_SVTKDataAdaptor() -> SVTKDataAdaptor"},
	 { "SVTKDataAdaptor___str__", _wrap_SVTKDataAdaptor___str__, METH_O, "SVTKDataAdaptor___str__(SVTKDataAdaptor self) -> std::string"},
	 { "SVTKDataAdaptor_GetNumberOfMeshes", _wrap_SVTKDataAdaptor_GetNumberOfMeshes, METH_O, "SVTKDataAdaptor_GetNumberOfMeshes(SVTKDataAdaptor self) -> unsigned int"},
	 { "SVTKDataAdaptor_GetMeshMetadata", _wrap_SVTKDataAdaptor_GetMeshMetadata, METH_VARARGS, "\n"
		"SVTKDataAdaptor_GetMeshMetadata(SVTKDataAdaptor self, unsigned int id, MeshMetadataFlags flags=sensei::MeshMetadataFlags()) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"flags: sensei::MeshMetadataFlags\n"
		"\n"
		""},
	 { "SVTKDataAdaptor_GetMesh", _wrap_SVTKDataAdaptor_GetMesh, METH_VARARGS, "\n"
		"SVTKDataAdaptor_GetMesh(SVTKDataAdaptor self, std::string const & meshName, bool structureOnly) -> svtkDataObject\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"structureOnly: bool\n"
		"\n"
		""},
	 { "SVTKDataAdaptor_AddArray", _wrap_SVTKDataAdaptor_AddArray, METH_VARARGS, "\n"
		"SVTKDataAdaptor_AddArray(SVTKDataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, std::string const & arrayName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrayName: std::string const &\n"
		"\n"
		""},
	 { "SVTKDataAdaptor_ReleaseData", _wrap_SVTKDataAdaptor_ReleaseData, METH_O, "SVTKDataAdaptor_ReleaseData(SVTKDataAdaptor self)"},
	 { "SVTKDataAdaptor_swigregister", SVTKDataAdaptor_swigregister, METH_O, NULL},
	 { "SVTKDataAdaptor_swiginit", SVTKDataAdaptor_swiginit, METH_VARARGS, NULL},
	 { "ProgrammableDataAdaptor_New", _wrap_ProgrammableDataAdaptor_New, METH_NOARGS, "ProgrammableDataAdaptor_New() -> ProgrammableDataAdaptor"},
	 { "ProgrammableDataAdaptor_IsTypeOf", _wrap_ProgrammableDataAdaptor_IsTypeOf, METH_O, "\n"
		"ProgrammableDataAdaptor_IsTypeOf(char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_IsA", _wrap_ProgrammableDataAdaptor_IsA, METH_VARARGS, "\n"
		"ProgrammableDataAdaptor_IsA(ProgrammableDataAdaptor self, char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_SafeDownCast", _wrap_ProgrammableDataAdaptor_SafeDownCast, METH_O, "\n"
		"ProgrammableDataAdaptor_SafeDownCast(svtkObjectBase o) -> ProgrammableDataAdaptor\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"o: svtkObjectBase *\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_NewInstance", _wrap_ProgrammableDataAdaptor_NewInstance, METH_O, "ProgrammableDataAdaptor_NewInstance(ProgrammableDataAdaptor self) -> ProgrammableDataAdaptor"},
	 { "ProgrammableDataAdaptor_GetNumberOfGenerationsFromBaseType", _wrap_ProgrammableDataAdaptor_GetNumberOfGenerationsFromBaseType, METH_O, "\n"
		"ProgrammableDataAdaptor_GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_GetNumberOfGenerationsFromBase", _wrap_ProgrammableDataAdaptor_GetNumberOfGenerationsFromBase, METH_VARARGS, "\n"
		"ProgrammableDataAdaptor_GetNumberOfGenerationsFromBase(ProgrammableDataAdaptor self, char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "delete_ProgrammableDataAdaptor", _wrap_delete_ProgrammableDataAdaptor, METH_O, "delete_ProgrammableDataAdaptor(ProgrammableDataAdaptor self)"},
	 { "new_ProgrammableDataAdaptor", _wrap_new_ProgrammableDataAdaptor, METH_NOARGS, "new_ProgrammableDataAdaptor() -> ProgrammableDataAdaptor"},
	 { "ProgrammableDataAdaptor___str__", _wrap_ProgrammableDataAdaptor___str__, METH_O, "ProgrammableDataAdaptor___str__(ProgrammableDataAdaptor self) -> std::string"},
	 { "ProgrammableDataAdaptor_GetNumberOfMeshes", _wrap_ProgrammableDataAdaptor_GetNumberOfMeshes, METH_O, "ProgrammableDataAdaptor_GetNumberOfMeshes(ProgrammableDataAdaptor self) -> unsigned int"},
	 { "ProgrammableDataAdaptor_GetMeshMetadata", _wrap_ProgrammableDataAdaptor_GetMeshMetadata, METH_VARARGS, "\n"
		"ProgrammableDataAdaptor_GetMeshMetadata(ProgrammableDataAdaptor self, unsigned int id, MeshMetadataFlags flags=sensei::MeshMetadataFlags()) -> metadata_ptr\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"id: unsigned int\n"
		"flags: sensei::MeshMetadataFlags\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_GetMesh", _wrap_ProgrammableDataAdaptor_GetMesh, METH_VARARGS, "\n"
		"ProgrammableDataAdaptor_GetMesh(ProgrammableDataAdaptor self, std::string const & meshName, bool structureOnly) -> svtkDataObject\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"meshName: std::string const &\n"
		"structureOnly: bool\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_AddArray", _wrap_ProgrammableDataAdaptor_AddArray, METH_VARARGS, "\n"
		"ProgrammableDataAdaptor_AddArray(ProgrammableDataAdaptor self, svtkDataObject mesh, std::string const & meshName, int association, std::string const & arrayName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"mesh: svtkDataObject *\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrayName: std::string const &\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_ReleaseData", _wrap_ProgrammableDataAdaptor_ReleaseData, METH_O, "ProgrammableDataAdaptor_ReleaseData(ProgrammableDataAdaptor self)"},
	 { "ProgrammableDataAdaptor_SetGetNumberOfMeshesCallback", _wrap_ProgrammableDataAdaptor_SetGetNumberOfMeshesCallback, METH_VARARGS, "\n"
		"ProgrammableDataAdaptor_SetGetNumberOfMeshesCallback(ProgrammableDataAdaptor self, PyObject * f)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"f: PyObject *\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_SetGetMeshMetadataCallback", _wrap_ProgrammableDataAdaptor_SetGetMeshMetadataCallback, METH_VARARGS, "\n"
		"ProgrammableDataAdaptor_SetGetMeshMetadataCallback(ProgrammableDataAdaptor self, PyObject * f)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"f: PyObject *\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_SetGetMeshCallback", _wrap_ProgrammableDataAdaptor_SetGetMeshCallback, METH_VARARGS, "\n"
		"ProgrammableDataAdaptor_SetGetMeshCallback(ProgrammableDataAdaptor self, PyObject * f)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"f: PyObject *\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_SetAddArrayCallback", _wrap_ProgrammableDataAdaptor_SetAddArrayCallback, METH_VARARGS, "\n"
		"ProgrammableDataAdaptor_SetAddArrayCallback(ProgrammableDataAdaptor self, PyObject * f)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"f: PyObject *\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_SetReleaseDataCallback", _wrap_ProgrammableDataAdaptor_SetReleaseDataCallback, METH_VARARGS, "\n"
		"ProgrammableDataAdaptor_SetReleaseDataCallback(ProgrammableDataAdaptor self, PyObject * f)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"f: PyObject *\n"
		"\n"
		""},
	 { "ProgrammableDataAdaptor_swigregister", ProgrammableDataAdaptor_swigregister, METH_O, NULL},
	 { "ProgrammableDataAdaptor_swiginit", ProgrammableDataAdaptor_swiginit, METH_VARARGS, NULL},
	 { "ConfigurableAnalysis_New", _wrap_ConfigurableAnalysis_New, METH_NOARGS, "ConfigurableAnalysis_New() -> ConfigurableAnalysis"},
	 { "ConfigurableAnalysis_IsTypeOf", _wrap_ConfigurableAnalysis_IsTypeOf, METH_O, "\n"
		"ConfigurableAnalysis_IsTypeOf(char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ConfigurableAnalysis_IsA", _wrap_ConfigurableAnalysis_IsA, METH_VARARGS, "\n"
		"ConfigurableAnalysis_IsA(ConfigurableAnalysis self, char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ConfigurableAnalysis_SafeDownCast", _wrap_ConfigurableAnalysis_SafeDownCast, METH_O, "\n"
		"ConfigurableAnalysis_SafeDownCast(svtkObjectBase o) -> ConfigurableAnalysis\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"o: svtkObjectBase *\n"
		"\n"
		""},
	 { "ConfigurableAnalysis_NewInstance", _wrap_ConfigurableAnalysis_NewInstance, METH_O, "ConfigurableAnalysis_NewInstance(ConfigurableAnalysis self) -> ConfigurableAnalysis"},
	 { "ConfigurableAnalysis_GetNumberOfGenerationsFromBaseType", _wrap_ConfigurableAnalysis_GetNumberOfGenerationsFromBaseType, METH_O, "\n"
		"ConfigurableAnalysis_GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ConfigurableAnalysis_GetNumberOfGenerationsFromBase", _wrap_ConfigurableAnalysis_GetNumberOfGenerationsFromBase, METH_VARARGS, "\n"
		"ConfigurableAnalysis_GetNumberOfGenerationsFromBase(ConfigurableAnalysis self, char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "ConfigurableAnalysis_PrintSelf", _wrap_ConfigurableAnalysis_PrintSelf, METH_VARARGS, "\n"
		"ConfigurableAnalysis_PrintSelf(ConfigurableAnalysis self, ostream & os, svtkIndent indent)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"os: ostream &\n"
		"indent: svtkIndent\n"
		"\n"
		""},
	 { "ConfigurableAnalysis_SetCommunicator", _wrap_ConfigurableAnalysis_SetCommunicator, METH_VARARGS, "\n"
		"ConfigurableAnalysis_SetCommunicator(ConfigurableAnalysis self, MPI_Comm comm) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"comm: MPI_Comm\n"
		"\n"
		""},
	 { "ConfigurableAnalysis_Initialize", _wrap_ConfigurableAnalysis_Initialize, METH_VARARGS, "\n"
		"ConfigurableAnalysis_Initialize(ConfigurableAnalysis self, std::string const & filename) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename: std::string const &\n"
		"\n"
		"ConfigurableAnalysis_Initialize(ConfigurableAnalysis self, pugi::xml_node const & root) -> int\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"root: pugi::xml_node const &\n"
		"\n"
		""},
	 { "ConfigurableAnalysis_Finalize", _wrap_ConfigurableAnalysis_Finalize, METH_O, "ConfigurableAnalysis_Finalize(ConfigurableAnalysis self) -> int"},
	 { "delete_ConfigurableAnalysis", _wrap_delete_ConfigurableAnalysis, METH_O, "delete_ConfigurableAnalysis(ConfigurableAnalysis self)"},
	 { "new_ConfigurableAnalysis", _wrap_new_ConfigurableAnalysis, METH_NOARGS, "new_ConfigurableAnalysis() -> ConfigurableAnalysis"},
	 { "ConfigurableAnalysis___str__", _wrap_ConfigurableAnalysis___str__, METH_O, "ConfigurableAnalysis___str__(ConfigurableAnalysis self) -> std::string"},
	 { "ConfigurableAnalysis_Execute", _wrap_ConfigurableAnalysis_Execute, METH_VARARGS, "\n"
		"ConfigurableAnalysis_Execute(ConfigurableAnalysis self, DataAdaptor daIn) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"daIn: sensei::DataAdaptor *\n"
		"\n"
		""},
	 { "ConfigurableAnalysis_swigregister", ConfigurableAnalysis_swigregister, METH_O, NULL},
	 { "ConfigurableAnalysis_swiginit", ConfigurableAnalysis_swiginit, METH_VARARGS, NULL},
	 { "Histogram_New", _wrap_Histogram_New, METH_NOARGS, "Histogram_New() -> Histogram"},
	 { "Histogram_IsTypeOf", _wrap_Histogram_IsTypeOf, METH_O, "\n"
		"Histogram_IsTypeOf(char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "Histogram_IsA", _wrap_Histogram_IsA, METH_VARARGS, "\n"
		"Histogram_IsA(Histogram self, char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "Histogram_SafeDownCast", _wrap_Histogram_SafeDownCast, METH_O, "\n"
		"Histogram_SafeDownCast(svtkObjectBase o) -> Histogram\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"o: svtkObjectBase *\n"
		"\n"
		""},
	 { "Histogram_NewInstance", _wrap_Histogram_NewInstance, METH_O, "Histogram_NewInstance(Histogram self) -> Histogram"},
	 { "Histogram_GetNumberOfGenerationsFromBaseType", _wrap_Histogram_GetNumberOfGenerationsFromBaseType, METH_O, "\n"
		"Histogram_GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "Histogram_GetNumberOfGenerationsFromBase", _wrap_Histogram_GetNumberOfGenerationsFromBase, METH_VARARGS, "\n"
		"Histogram_GetNumberOfGenerationsFromBase(Histogram self, char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "Histogram_Initialize", _wrap_Histogram_Initialize, METH_VARARGS, "\n"
		"Histogram_Initialize(Histogram self, int bins, std::string const & meshName, int association, std::string const & arrayName, std::string const & fileName)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bins: int\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrayName: std::string const &\n"
		"fileName: std::string const &\n"
		"\n"
		""},
	 { "Histogram_Execute", _wrap_Histogram_Execute, METH_VARARGS, "\n"
		"Histogram_Execute(Histogram self, DataAdaptor data, sensei::DataAdaptor ** arg3) -> bool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"data: sensei::DataAdaptor *\n"
		"arg3: sensei::DataAdaptor **\n"
		"\n"
		""},
	 { "Histogram_Finalize", _wrap_Histogram_Finalize, METH_O, "Histogram_Finalize(Histogram self) -> int"},
	 { "delete_Histogram", _wrap_delete_Histogram, METH_O, "delete_Histogram(Histogram self)"},
	 { "new_Histogram", _wrap_new_Histogram, METH_NOARGS, "new_Histogram() -> Histogram"},
	 { "Histogram___str__", _wrap_Histogram___str__, METH_O, "Histogram___str__(Histogram self) -> std::string"},
	 { "Histogram_swigregister", Histogram_swigregister, METH_O, NULL},
	 { "Histogram_swiginit", Histogram_swiginit, METH_VARARGS, NULL},
	 { "Autocorrelation_New", _wrap_Autocorrelation_New, METH_NOARGS, "Autocorrelation_New() -> Autocorrelation"},
	 { "Autocorrelation_IsTypeOf", _wrap_Autocorrelation_IsTypeOf, METH_O, "\n"
		"Autocorrelation_IsTypeOf(char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "Autocorrelation_IsA", _wrap_Autocorrelation_IsA, METH_VARARGS, "\n"
		"Autocorrelation_IsA(Autocorrelation self, char const * type) -> svtkTypeBool\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "Autocorrelation_SafeDownCast", _wrap_Autocorrelation_SafeDownCast, METH_O, "\n"
		"Autocorrelation_SafeDownCast(svtkObjectBase o) -> Autocorrelation\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"o: svtkObjectBase *\n"
		"\n"
		""},
	 { "Autocorrelation_NewInstance", _wrap_Autocorrelation_NewInstance, METH_O, "Autocorrelation_NewInstance(Autocorrelation self) -> Autocorrelation"},
	 { "Autocorrelation_GetNumberOfGenerationsFromBaseType", _wrap_Autocorrelation_GetNumberOfGenerationsFromBaseType, METH_O, "\n"
		"Autocorrelation_GetNumberOfGenerationsFromBaseType(char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "Autocorrelation_GetNumberOfGenerationsFromBase", _wrap_Autocorrelation_GetNumberOfGenerationsFromBase, METH_VARARGS, "\n"
		"Autocorrelation_GetNumberOfGenerationsFromBase(Autocorrelation self, char const * type) -> svtkIdType\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"type: char const *\n"
		"\n"
		""},
	 { "Autocorrelation_Initialize", _wrap_Autocorrelation_Initialize, METH_VARARGS, "\n"
		"Autocorrelation_Initialize(Autocorrelation self, size_t window, std::string const & meshName, int association, std::string const & arrayName, size_t kMax, int numThreads=1)\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"window: size_t\n"
		"meshName: std::string const &\n"
		"association: int\n"
		"arrayName: std::string const &\n"
		"kMax: size_t\n"
		"numThreads: int\n"
		"\n"
		""},
	 { "Autocorrelation_Finalize", _wrap_Autocorrelation_Finalize, METH_O, "Autocorrelation_Finalize(Autocorrelation self) -> int"},
	 { "delete_Autocorrelation", _wrap_delete_Autocorrelation, METH_O, "delete_Autocorrelation(Autocorrelation self)"},
	 { "new_Autocorrelation", _wrap_new_Autocorrelation, METH_NOARGS, "new_Autocorrelation() -> Autocorrelation"},
	 { "Autocorrelation___str__", _wrap_Autocorrelation___str__, METH_O, "Autocorrelation___str__(Autocorrelation self) -> std::string"},
	 { "Autocorrelation_Execute", _wrap_Autocorrelation_Execute, METH_VARARGS, "\n"
		"Autocorrelation_Execute(Autocorrelation self, DataAdaptor daIn) -> PyObject *\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"daIn: sensei::DataAdaptor *\n"
		"\n"
		""},
	 { "Autocorrelation_swigregister", Autocorrelation_swigregister, METH_O, NULL},
	 { "Autocorrelation_swiginit", Autocorrelation_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_p_sensei__ConfigurableInTransitDataAdaptorTo_p_p_sensei__DataAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::DataAdaptor **) (sensei::InTransitDataAdaptor *) ((sensei::ConfigurableInTransitDataAdaptor **) x));
}
static void *_p_p_sensei__InTransitDataAdaptorTo_p_p_sensei__DataAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::DataAdaptor **)  ((sensei::InTransitDataAdaptor **) x));
}
static void *_p_p_sensei__ProgrammableDataAdaptorTo_p_p_sensei__DataAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::DataAdaptor **)  ((sensei::ProgrammableDataAdaptor **) x));
}
static void *_p_p_sensei__SVTKDataAdaptorTo_p_p_sensei__DataAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::DataAdaptor **)  ((sensei::SVTKDataAdaptor **) x));
}
static void *_p_p_svtkCompositeDataSetTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **)  ((svtkCompositeDataSet **) x));
}
static void *_p_p_svtkDataObjectTreeTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkCompositeDataSet *) ((svtkDataObjectTree **) x));
}
static void *_p_p_svtkDataSetTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **)  ((svtkDataSet **) x));
}
static void *_p_p_svtkImageDataTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkDataSet *) ((svtkImageData **) x));
}
static void *_p_p_svtkMultiBlockDataSetTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkCompositeDataSet *)(svtkDataObjectTree *) ((svtkMultiBlockDataSet **) x));
}
static void *_p_p_svtkNonOverlappingAMRTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkCompositeDataSet *)(svtkUniformGridAMR *) ((svtkNonOverlappingAMR **) x));
}
static void *_p_p_svtkOverlappingAMRTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkCompositeDataSet *)(svtkUniformGridAMR *) ((svtkOverlappingAMR **) x));
}
static void *_p_p_svtkPointSetTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkDataSet *) ((svtkPointSet **) x));
}
static void *_p_p_svtkPolyDataTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkDataSet *)(svtkPointSet *) ((svtkPolyData **) x));
}
static void *_p_p_svtkRectilinearGridTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkDataSet *) ((svtkRectilinearGrid **) x));
}
static void *_p_p_svtkStructuredGridTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkDataSet *)(svtkPointSet *) ((svtkStructuredGrid **) x));
}
static void *_p_p_svtkTableTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **)  ((svtkTable **) x));
}
static void *_p_p_svtkUniformGridTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkDataSet *)(svtkImageData *) ((svtkUniformGrid **) x));
}
static void *_p_p_svtkUniformGridAMRTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkCompositeDataSet *) ((svtkUniformGridAMR **) x));
}
static void *_p_p_svtkUnstructuredGridTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkDataSet *)(svtkPointSet *)(svtkUnstructuredGridBase *) ((svtkUnstructuredGrid **) x));
}
static void *_p_p_svtkUnstructuredGridBaseTo_p_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject **) (svtkDataSet *)(svtkPointSet *) ((svtkUnstructuredGridBase **) x));
}
static void *_p_sensei__AutocorrelationTo_p_sensei__AnalysisAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::AnalysisAdaptor *)  ((sensei::Autocorrelation *) x));
}
static void *_p_sensei__ConfigurableAnalysisTo_p_sensei__AnalysisAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::AnalysisAdaptor *)  ((sensei::ConfigurableAnalysis *) x));
}
static void *_p_sensei__HistogramTo_p_sensei__AnalysisAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::AnalysisAdaptor *)  ((sensei::Histogram *) x));
}
static void *_p_sensei__ConfigurableInTransitDataAdaptorTo_p_sensei__DataAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::DataAdaptor *) (sensei::InTransitDataAdaptor *) ((sensei::ConfigurableInTransitDataAdaptor *) x));
}
static void *_p_sensei__InTransitDataAdaptorTo_p_sensei__DataAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::DataAdaptor *)  ((sensei::InTransitDataAdaptor *) x));
}
static void *_p_sensei__ProgrammableDataAdaptorTo_p_sensei__DataAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::DataAdaptor *)  ((sensei::ProgrammableDataAdaptor *) x));
}
static void *_p_sensei__SVTKDataAdaptorTo_p_sensei__DataAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::DataAdaptor *)  ((sensei::SVTKDataAdaptor *) x));
}
static void *_p_sensei__ConfigurableInTransitDataAdaptorTo_p_sensei__InTransitDataAdaptor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::InTransitDataAdaptor *)  ((sensei::ConfigurableInTransitDataAdaptor *) x));
}
static void *_p_sensei__BlockPartitionerTo_p_sensei__Partitioner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::Partitioner *)  ((sensei::BlockPartitioner *) x));
}
static void *_p_sensei__ConfigurablePartitionerTo_p_sensei__Partitioner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::Partitioner *)  ((sensei::ConfigurablePartitioner *) x));
}
static void *_p_sensei__IsoSurfacePartitionerTo_p_sensei__Partitioner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::Partitioner *)  ((sensei::IsoSurfacePartitioner *) x));
}
static void *_p_sensei__MappedPartitionerTo_p_sensei__Partitioner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::Partitioner *)  ((sensei::MappedPartitioner *) x));
}
static void *_p_sensei__PlanarPartitionerTo_p_sensei__Partitioner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::Partitioner *)  ((sensei::PlanarPartitioner *) x));
}
static void *_p_sensei__PlanarSlicePartitionerTo_p_sensei__Partitioner(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((sensei::Partitioner *)  ((sensei::PlanarSlicePartitioner *) x));
}
static void *_p_std__shared_ptrT_sensei__BlockPartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< sensei::Partitioner >(*(std::shared_ptr< sensei::BlockPartitioner > *)x);
}
static void *_p_std__shared_ptrT_sensei__ConfigurablePartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< sensei::Partitioner >(*(std::shared_ptr< sensei::ConfigurablePartitioner > *)x);
}
static void *_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< sensei::Partitioner >(*(std::shared_ptr< sensei::IsoSurfacePartitioner > *)x);
}
static void *_p_std__shared_ptrT_sensei__MappedPartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< sensei::Partitioner >(*(std::shared_ptr< sensei::MappedPartitioner > *)x);
}
static void *_p_std__shared_ptrT_sensei__PlanarPartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< sensei::Partitioner >(*(std::shared_ptr< sensei::PlanarPartitioner > *)x);
}
static void *_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new std::shared_ptr< sensei::Partitioner >(*(std::shared_ptr< sensei::PlanarSlicePartitioner > *)x);
}
static void *_p_svtkCompositeDataSetTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *)  ((svtkCompositeDataSet *) x));
}
static void *_p_svtkDataObjectTreeTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkCompositeDataSet *) ((svtkDataObjectTree *) x));
}
static void *_p_svtkDataSetTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *)  ((svtkDataSet *) x));
}
static void *_p_svtkImageDataTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkDataSet *) ((svtkImageData *) x));
}
static void *_p_svtkMultiBlockDataSetTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkCompositeDataSet *)(svtkDataObjectTree *) ((svtkMultiBlockDataSet *) x));
}
static void *_p_svtkNonOverlappingAMRTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkCompositeDataSet *)(svtkUniformGridAMR *) ((svtkNonOverlappingAMR *) x));
}
static void *_p_svtkOverlappingAMRTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkCompositeDataSet *)(svtkUniformGridAMR *) ((svtkOverlappingAMR *) x));
}
static void *_p_svtkPointSetTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkDataSet *) ((svtkPointSet *) x));
}
static void *_p_svtkPolyDataTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkDataSet *)(svtkPointSet *) ((svtkPolyData *) x));
}
static void *_p_svtkRectilinearGridTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkDataSet *) ((svtkRectilinearGrid *) x));
}
static void *_p_svtkStructuredGridTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkDataSet *)(svtkPointSet *) ((svtkStructuredGrid *) x));
}
static void *_p_svtkTableTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *)  ((svtkTable *) x));
}
static void *_p_svtkUniformGridTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkDataSet *)(svtkImageData *) ((svtkUniformGrid *) x));
}
static void *_p_svtkUniformGridAMRTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkCompositeDataSet *) ((svtkUniformGridAMR *) x));
}
static void *_p_svtkUnstructuredGridTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkDataSet *)(svtkPointSet *)(svtkUnstructuredGridBase *) ((svtkUnstructuredGrid *) x));
}
static void *_p_svtkUnstructuredGridBaseTo_p_svtkDataObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkDataObject *) (svtkDataSet *)(svtkPointSet *) ((svtkUnstructuredGridBase *) x));
}
static void *_p_sensei__AnalysisAdaptorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *)  ((sensei::AnalysisAdaptor *) x));
}
static void *_p_sensei__AutocorrelationTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (sensei::AnalysisAdaptor *) ((sensei::Autocorrelation *) x));
}
static void *_p_sensei__ConfigurableAnalysisTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (sensei::AnalysisAdaptor *) ((sensei::ConfigurableAnalysis *) x));
}
static void *_p_sensei__ConfigurableInTransitDataAdaptorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (sensei::DataAdaptor *)(sensei::InTransitDataAdaptor *) ((sensei::ConfigurableInTransitDataAdaptor *) x));
}
static void *_p_sensei__DataAdaptorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *)  ((sensei::DataAdaptor *) x));
}
static void *_p_sensei__HistogramTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (sensei::AnalysisAdaptor *) ((sensei::Histogram *) x));
}
static void *_p_sensei__InTransitDataAdaptorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (sensei::DataAdaptor *) ((sensei::InTransitDataAdaptor *) x));
}
static void *_p_sensei__ProgrammableDataAdaptorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (sensei::DataAdaptor *) ((sensei::ProgrammableDataAdaptor *) x));
}
static void *_p_sensei__SVTKDataAdaptorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (sensei::DataAdaptor *) ((sensei::SVTKDataAdaptor *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_char_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< char >,char > *) ((svtkAOSDataArrayTemplate< char > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_double_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< double >,double > *) ((svtkAOSDataArrayTemplate< double > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_float_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< float >,float > *) ((svtkAOSDataArrayTemplate< float > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_int_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< int >,int > *) ((svtkAOSDataArrayTemplate< int > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_long_long_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< long long >,long long > *) ((svtkAOSDataArrayTemplate< long long > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_long_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< long >,long > *) ((svtkAOSDataArrayTemplate< long > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_short_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< short >,short > *) ((svtkAOSDataArrayTemplate< short > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_signed_char_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< signed char >,signed char > *) ((svtkAOSDataArrayTemplate< signed char > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_unsigned_char_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned char >,unsigned char > *) ((svtkAOSDataArrayTemplate< unsigned char > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_unsigned_int_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned int >,unsigned int > *) ((svtkAOSDataArrayTemplate< unsigned int > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_unsigned_long_long_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned long long >,unsigned long long > *) ((svtkAOSDataArrayTemplate< unsigned long long > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_unsigned_long_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned long >,unsigned long > *) ((svtkAOSDataArrayTemplate< unsigned long > *) x));
}
static void *_p_svtkAOSDataArrayTemplateT_unsigned_short_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned short >,unsigned short > *) ((svtkAOSDataArrayTemplate< unsigned short > *) x));
}
static void *_p_svtkAbstractArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *) ((svtkAbstractArray *) x));
}
static void *_p_svtkArrayIteratorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *) ((svtkArrayIterator *) x));
}
static void *_p_svtkBitArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkBitArray *) x));
}
static void *_p_svtkBitArrayIteratorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkArrayIterator *) ((svtkBitArrayIterator *) x));
}
static void *_p_svtkCellArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *) ((svtkCellArray *) x));
}
static void *_p_svtkCellDataTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkFieldData *)(svtkDataSetAttributes *) ((svtkCellData *) x));
}
static void *_p_svtkCellTypesTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *) ((svtkCellTypes *) x));
}
static void *_p_svtkCharArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< char >,char > *)(svtkAOSDataArrayTemplate< char > *) ((svtkCharArray *) x));
}
static void *_p_svtkCollectionTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *) ((svtkCollection *) x));
}
static void *_p_svtkCollectionIteratorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *) ((svtkCollectionIterator *) x));
}
static void *_p_svtkCompositeDataIteratorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *) ((svtkCompositeDataIterator *) x));
}
static void *_p_svtkCompositeDataSetTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *) ((svtkCompositeDataSet *) x));
}
static void *_p_svtkDataArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *) ((svtkDataArray *) x));
}
static void *_p_svtkDataArrayCollectionTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkCollection *) ((svtkDataArrayCollection *) x));
}
static void *_p_svtkDataArrayCollectionIteratorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkCollectionIterator *) ((svtkDataArrayCollectionIterator *) x));
}
static void *_p_svtkDataObjectTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *) ((svtkDataObject *) x));
}
static void *_p_svtkDataObjectTreeTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkCompositeDataSet *) ((svtkDataObjectTree *) x));
}
static void *_p_svtkDataObjectTreeIteratorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkCompositeDataIterator *) ((svtkDataObjectTreeIterator *) x));
}
static void *_p_svtkDataSetTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *) ((svtkDataSet *) x));
}
static void *_p_svtkDataSetAttributesTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkFieldData *) ((svtkDataSetAttributes *) x));
}
static void *_p_svtkDoubleArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< double >,double > *)(svtkAOSDataArrayTemplate< double > *) ((svtkDoubleArray *) x));
}
static void *_p_svtkFieldDataTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *) ((svtkFieldData *) x));
}
static void *_p_svtkFloatArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< float >,float > *)(svtkAOSDataArrayTemplate< float > *) ((svtkFloatArray *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_char_t_char_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< char >,char > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_double_t_double_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< double >,double > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_float_t_float_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< float >,float > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_int_t_int_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< int >,int > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_long_t_long_long_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< long long >,long long > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_t_long_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< long >,long > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_short_t_short_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< short >,short > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_signed_char_t_signed_char_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< signed char >,signed char > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_char_t_unsigned_char_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned char >,unsigned char > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_int_t_unsigned_int_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned int >,unsigned int > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_long_t_unsigned_long_long_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned long long >,unsigned long long > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_t_unsigned_long_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned long >,unsigned long > *) x));
}
static void *_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_short_t_unsigned_short_tTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *) ((svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned short >,unsigned short > *) x));
}
static void *_p_svtkIdTypeArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< long long >,long long > *)(svtkAOSDataArrayTemplate< long long > *) ((svtkIdTypeArray *) x));
}
static void *_p_svtkImageDataTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkDataSet *) ((svtkImageData *) x));
}
static void *_p_svtkIntArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< int >,int > *)(svtkAOSDataArrayTemplate< int > *) ((svtkIntArray *) x));
}
static void *_p_svtkLongArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< long >,long > *)(svtkAOSDataArrayTemplate< long > *) ((svtkLongArray *) x));
}
static void *_p_svtkLongLongArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< long long >,long long > *)(svtkAOSDataArrayTemplate< long long > *) ((svtkLongLongArray *) x));
}
static void *_p_svtkMultiBlockDataSetTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkCompositeDataSet *)(svtkDataObjectTree *) ((svtkMultiBlockDataSet *) x));
}
static void *_p_svtkNonOverlappingAMRTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkCompositeDataSet *)(svtkUniformGridAMR *) ((svtkNonOverlappingAMR *) x));
}
static void *_p_svtkObjectTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *)  ((svtkObject *) x));
}
static void *_p_svtkOverlappingAMRTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkCompositeDataSet *)(svtkUniformGridAMR *) ((svtkOverlappingAMR *) x));
}
static void *_p_svtkPointDataTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkFieldData *)(svtkDataSetAttributes *) ((svtkPointData *) x));
}
static void *_p_svtkPointSetTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkDataSet *) ((svtkPointSet *) x));
}
static void *_p_svtkPointsTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *) ((svtkPoints *) x));
}
static void *_p_svtkPolyDataTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkDataSet *)(svtkPointSet *) ((svtkPolyData *) x));
}
static void *_p_svtkRectilinearGridTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkDataSet *) ((svtkRectilinearGrid *) x));
}
static void *_p_svtkShortArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< short >,short > *)(svtkAOSDataArrayTemplate< short > *) ((svtkShortArray *) x));
}
static void *_p_svtkSignedCharArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< signed char >,signed char > *)(svtkAOSDataArrayTemplate< signed char > *) ((svtkSignedCharArray *) x));
}
static void *_p_svtkStructuredGridTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkDataSet *)(svtkPointSet *) ((svtkStructuredGrid *) x));
}
static void *_p_svtkTableTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *) ((svtkTable *) x));
}
static void *_p_svtkUniformGridTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkDataSet *)(svtkImageData *) ((svtkUniformGrid *) x));
}
static void *_p_svtkUniformGridAMRTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkCompositeDataSet *) ((svtkUniformGridAMR *) x));
}
static void *_p_svtkUniformGridAMRDataIteratorTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkCompositeDataIterator *) ((svtkUniformGridAMRDataIterator *) x));
}
static void *_p_svtkUnsignedCharArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned char >,unsigned char > *)(svtkAOSDataArrayTemplate< unsigned char > *) ((svtkUnsignedCharArray *) x));
}
static void *_p_svtkUnsignedIntArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned int >,unsigned int > *)(svtkAOSDataArrayTemplate< unsigned int > *) ((svtkUnsignedIntArray *) x));
}
static void *_p_svtkUnsignedLongArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned long >,unsigned long > *)(svtkAOSDataArrayTemplate< unsigned long > *) ((svtkUnsignedLongArray *) x));
}
static void *_p_svtkUnsignedLongLongArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned long long >,unsigned long long > *)(svtkAOSDataArrayTemplate< unsigned long long > *) ((svtkUnsignedLongLongArray *) x));
}
static void *_p_svtkUnsignedShortArrayTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkAbstractArray *)(svtkDataArray *)(svtkGenericDataArray< svtkAOSDataArrayTemplate< unsigned short >,unsigned short > *)(svtkAOSDataArrayTemplate< unsigned short > *) ((svtkUnsignedShortArray *) x));
}
static void *_p_svtkUnstructuredGridTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkDataSet *)(svtkPointSet *)(svtkUnstructuredGridBase *) ((svtkUnstructuredGrid *) x));
}
static void *_p_svtkUnstructuredGridBaseTo_p_svtkObjectBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((svtkObjectBase *) (svtkObject *)(svtkDataObject *)(svtkDataSet *)(svtkPointSet *) ((svtkUnstructuredGridBase *) x));
}
static swig_type_info _swigt__p_AddArrayFunction = {"_p_AddArrayFunction", "AddArrayFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayType32 = {"_p_ArrayType32", "ArrayType32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayType64 = {"_p_ArrayType64", "ArrayType64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AssocArrayMapType = {"_p_AssocArrayMapType", "AssocArrayMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FieldList = {"_p_FieldList", "FieldList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GetMeshFunction = {"_p_GetMeshFunction", "GetMeshFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GetMeshMetadataFunction = {"_p_GetMeshMetadataFunction", "GetMeshMetadataFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GetNumberOfMeshesFunction = {"_p_GetNumberOfMeshesFunction", "GetNumberOfMeshesFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InputArrayList = {"_p_InputArrayList", "InputArrayList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MPI_Comm = {"_p_MPI_Comm", "MPI_Comm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MeshArrayMapType = {"_p_MeshArrayMapType", "MeshArrayMapType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MeshNamesType = {"_p_MeshNamesType", "MeshNamesType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReleaseDataFunction = {"_p_ReleaseDataFunction", "ReleaseDataFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SVTKCellType = {"_p_SVTKCellType", "SVTKCellType *|enum SVTKCellType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SelfType = {"_p_SelfType", "SelfType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StorageArrayList = {"_p_StorageArrayList", "StorageArrayList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Superclass = {"_p_Superclass", "Superclass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "svtkTypeFloat64 *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "svtkTypeFloat32 *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "svtkTypeBool *|svtkTypeInt32 *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "svtkIdType *|svtkTypeInt64 *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ostream = {"_p_ostream", "ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sensei__DataAdaptor = {"_p_p_sensei__DataAdaptor", "sensei::DataAdaptor **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_sensei__ConfigurableInTransitDataAdaptor = {"_p_p_sensei__ConfigurableInTransitDataAdaptor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_sensei__InTransitDataAdaptor = {"_p_p_sensei__InTransitDataAdaptor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_sensei__ProgrammableDataAdaptor = {"_p_p_sensei__ProgrammableDataAdaptor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_sensei__SVTKDataAdaptor = {"_p_p_sensei__SVTKDataAdaptor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkDataObject = {"_p_p_svtkDataObject", "svtkDataObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_svtkCompositeDataSet = {"_p_p_svtkCompositeDataSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkDataObjectTree = {"_p_p_svtkDataObjectTree", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkDataSet = {"_p_p_svtkDataSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkImageData = {"_p_p_svtkImageData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkMultiBlockDataSet = {"_p_p_svtkMultiBlockDataSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkNonOverlappingAMR = {"_p_p_svtkNonOverlappingAMR", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkOverlappingAMR = {"_p_p_svtkOverlappingAMR", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkPointSet = {"_p_p_svtkPointSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkPolyData = {"_p_p_svtkPolyData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkRectilinearGrid = {"_p_p_svtkRectilinearGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkStructuredGrid = {"_p_p_svtkStructuredGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkTable = {"_p_p_svtkTable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkUniformGrid = {"_p_p_svtkUniformGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkUniformGridAMR = {"_p_p_svtkUniformGridAMR", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkUnstructuredGrid = {"_p_p_svtkUnstructuredGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_svtkUnstructuredGridBase = {"_p_p_svtkUnstructuredGridBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_pugi__xml_node = {"_p_pugi__xml_node", "pugi::xml_node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__AnalysisAdaptor = {"_p_sensei__AnalysisAdaptor", "sensei::AnalysisAdaptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__ArrayRequirementsIterator = {"_p_sensei__ArrayRequirementsIterator", "sensei::ArrayRequirementsIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__Autocorrelation = {"_p_sensei__Autocorrelation", "sensei::Autocorrelation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__BinaryStream = {"_p_sensei__BinaryStream", "sensei::BinaryStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__BlockPartitioner = {"_p_sensei__BlockPartitioner", "sensei::BlockPartitioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__ConfigurableAnalysis = {"_p_sensei__ConfigurableAnalysis", "sensei::ConfigurableAnalysis *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__ConfigurableInTransitDataAdaptor = {"_p_sensei__ConfigurableInTransitDataAdaptor", "sensei::ConfigurableInTransitDataAdaptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__ConfigurablePartitioner = {"_p_sensei__ConfigurablePartitioner", "sensei::ConfigurablePartitioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__DataAdaptor = {"_p_sensei__DataAdaptor", "sensei::DataAdaptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__DataRequirements = {"_p_sensei__DataRequirements", "sensei::DataRequirements *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__Histogram = {"_p_sensei__Histogram", "sensei::Histogram *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__InTransitDataAdaptor = {"_p_sensei__InTransitDataAdaptor", "sensei::InTransitDataAdaptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__IsoSurfacePartitioner = {"_p_sensei__IsoSurfacePartitioner", "sensei::IsoSurfacePartitioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__MappedPartitioner = {"_p_sensei__MappedPartitioner", "sensei::MappedPartitioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__MeshMetadata = {"_p_sensei__MeshMetadata", "sensei::MeshMetadata *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__MeshMetadataFlags = {"_p_sensei__MeshMetadataFlags", "sensei::MeshMetadataFlags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__MeshRequirementsIterator = {"_p_sensei__MeshRequirementsIterator", "sensei::MeshRequirementsIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__Partitioner = {"_p_sensei__Partitioner", "sensei::Partitioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__PlanarPartitioner = {"_p_sensei__PlanarPartitioner", "sensei::PlanarPartitioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__PlanarSlicePartitioner = {"_p_sensei__PlanarSlicePartitioner", "sensei::PlanarSlicePartitioner *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__Profiler = {"_p_sensei__Profiler", "sensei::Profiler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__ProgrammableDataAdaptor = {"_p_sensei__ProgrammableDataAdaptor", "sensei::ProgrammableDataAdaptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sensei__SVTKDataAdaptor = {"_p_sensei__SVTKDataAdaptor", "sensei::SVTKDataAdaptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "svtkTypeInt16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "svtkTypeInt8 *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_char_t = {"_p_std__allocatorT_char_t", "std::vector< char >::allocator_type *|std::allocator< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_float_t = {"_p_std__allocatorT_float_t", "std::vector< float >::allocator_type *|std::allocator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_long_long_t = {"_p_std__allocatorT_long_long_t", "std::vector< long long >::allocator_type *|std::allocator< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_long_t = {"_p_std__allocatorT_long_t", "std::vector< long >::allocator_type *|std::allocator< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__arrayT_double_2_t_t = {"_p_std__allocatorT_std__arrayT_double_2_t_t", "std::vector< std::array< double,2 > >::allocator_type *|std::allocator< std::array< double,2 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__arrayT_double_3_t_t = {"_p_std__allocatorT_std__arrayT_double_3_t_t", "std::vector< std::array< double,3 > >::allocator_type *|std::allocator< std::array< double,3 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__arrayT_double_6_t_t = {"_p_std__allocatorT_std__arrayT_double_6_t_t", "std::vector< std::array< double,6 > >::allocator_type *|std::allocator< std::array< double,6 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__arrayT_int_2_t_t = {"_p_std__allocatorT_std__arrayT_int_2_t_t", "std::vector< std::array< int,2 > >::allocator_type *|std::allocator< std::array< int,2 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__arrayT_int_3_t_t = {"_p_std__allocatorT_std__arrayT_int_3_t_t", "std::vector< std::array< int,3 > >::allocator_type *|std::allocator< std::array< int,3 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__arrayT_int_6_t_t = {"_p_std__allocatorT_std__arrayT_int_6_t_t", "std::vector< std::array< int,6 > >::allocator_type *|std::allocator< std::array< int,6 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t = {"_p_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t", "std::map< int,std::vector< std::string > >::allocator_type *|std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_std__string_const_bool_t_t = {"_p_std__allocatorT_std__pairT_std__string_const_bool_t_t", "std::map< std::string,bool >::allocator_type *|std::allocator< std::pair< std::string const,bool > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t = {"_p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t", "std::vector< std::vector< double > >::allocator_type *|std::allocator< std::vector< double,std::allocator< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t = {"_p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t", "std::vector< std::vector< int > >::allocator_type *|std::allocator< std::vector< int,std::allocator< int > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t = {"_p_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t", "std::vector< std::vector< std::array< double,2 > > >::allocator_type *|std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t = {"_p_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t", "std::vector< std::vector< std::array< int,2 > > >::allocator_type *|std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_double_2_t = {"_p_std__arrayT_double_2_t", "std::array< double,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_double_3_t = {"_p_std__arrayT_double_3_t", "std::array< double,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_double_6_t = {"_p_std__arrayT_double_6_t", "std::array< double,6 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_int_2_t = {"_p_std__arrayT_int_2_t", "std::array< int,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_int_3_t = {"_p_std__arrayT_int_3_t", "std::array< int,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_int_6_t = {"_p_std__arrayT_int_6_t", "std::array< int,6 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_int_t = {"_p_std__lessT_int_t", "std::less< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__string_t = {"_p_std__lessT_std__string_t", "std::less< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t = {"_p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t", "std::map< int,std::vector< std::string,std::allocator< std::string > > > *|std::map< int,std::vector< std::string,std::allocator< std::string > >,std::less< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > > *|std::map< int,std::vector< std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t = {"_p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t", "std::map< std::string,bool,std::less< std::string >,std::allocator< std::pair< std::string const,bool > > > *|std::map< std::string,bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_sensei__BlockPartitioner_t = {"_p_std__shared_ptrT_sensei__BlockPartitioner_t", "sensei::BlockPartitionerPtr *|std::shared_ptr< sensei::BlockPartitioner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_sensei__ConfigurablePartitioner_t = {"_p_std__shared_ptrT_sensei__ConfigurablePartitioner_t", "sensei::ConfigurablePartitionerPtr *|std::shared_ptr< sensei::ConfigurablePartitioner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t = {"_p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t", "sensei::IsoSurfacePartitionerPtr *|std::shared_ptr< sensei::IsoSurfacePartitioner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_sensei__MappedPartitioner_t = {"_p_std__shared_ptrT_sensei__MappedPartitioner_t", "sensei::MappedPartitionerPtr *|std::shared_ptr< sensei::MappedPartitioner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_sensei__MeshMetadata_t = {"_p_std__shared_ptrT_sensei__MeshMetadata_t", "sensei::MeshMetadataPtr *|std::shared_ptr< sensei::MeshMetadata > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_sensei__Partitioner_t = {"_p_std__shared_ptrT_sensei__Partitioner_t", "sensei::PartitionerPtr *|std::shared_ptr< sensei::Partitioner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_sensei__PlanarPartitioner_t = {"_p_std__shared_ptrT_sensei__PlanarPartitioner_t", "sensei::PlanarPartitionerPtr *|std::shared_ptr< sensei::PlanarPartitioner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t = {"_p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t", "sensei::PlanarSlicePartitionerPtr *|std::shared_ptr< sensei::PlanarSlicePartitioner > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_std__allocatorT_char_t_t = {"_p_std__vectorT_char_std__allocatorT_char_t_t", "std::vector< char,std::allocator< char > > *|std::vector< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float,std::allocator< float > > *|std::vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_long_std__allocatorT_long_long_t_t = {"_p_std__vectorT_long_long_std__allocatorT_long_long_t_t", "std::vector< long long,std::allocator< long long > > *|std::vector< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_std__allocatorT_long_t_t = {"_p_std__vectorT_long_std__allocatorT_long_t_t", "std::vector< long,std::allocator< long > > *|std::vector< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t = {"_p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t", "std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > *|std::vector< std::array< double,2 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t = {"_p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t", "std::vector< std::array< double,3 >,std::allocator< std::array< double,3 > > > *|std::vector< std::array< double,3 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t = {"_p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t", "std::vector< std::array< double,6 >,std::allocator< std::array< double,6 > > > *|std::vector< std::array< double,6 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t = {"_p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t", "std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > *|std::vector< std::array< int,2 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t = {"_p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t", "std::vector< std::array< int,3 >,std::allocator< std::array< int,3 > > > *|std::vector< std::array< int,3 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t = {"_p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t", "std::vector< std::array< int,6 >,std::allocator< std::array< int,6 > > > *|std::vector< std::array< int,6 > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t = {"_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t", "std::vector< std::vector< double,std::allocator< double > > > *|std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *|std::vector< std::vector< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t = {"_p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t", "std::vector< std::vector< int,std::allocator< int > > > *|std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *|std::vector< std::vector< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t", "std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > *|std::vector< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > >,std::allocator< std::vector< std::array< double,2 >,std::allocator< std::array< double,2 > > > > > *|std::vector< std::vector< std::array< double,2 > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t = {"_p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t", "std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > *|std::vector< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > >,std::allocator< std::vector< std::array< int,2 >,std::allocator< std::array< int,2 > > > > > *|std::vector< std::vector< std::array< int,2 > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_svtkDataObject = {"_p_svtkDataObject", "svtkDataObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_svtkCompositeDataSet = {"_p_svtkCompositeDataSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkDataObjectTree = {"_p_svtkDataObjectTree", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkDataSet = {"_p_svtkDataSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkImageData = {"_p_svtkImageData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkMultiBlockDataSet = {"_p_svtkMultiBlockDataSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkNonOverlappingAMR = {"_p_svtkNonOverlappingAMR", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkOverlappingAMR = {"_p_svtkOverlappingAMR", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkPointSet = {"_p_svtkPointSet", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkPolyData = {"_p_svtkPolyData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkRectilinearGrid = {"_p_svtkRectilinearGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkStructuredGrid = {"_p_svtkStructuredGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkTable = {"_p_svtkTable", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkUniformGrid = {"_p_svtkUniformGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkUniformGridAMR = {"_p_svtkUniformGridAMR", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkUnstructuredGrid = {"_p_svtkUnstructuredGrid", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkUnstructuredGridBase = {"_p_svtkUnstructuredGridBase", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkIndent = {"_p_svtkIndent", "svtkIndent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_svtkObjectBase = {"_p_svtkObjectBase", "svtkObjectBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_char_t = {"_p_svtkAOSDataArrayTemplateT_char_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_double_t = {"_p_svtkAOSDataArrayTemplateT_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_float_t = {"_p_svtkAOSDataArrayTemplateT_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_int_t = {"_p_svtkAOSDataArrayTemplateT_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_long_long_t = {"_p_svtkAOSDataArrayTemplateT_long_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_long_t = {"_p_svtkAOSDataArrayTemplateT_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_short_t = {"_p_svtkAOSDataArrayTemplateT_short_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_signed_char_t = {"_p_svtkAOSDataArrayTemplateT_signed_char_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_unsigned_char_t = {"_p_svtkAOSDataArrayTemplateT_unsigned_char_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_unsigned_int_t = {"_p_svtkAOSDataArrayTemplateT_unsigned_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_unsigned_long_long_t = {"_p_svtkAOSDataArrayTemplateT_unsigned_long_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_unsigned_long_t = {"_p_svtkAOSDataArrayTemplateT_unsigned_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAOSDataArrayTemplateT_unsigned_short_t = {"_p_svtkAOSDataArrayTemplateT_unsigned_short_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkAbstractArray = {"_p_svtkAbstractArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkArrayIterator = {"_p_svtkArrayIterator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkBitArray = {"_p_svtkBitArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkBitArrayIterator = {"_p_svtkBitArrayIterator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkCellArray = {"_p_svtkCellArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkCellData = {"_p_svtkCellData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkCellTypes = {"_p_svtkCellTypes", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkCharArray = {"_p_svtkCharArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkCollection = {"_p_svtkCollection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkCollectionIterator = {"_p_svtkCollectionIterator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkCompositeDataIterator = {"_p_svtkCompositeDataIterator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkDataArray = {"_p_svtkDataArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkDataArrayCollection = {"_p_svtkDataArrayCollection", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkDataArrayCollectionIterator = {"_p_svtkDataArrayCollectionIterator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkDataObjectTreeIterator = {"_p_svtkDataObjectTreeIterator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkDataSetAttributes = {"_p_svtkDataSetAttributes", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkDoubleArray = {"_p_svtkDoubleArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkFieldData = {"_p_svtkFieldData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkFloatArray = {"_p_svtkFloatArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_char_t_char_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_char_t_char_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_double_t_double_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_double_t_double_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_float_t_float_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_float_t_float_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_int_t_int_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_int_t_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_long_t_long_long_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_long_t_long_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_t_long_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_t_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_short_t_short_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_short_t_short_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_signed_char_t_signed_char_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_signed_char_t_signed_char_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_char_t_unsigned_char_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_char_t_unsigned_char_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_int_t_unsigned_int_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_int_t_unsigned_int_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_long_t_unsigned_long_long_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_long_t_unsigned_long_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_t_unsigned_long_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_t_unsigned_long_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_short_t_unsigned_short_t = {"_p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_short_t_unsigned_short_t", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkIdTypeArray = {"_p_svtkIdTypeArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkIntArray = {"_p_svtkIntArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkLongArray = {"_p_svtkLongArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkLongLongArray = {"_p_svtkLongLongArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkObject = {"_p_svtkObject", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkPointData = {"_p_svtkPointData", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkPoints = {"_p_svtkPoints", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkShortArray = {"_p_svtkShortArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkSignedCharArray = {"_p_svtkSignedCharArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkUniformGridAMRDataIterator = {"_p_svtkUniformGridAMRDataIterator", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkUnsignedCharArray = {"_p_svtkUnsignedCharArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkUnsignedIntArray = {"_p_svtkUnsignedIntArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkUnsignedLongArray = {"_p_svtkUnsignedLongArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkUnsignedLongLongArray = {"_p_svtkUnsignedLongLongArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_svtkUnsignedShortArray = {"_p_svtkUnsignedShortArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "svtkTypeUInt8 *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "svtkTypeUBool *|svtkTypeUInt32 *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "svtkMTimeType *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "svtkTypeUInt64 *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "svtkTypeUInt16 *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AddArrayFunction,
  &_swigt__p_ArrayType32,
  &_swigt__p_ArrayType64,
  &_swigt__p_AssocArrayMapType,
  &_swigt__p_FieldList,
  &_swigt__p_GetMeshFunction,
  &_swigt__p_GetMeshMetadataFunction,
  &_swigt__p_GetNumberOfMeshesFunction,
  &_swigt__p_InputArrayList,
  &_swigt__p_MPI_Comm,
  &_swigt__p_MeshArrayMapType,
  &_swigt__p_MeshNamesType,
  &_swigt__p_ReleaseDataFunction,
  &_swigt__p_SVTKCellType,
  &_swigt__p_SelfType,
  &_swigt__p_StorageArrayList,
  &_swigt__p_Superclass,
  &_swigt__p_ValueType,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_ostream,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_sensei__ConfigurableInTransitDataAdaptor,
  &_swigt__p_p_sensei__DataAdaptor,
  &_swigt__p_p_sensei__InTransitDataAdaptor,
  &_swigt__p_p_sensei__ProgrammableDataAdaptor,
  &_swigt__p_p_sensei__SVTKDataAdaptor,
  &_swigt__p_p_svtkCompositeDataSet,
  &_swigt__p_p_svtkDataObject,
  &_swigt__p_p_svtkDataObjectTree,
  &_swigt__p_p_svtkDataSet,
  &_swigt__p_p_svtkImageData,
  &_swigt__p_p_svtkMultiBlockDataSet,
  &_swigt__p_p_svtkNonOverlappingAMR,
  &_swigt__p_p_svtkOverlappingAMR,
  &_swigt__p_p_svtkPointSet,
  &_swigt__p_p_svtkPolyData,
  &_swigt__p_p_svtkRectilinearGrid,
  &_swigt__p_p_svtkStructuredGrid,
  &_swigt__p_p_svtkTable,
  &_swigt__p_p_svtkUniformGrid,
  &_swigt__p_p_svtkUniformGridAMR,
  &_swigt__p_p_svtkUnstructuredGrid,
  &_swigt__p_p_svtkUnstructuredGridBase,
  &_swigt__p_pugi__xml_node,
  &_swigt__p_sensei__AnalysisAdaptor,
  &_swigt__p_sensei__ArrayRequirementsIterator,
  &_swigt__p_sensei__Autocorrelation,
  &_swigt__p_sensei__BinaryStream,
  &_swigt__p_sensei__BlockPartitioner,
  &_swigt__p_sensei__ConfigurableAnalysis,
  &_swigt__p_sensei__ConfigurableInTransitDataAdaptor,
  &_swigt__p_sensei__ConfigurablePartitioner,
  &_swigt__p_sensei__DataAdaptor,
  &_swigt__p_sensei__DataRequirements,
  &_swigt__p_sensei__Histogram,
  &_swigt__p_sensei__InTransitDataAdaptor,
  &_swigt__p_sensei__IsoSurfacePartitioner,
  &_swigt__p_sensei__MappedPartitioner,
  &_swigt__p_sensei__MeshMetadata,
  &_swigt__p_sensei__MeshMetadataFlags,
  &_swigt__p_sensei__MeshRequirementsIterator,
  &_swigt__p_sensei__Partitioner,
  &_swigt__p_sensei__PlanarPartitioner,
  &_swigt__p_sensei__PlanarSlicePartitioner,
  &_swigt__p_sensei__Profiler,
  &_swigt__p_sensei__ProgrammableDataAdaptor,
  &_swigt__p_sensei__SVTKDataAdaptor,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_char_t,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_float_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__allocatorT_long_long_t,
  &_swigt__p_std__allocatorT_long_t,
  &_swigt__p_std__allocatorT_std__arrayT_double_2_t_t,
  &_swigt__p_std__allocatorT_std__arrayT_double_3_t_t,
  &_swigt__p_std__allocatorT_std__arrayT_double_6_t_t,
  &_swigt__p_std__allocatorT_std__arrayT_int_2_t_t,
  &_swigt__p_std__allocatorT_std__arrayT_int_3_t_t,
  &_swigt__p_std__allocatorT_std__arrayT_int_6_t_t,
  &_swigt__p_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,
  &_swigt__p_std__allocatorT_std__pairT_std__string_const_bool_t_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t,
  &_swigt__p_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t,
  &_swigt__p_std__arrayT_double_2_t,
  &_swigt__p_std__arrayT_double_3_t,
  &_swigt__p_std__arrayT_double_6_t,
  &_swigt__p_std__arrayT_int_2_t,
  &_swigt__p_std__arrayT_int_3_t,
  &_swigt__p_std__arrayT_int_6_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_int_t,
  &_swigt__p_std__lessT_std__string_t,
  &_swigt__p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t,
  &_swigt__p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__shared_ptrT_sensei__BlockPartitioner_t,
  &_swigt__p_std__shared_ptrT_sensei__ConfigurablePartitioner_t,
  &_swigt__p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t,
  &_swigt__p_std__shared_ptrT_sensei__MappedPartitioner_t,
  &_swigt__p_std__shared_ptrT_sensei__MeshMetadata_t,
  &_swigt__p_std__shared_ptrT_sensei__Partitioner_t,
  &_swigt__p_std__shared_ptrT_sensei__PlanarPartitioner_t,
  &_swigt__p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_char_std__allocatorT_char_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_long_long_std__allocatorT_long_long_t_t,
  &_swigt__p_std__vectorT_long_std__allocatorT_long_t_t,
  &_swigt__p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t,
  &_swigt__p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t,
  &_swigt__p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t,
  &_swigt__p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t,
  &_swigt__p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t,
  &_swigt__p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_char_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_double_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_float_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_int_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_long_long_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_long_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_short_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_signed_char_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_unsigned_char_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_unsigned_int_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_unsigned_long_long_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_unsigned_long_t,
  &_swigt__p_svtkAOSDataArrayTemplateT_unsigned_short_t,
  &_swigt__p_svtkAbstractArray,
  &_swigt__p_svtkArrayIterator,
  &_swigt__p_svtkBitArray,
  &_swigt__p_svtkBitArrayIterator,
  &_swigt__p_svtkCellArray,
  &_swigt__p_svtkCellData,
  &_swigt__p_svtkCellTypes,
  &_swigt__p_svtkCharArray,
  &_swigt__p_svtkCollection,
  &_swigt__p_svtkCollectionIterator,
  &_swigt__p_svtkCompositeDataIterator,
  &_swigt__p_svtkCompositeDataSet,
  &_swigt__p_svtkDataArray,
  &_swigt__p_svtkDataArrayCollection,
  &_swigt__p_svtkDataArrayCollectionIterator,
  &_swigt__p_svtkDataObject,
  &_swigt__p_svtkDataObjectTree,
  &_swigt__p_svtkDataObjectTreeIterator,
  &_swigt__p_svtkDataSet,
  &_swigt__p_svtkDataSetAttributes,
  &_swigt__p_svtkDoubleArray,
  &_swigt__p_svtkFieldData,
  &_swigt__p_svtkFloatArray,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_char_t_char_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_double_t_double_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_float_t_float_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_int_t_int_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_long_t_long_long_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_t_long_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_short_t_short_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_signed_char_t_signed_char_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_char_t_unsigned_char_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_int_t_unsigned_int_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_long_t_unsigned_long_long_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_t_unsigned_long_t,
  &_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_short_t_unsigned_short_t,
  &_swigt__p_svtkIdTypeArray,
  &_swigt__p_svtkImageData,
  &_swigt__p_svtkIndent,
  &_swigt__p_svtkIntArray,
  &_swigt__p_svtkLongArray,
  &_swigt__p_svtkLongLongArray,
  &_swigt__p_svtkMultiBlockDataSet,
  &_swigt__p_svtkNonOverlappingAMR,
  &_swigt__p_svtkObject,
  &_swigt__p_svtkObjectBase,
  &_swigt__p_svtkOverlappingAMR,
  &_swigt__p_svtkPointData,
  &_swigt__p_svtkPointSet,
  &_swigt__p_svtkPoints,
  &_swigt__p_svtkPolyData,
  &_swigt__p_svtkRectilinearGrid,
  &_swigt__p_svtkShortArray,
  &_swigt__p_svtkSignedCharArray,
  &_swigt__p_svtkStructuredGrid,
  &_swigt__p_svtkTable,
  &_swigt__p_svtkUniformGrid,
  &_swigt__p_svtkUniformGridAMR,
  &_swigt__p_svtkUniformGridAMRDataIterator,
  &_swigt__p_svtkUnsignedCharArray,
  &_swigt__p_svtkUnsignedIntArray,
  &_swigt__p_svtkUnsignedLongArray,
  &_swigt__p_svtkUnsignedLongLongArray,
  &_swigt__p_svtkUnsignedShortArray,
  &_swigt__p_svtkUnstructuredGrid,
  &_swigt__p_svtkUnstructuredGridBase,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_AddArrayFunction[] = {  {&_swigt__p_AddArrayFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayType32[] = {  {&_swigt__p_ArrayType32, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayType64[] = {  {&_swigt__p_ArrayType64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AssocArrayMapType[] = {  {&_swigt__p_AssocArrayMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FieldList[] = {  {&_swigt__p_FieldList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GetMeshFunction[] = {  {&_swigt__p_GetMeshFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GetMeshMetadataFunction[] = {  {&_swigt__p_GetMeshMetadataFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GetNumberOfMeshesFunction[] = {  {&_swigt__p_GetNumberOfMeshesFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InputArrayList[] = {  {&_swigt__p_InputArrayList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MPI_Comm[] = {  {&_swigt__p_MPI_Comm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MeshArrayMapType[] = {  {&_swigt__p_MeshArrayMapType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MeshNamesType[] = {  {&_swigt__p_MeshNamesType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReleaseDataFunction[] = {  {&_swigt__p_ReleaseDataFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SVTKCellType[] = {  {&_swigt__p_SVTKCellType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SelfType[] = {  {&_swigt__p_SelfType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StorageArrayList[] = {  {&_swigt__p_StorageArrayList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Superclass[] = {  {&_swigt__p_Superclass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ostream[] = {  {&_swigt__p_ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sensei__ConfigurableInTransitDataAdaptor[] = {{&_swigt__p_p_sensei__ConfigurableInTransitDataAdaptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sensei__InTransitDataAdaptor[] = {{&_swigt__p_p_sensei__InTransitDataAdaptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sensei__ProgrammableDataAdaptor[] = {{&_swigt__p_p_sensei__ProgrammableDataAdaptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sensei__SVTKDataAdaptor[] = {{&_swigt__p_p_sensei__SVTKDataAdaptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_sensei__DataAdaptor[] = {  {&_swigt__p_p_sensei__DataAdaptor, 0, 0, 0},  {&_swigt__p_p_sensei__ConfigurableInTransitDataAdaptor, _p_p_sensei__ConfigurableInTransitDataAdaptorTo_p_p_sensei__DataAdaptor, 0, 0},  {&_swigt__p_p_sensei__InTransitDataAdaptor, _p_p_sensei__InTransitDataAdaptorTo_p_p_sensei__DataAdaptor, 0, 0},  {&_swigt__p_p_sensei__ProgrammableDataAdaptor, _p_p_sensei__ProgrammableDataAdaptorTo_p_p_sensei__DataAdaptor, 0, 0},  {&_swigt__p_p_sensei__SVTKDataAdaptor, _p_p_sensei__SVTKDataAdaptorTo_p_p_sensei__DataAdaptor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkCompositeDataSet[] = {{&_swigt__p_p_svtkCompositeDataSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkDataObjectTree[] = {{&_swigt__p_p_svtkDataObjectTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkDataSet[] = {{&_swigt__p_p_svtkDataSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkImageData[] = {{&_swigt__p_p_svtkImageData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkMultiBlockDataSet[] = {{&_swigt__p_p_svtkMultiBlockDataSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkNonOverlappingAMR[] = {{&_swigt__p_p_svtkNonOverlappingAMR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkOverlappingAMR[] = {{&_swigt__p_p_svtkOverlappingAMR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkPointSet[] = {{&_swigt__p_p_svtkPointSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkPolyData[] = {{&_swigt__p_p_svtkPolyData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkRectilinearGrid[] = {{&_swigt__p_p_svtkRectilinearGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkStructuredGrid[] = {{&_swigt__p_p_svtkStructuredGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkTable[] = {{&_swigt__p_p_svtkTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkUniformGrid[] = {{&_swigt__p_p_svtkUniformGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkUniformGridAMR[] = {{&_swigt__p_p_svtkUniformGridAMR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkUnstructuredGrid[] = {{&_swigt__p_p_svtkUnstructuredGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkUnstructuredGridBase[] = {{&_swigt__p_p_svtkUnstructuredGridBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_svtkDataObject[] = {  {&_swigt__p_p_svtkDataObject, 0, 0, 0},  {&_swigt__p_p_svtkCompositeDataSet, _p_p_svtkCompositeDataSetTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkDataObjectTree, _p_p_svtkDataObjectTreeTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkDataSet, _p_p_svtkDataSetTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkImageData, _p_p_svtkImageDataTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkMultiBlockDataSet, _p_p_svtkMultiBlockDataSetTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkNonOverlappingAMR, _p_p_svtkNonOverlappingAMRTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkOverlappingAMR, _p_p_svtkOverlappingAMRTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkPointSet, _p_p_svtkPointSetTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkPolyData, _p_p_svtkPolyDataTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkRectilinearGrid, _p_p_svtkRectilinearGridTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkStructuredGrid, _p_p_svtkStructuredGridTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkTable, _p_p_svtkTableTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkUniformGrid, _p_p_svtkUniformGridTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkUniformGridAMR, _p_p_svtkUniformGridAMRTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkUnstructuredGrid, _p_p_svtkUnstructuredGridTo_p_p_svtkDataObject, 0, 0},  {&_swigt__p_p_svtkUnstructuredGridBase, _p_p_svtkUnstructuredGridBaseTo_p_p_svtkDataObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pugi__xml_node[] = {  {&_swigt__p_pugi__xml_node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__AnalysisAdaptor[] = {  {&_swigt__p_sensei__AnalysisAdaptor, 0, 0, 0},  {&_swigt__p_sensei__Autocorrelation, _p_sensei__AutocorrelationTo_p_sensei__AnalysisAdaptor, 0, 0},  {&_swigt__p_sensei__ConfigurableAnalysis, _p_sensei__ConfigurableAnalysisTo_p_sensei__AnalysisAdaptor, 0, 0},  {&_swigt__p_sensei__Histogram, _p_sensei__HistogramTo_p_sensei__AnalysisAdaptor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__ArrayRequirementsIterator[] = {  {&_swigt__p_sensei__ArrayRequirementsIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__Autocorrelation[] = {  {&_swigt__p_sensei__Autocorrelation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__BinaryStream[] = {  {&_swigt__p_sensei__BinaryStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__BlockPartitioner[] = {  {&_swigt__p_sensei__BlockPartitioner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__ConfigurableAnalysis[] = {  {&_swigt__p_sensei__ConfigurableAnalysis, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__ConfigurableInTransitDataAdaptor[] = {  {&_swigt__p_sensei__ConfigurableInTransitDataAdaptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__ConfigurablePartitioner[] = {  {&_swigt__p_sensei__ConfigurablePartitioner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__DataAdaptor[] = {  {&_swigt__p_sensei__DataAdaptor, 0, 0, 0},  {&_swigt__p_sensei__ConfigurableInTransitDataAdaptor, _p_sensei__ConfigurableInTransitDataAdaptorTo_p_sensei__DataAdaptor, 0, 0},  {&_swigt__p_sensei__InTransitDataAdaptor, _p_sensei__InTransitDataAdaptorTo_p_sensei__DataAdaptor, 0, 0},  {&_swigt__p_sensei__ProgrammableDataAdaptor, _p_sensei__ProgrammableDataAdaptorTo_p_sensei__DataAdaptor, 0, 0},  {&_swigt__p_sensei__SVTKDataAdaptor, _p_sensei__SVTKDataAdaptorTo_p_sensei__DataAdaptor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__DataRequirements[] = {  {&_swigt__p_sensei__DataRequirements, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__Histogram[] = {  {&_swigt__p_sensei__Histogram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__InTransitDataAdaptor[] = {  {&_swigt__p_sensei__InTransitDataAdaptor, 0, 0, 0},  {&_swigt__p_sensei__ConfigurableInTransitDataAdaptor, _p_sensei__ConfigurableInTransitDataAdaptorTo_p_sensei__InTransitDataAdaptor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__IsoSurfacePartitioner[] = {  {&_swigt__p_sensei__IsoSurfacePartitioner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__MappedPartitioner[] = {  {&_swigt__p_sensei__MappedPartitioner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__MeshMetadata[] = {  {&_swigt__p_sensei__MeshMetadata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__MeshMetadataFlags[] = {  {&_swigt__p_sensei__MeshMetadataFlags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__MeshRequirementsIterator[] = {  {&_swigt__p_sensei__MeshRequirementsIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__Partitioner[] = {  {&_swigt__p_sensei__Partitioner, 0, 0, 0},  {&_swigt__p_sensei__BlockPartitioner, _p_sensei__BlockPartitionerTo_p_sensei__Partitioner, 0, 0},  {&_swigt__p_sensei__ConfigurablePartitioner, _p_sensei__ConfigurablePartitionerTo_p_sensei__Partitioner, 0, 0},  {&_swigt__p_sensei__IsoSurfacePartitioner, _p_sensei__IsoSurfacePartitionerTo_p_sensei__Partitioner, 0, 0},  {&_swigt__p_sensei__MappedPartitioner, _p_sensei__MappedPartitionerTo_p_sensei__Partitioner, 0, 0},  {&_swigt__p_sensei__PlanarPartitioner, _p_sensei__PlanarPartitionerTo_p_sensei__Partitioner, 0, 0},  {&_swigt__p_sensei__PlanarSlicePartitioner, _p_sensei__PlanarSlicePartitionerTo_p_sensei__Partitioner, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__PlanarPartitioner[] = {  {&_swigt__p_sensei__PlanarPartitioner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__PlanarSlicePartitioner[] = {  {&_swigt__p_sensei__PlanarSlicePartitioner, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__Profiler[] = {  {&_swigt__p_sensei__Profiler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__ProgrammableDataAdaptor[] = {  {&_swigt__p_sensei__ProgrammableDataAdaptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sensei__SVTKDataAdaptor[] = {  {&_swigt__p_sensei__SVTKDataAdaptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_char_t[] = {  {&_swigt__p_std__allocatorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_float_t[] = {  {&_swigt__p_std__allocatorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_long_long_t[] = {  {&_swigt__p_std__allocatorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_long_t[] = {  {&_swigt__p_std__allocatorT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__arrayT_double_2_t_t[] = {  {&_swigt__p_std__allocatorT_std__arrayT_double_2_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__arrayT_double_3_t_t[] = {  {&_swigt__p_std__allocatorT_std__arrayT_double_3_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__arrayT_double_6_t_t[] = {  {&_swigt__p_std__allocatorT_std__arrayT_double_6_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__arrayT_int_2_t_t[] = {  {&_swigt__p_std__allocatorT_std__arrayT_int_2_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__arrayT_int_3_t_t[] = {  {&_swigt__p_std__allocatorT_std__arrayT_int_3_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__arrayT_int_6_t_t[] = {  {&_swigt__p_std__allocatorT_std__arrayT_int_6_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_std__string_const_bool_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_std__string_const_bool_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_double_2_t[] = {  {&_swigt__p_std__arrayT_double_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_double_3_t[] = {  {&_swigt__p_std__arrayT_double_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_double_6_t[] = {  {&_swigt__p_std__arrayT_double_6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_int_2_t[] = {  {&_swigt__p_std__arrayT_int_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_int_3_t[] = {  {&_swigt__p_std__arrayT_int_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_int_6_t[] = {  {&_swigt__p_std__arrayT_int_6_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_int_t[] = {  {&_swigt__p_std__lessT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__string_t[] = {  {&_swigt__p_std__lessT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t[] = {  {&_swigt__p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_sensei__BlockPartitioner_t[] = {  {&_swigt__p_std__shared_ptrT_sensei__BlockPartitioner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_sensei__ConfigurablePartitioner_t[] = {  {&_swigt__p_std__shared_ptrT_sensei__ConfigurablePartitioner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t[] = {  {&_swigt__p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_sensei__MappedPartitioner_t[] = {  {&_swigt__p_std__shared_ptrT_sensei__MappedPartitioner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_sensei__MeshMetadata_t[] = {  {&_swigt__p_std__shared_ptrT_sensei__MeshMetadata_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_sensei__Partitioner_t[] = {  {&_swigt__p_std__shared_ptrT_sensei__Partitioner_t, 0, 0, 0},  {&_swigt__p_std__shared_ptrT_sensei__BlockPartitioner_t, _p_std__shared_ptrT_sensei__BlockPartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t, 0, 0},  {&_swigt__p_std__shared_ptrT_sensei__ConfigurablePartitioner_t, _p_std__shared_ptrT_sensei__ConfigurablePartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t, 0, 0},  {&_swigt__p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t, _p_std__shared_ptrT_sensei__IsoSurfacePartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t, 0, 0},  {&_swigt__p_std__shared_ptrT_sensei__MappedPartitioner_t, _p_std__shared_ptrT_sensei__MappedPartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t, 0, 0},  {&_swigt__p_std__shared_ptrT_sensei__PlanarPartitioner_t, _p_std__shared_ptrT_sensei__PlanarPartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t, 0, 0},  {&_swigt__p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, _p_std__shared_ptrT_sensei__PlanarSlicePartitioner_tTo_p_std__shared_ptrT_sensei__Partitioner_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_sensei__PlanarPartitioner_t[] = {  {&_swigt__p_std__shared_ptrT_sensei__PlanarPartitioner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t[] = {  {&_swigt__p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__vectorT_char_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_long_std__allocatorT_long_long_t_t[] = {  {&_swigt__p_std__vectorT_long_long_std__allocatorT_long_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_std__allocatorT_long_t_t[] = {  {&_swigt__p_std__vectorT_long_std__allocatorT_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t[] = {  {&_swigt__p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t[] = {  {&_swigt__p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t[] = {  {&_swigt__p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t[] = {  {&_swigt__p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t[] = {  {&_swigt__p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t[] = {  {&_swigt__p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkCompositeDataSet[] = {{&_swigt__p_svtkCompositeDataSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkDataObjectTree[] = {{&_swigt__p_svtkDataObjectTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkDataSet[] = {{&_swigt__p_svtkDataSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkImageData[] = {{&_swigt__p_svtkImageData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkMultiBlockDataSet[] = {{&_swigt__p_svtkMultiBlockDataSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkNonOverlappingAMR[] = {{&_swigt__p_svtkNonOverlappingAMR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkOverlappingAMR[] = {{&_swigt__p_svtkOverlappingAMR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkPointSet[] = {{&_swigt__p_svtkPointSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkPolyData[] = {{&_swigt__p_svtkPolyData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkRectilinearGrid[] = {{&_swigt__p_svtkRectilinearGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkStructuredGrid[] = {{&_swigt__p_svtkStructuredGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkTable[] = {{&_swigt__p_svtkTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkUniformGrid[] = {{&_swigt__p_svtkUniformGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkUniformGridAMR[] = {{&_swigt__p_svtkUniformGridAMR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkUnstructuredGrid[] = {{&_swigt__p_svtkUnstructuredGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkUnstructuredGridBase[] = {{&_swigt__p_svtkUnstructuredGridBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkDataObject[] = {  {&_swigt__p_svtkDataObject, 0, 0, 0},  {&_swigt__p_svtkCompositeDataSet, _p_svtkCompositeDataSetTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkDataObjectTree, _p_svtkDataObjectTreeTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkDataSet, _p_svtkDataSetTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkImageData, _p_svtkImageDataTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkMultiBlockDataSet, _p_svtkMultiBlockDataSetTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkNonOverlappingAMR, _p_svtkNonOverlappingAMRTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkOverlappingAMR, _p_svtkOverlappingAMRTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkPointSet, _p_svtkPointSetTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkPolyData, _p_svtkPolyDataTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkRectilinearGrid, _p_svtkRectilinearGridTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkStructuredGrid, _p_svtkStructuredGridTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkTable, _p_svtkTableTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkUniformGrid, _p_svtkUniformGridTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkUniformGridAMR, _p_svtkUniformGridAMRTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkUnstructuredGrid, _p_svtkUnstructuredGridTo_p_svtkDataObject, 0, 0},  {&_swigt__p_svtkUnstructuredGridBase, _p_svtkUnstructuredGridBaseTo_p_svtkDataObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkIndent[] = {  {&_swigt__p_svtkIndent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_char_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_double_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_float_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_int_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_long_long_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_long_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_short_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_signed_char_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_unsigned_char_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_unsigned_int_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_unsigned_long_long_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_unsigned_long_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAOSDataArrayTemplateT_unsigned_short_t[] = {{&_swigt__p_svtkAOSDataArrayTemplateT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkAbstractArray[] = {{&_swigt__p_svtkAbstractArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkArrayIterator[] = {{&_swigt__p_svtkArrayIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkBitArray[] = {{&_swigt__p_svtkBitArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkBitArrayIterator[] = {{&_swigt__p_svtkBitArrayIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkCellArray[] = {{&_swigt__p_svtkCellArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkCellData[] = {{&_swigt__p_svtkCellData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkCellTypes[] = {{&_swigt__p_svtkCellTypes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkCharArray[] = {{&_swigt__p_svtkCharArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkCollection[] = {{&_swigt__p_svtkCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkCollectionIterator[] = {{&_swigt__p_svtkCollectionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkCompositeDataIterator[] = {{&_swigt__p_svtkCompositeDataIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkDataArray[] = {{&_swigt__p_svtkDataArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkDataArrayCollection[] = {{&_swigt__p_svtkDataArrayCollection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkDataArrayCollectionIterator[] = {{&_swigt__p_svtkDataArrayCollectionIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkDataObjectTreeIterator[] = {{&_swigt__p_svtkDataObjectTreeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkDataSetAttributes[] = {{&_swigt__p_svtkDataSetAttributes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkDoubleArray[] = {{&_swigt__p_svtkDoubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkFieldData[] = {{&_swigt__p_svtkFieldData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkFloatArray[] = {{&_swigt__p_svtkFloatArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_char_t_char_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_char_t_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_double_t_double_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_double_t_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_float_t_float_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_float_t_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_int_t_int_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_int_t_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_long_t_long_long_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_long_t_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_t_long_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_t_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_short_t_short_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_short_t_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_signed_char_t_signed_char_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_signed_char_t_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_char_t_unsigned_char_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_char_t_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_int_t_unsigned_int_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_int_t_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_long_t_unsigned_long_long_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_long_t_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_t_unsigned_long_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_t_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_short_t_unsigned_short_t[] = {{&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_short_t_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkIdTypeArray[] = {{&_swigt__p_svtkIdTypeArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkIntArray[] = {{&_swigt__p_svtkIntArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkLongArray[] = {{&_swigt__p_svtkLongArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkLongLongArray[] = {{&_swigt__p_svtkLongLongArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkObject[] = {{&_swigt__p_svtkObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkPointData[] = {{&_swigt__p_svtkPointData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkPoints[] = {{&_swigt__p_svtkPoints, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkShortArray[] = {{&_swigt__p_svtkShortArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkSignedCharArray[] = {{&_swigt__p_svtkSignedCharArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkUniformGridAMRDataIterator[] = {{&_swigt__p_svtkUniformGridAMRDataIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkUnsignedCharArray[] = {{&_swigt__p_svtkUnsignedCharArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkUnsignedIntArray[] = {{&_swigt__p_svtkUnsignedIntArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkUnsignedLongArray[] = {{&_swigt__p_svtkUnsignedLongArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkUnsignedLongLongArray[] = {{&_swigt__p_svtkUnsignedLongLongArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkUnsignedShortArray[] = {{&_swigt__p_svtkUnsignedShortArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_svtkObjectBase[] = {  {&_swigt__p_svtkObjectBase, 0, 0, 0},  {&_swigt__p_sensei__AnalysisAdaptor, _p_sensei__AnalysisAdaptorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_sensei__Autocorrelation, _p_sensei__AutocorrelationTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_sensei__ConfigurableAnalysis, _p_sensei__ConfigurableAnalysisTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_sensei__ConfigurableInTransitDataAdaptor, _p_sensei__ConfigurableInTransitDataAdaptorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_sensei__DataAdaptor, _p_sensei__DataAdaptorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_sensei__Histogram, _p_sensei__HistogramTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_sensei__InTransitDataAdaptor, _p_sensei__InTransitDataAdaptorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_sensei__ProgrammableDataAdaptor, _p_sensei__ProgrammableDataAdaptorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_sensei__SVTKDataAdaptor, _p_sensei__SVTKDataAdaptorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_char_t, _p_svtkAOSDataArrayTemplateT_char_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_double_t, _p_svtkAOSDataArrayTemplateT_double_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_float_t, _p_svtkAOSDataArrayTemplateT_float_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_int_t, _p_svtkAOSDataArrayTemplateT_int_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_long_long_t, _p_svtkAOSDataArrayTemplateT_long_long_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_long_t, _p_svtkAOSDataArrayTemplateT_long_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_short_t, _p_svtkAOSDataArrayTemplateT_short_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_signed_char_t, _p_svtkAOSDataArrayTemplateT_signed_char_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_unsigned_char_t, _p_svtkAOSDataArrayTemplateT_unsigned_char_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_unsigned_int_t, _p_svtkAOSDataArrayTemplateT_unsigned_int_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_unsigned_long_long_t, _p_svtkAOSDataArrayTemplateT_unsigned_long_long_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_unsigned_long_t, _p_svtkAOSDataArrayTemplateT_unsigned_long_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAOSDataArrayTemplateT_unsigned_short_t, _p_svtkAOSDataArrayTemplateT_unsigned_short_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkAbstractArray, _p_svtkAbstractArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkArrayIterator, _p_svtkArrayIteratorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkBitArray, _p_svtkBitArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkBitArrayIterator, _p_svtkBitArrayIteratorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkCellArray, _p_svtkCellArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkCellData, _p_svtkCellDataTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkCellTypes, _p_svtkCellTypesTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkCharArray, _p_svtkCharArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkCollection, _p_svtkCollectionTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkCollectionIterator, _p_svtkCollectionIteratorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkCompositeDataIterator, _p_svtkCompositeDataIteratorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkCompositeDataSet, _p_svtkCompositeDataSetTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkDataArray, _p_svtkDataArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkDataArrayCollection, _p_svtkDataArrayCollectionTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkDataArrayCollectionIterator, _p_svtkDataArrayCollectionIteratorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkDataObject, _p_svtkDataObjectTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkDataObjectTree, _p_svtkDataObjectTreeTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkDataObjectTreeIterator, _p_svtkDataObjectTreeIteratorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkDataSet, _p_svtkDataSetTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkDataSetAttributes, _p_svtkDataSetAttributesTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkDoubleArray, _p_svtkDoubleArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkFieldData, _p_svtkFieldDataTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkFloatArray, _p_svtkFloatArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_char_t_char_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_char_t_char_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_double_t_double_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_double_t_double_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_float_t_float_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_float_t_float_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_int_t_int_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_int_t_int_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_long_t_long_long_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_long_t_long_long_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_t_long_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_t_long_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_short_t_short_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_short_t_short_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_signed_char_t_signed_char_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_signed_char_t_signed_char_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_char_t_unsigned_char_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_char_t_unsigned_char_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_int_t_unsigned_int_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_int_t_unsigned_int_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_long_t_unsigned_long_long_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_long_t_unsigned_long_long_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_t_unsigned_long_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_t_unsigned_long_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_short_t_unsigned_short_t, _p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_short_t_unsigned_short_tTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkIdTypeArray, _p_svtkIdTypeArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkImageData, _p_svtkImageDataTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkIntArray, _p_svtkIntArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkLongArray, _p_svtkLongArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkLongLongArray, _p_svtkLongLongArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkMultiBlockDataSet, _p_svtkMultiBlockDataSetTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkNonOverlappingAMR, _p_svtkNonOverlappingAMRTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkObject, _p_svtkObjectTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkOverlappingAMR, _p_svtkOverlappingAMRTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkPointData, _p_svtkPointDataTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkPointSet, _p_svtkPointSetTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkPoints, _p_svtkPointsTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkPolyData, _p_svtkPolyDataTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkRectilinearGrid, _p_svtkRectilinearGridTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkShortArray, _p_svtkShortArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkSignedCharArray, _p_svtkSignedCharArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkStructuredGrid, _p_svtkStructuredGridTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkTable, _p_svtkTableTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkUniformGrid, _p_svtkUniformGridTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkUniformGridAMR, _p_svtkUniformGridAMRTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkUniformGridAMRDataIterator, _p_svtkUniformGridAMRDataIteratorTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkUnsignedCharArray, _p_svtkUnsignedCharArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkUnsignedIntArray, _p_svtkUnsignedIntArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkUnsignedLongArray, _p_svtkUnsignedLongArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkUnsignedLongLongArray, _p_svtkUnsignedLongLongArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkUnsignedShortArray, _p_svtkUnsignedShortArrayTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkUnstructuredGrid, _p_svtkUnstructuredGridTo_p_svtkObjectBase, 0, 0},  {&_swigt__p_svtkUnstructuredGridBase, _p_svtkUnstructuredGridBaseTo_p_svtkObjectBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AddArrayFunction,
  _swigc__p_ArrayType32,
  _swigc__p_ArrayType64,
  _swigc__p_AssocArrayMapType,
  _swigc__p_FieldList,
  _swigc__p_GetMeshFunction,
  _swigc__p_GetMeshMetadataFunction,
  _swigc__p_GetNumberOfMeshesFunction,
  _swigc__p_InputArrayList,
  _swigc__p_MPI_Comm,
  _swigc__p_MeshArrayMapType,
  _swigc__p_MeshNamesType,
  _swigc__p_ReleaseDataFunction,
  _swigc__p_SVTKCellType,
  _swigc__p_SelfType,
  _swigc__p_StorageArrayList,
  _swigc__p_Superclass,
  _swigc__p_ValueType,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_ostream,
  _swigc__p_p_PyObject,
  _swigc__p_p_sensei__ConfigurableInTransitDataAdaptor,
  _swigc__p_p_sensei__DataAdaptor,
  _swigc__p_p_sensei__InTransitDataAdaptor,
  _swigc__p_p_sensei__ProgrammableDataAdaptor,
  _swigc__p_p_sensei__SVTKDataAdaptor,
  _swigc__p_p_svtkCompositeDataSet,
  _swigc__p_p_svtkDataObject,
  _swigc__p_p_svtkDataObjectTree,
  _swigc__p_p_svtkDataSet,
  _swigc__p_p_svtkImageData,
  _swigc__p_p_svtkMultiBlockDataSet,
  _swigc__p_p_svtkNonOverlappingAMR,
  _swigc__p_p_svtkOverlappingAMR,
  _swigc__p_p_svtkPointSet,
  _swigc__p_p_svtkPolyData,
  _swigc__p_p_svtkRectilinearGrid,
  _swigc__p_p_svtkStructuredGrid,
  _swigc__p_p_svtkTable,
  _swigc__p_p_svtkUniformGrid,
  _swigc__p_p_svtkUniformGridAMR,
  _swigc__p_p_svtkUnstructuredGrid,
  _swigc__p_p_svtkUnstructuredGridBase,
  _swigc__p_pugi__xml_node,
  _swigc__p_sensei__AnalysisAdaptor,
  _swigc__p_sensei__ArrayRequirementsIterator,
  _swigc__p_sensei__Autocorrelation,
  _swigc__p_sensei__BinaryStream,
  _swigc__p_sensei__BlockPartitioner,
  _swigc__p_sensei__ConfigurableAnalysis,
  _swigc__p_sensei__ConfigurableInTransitDataAdaptor,
  _swigc__p_sensei__ConfigurablePartitioner,
  _swigc__p_sensei__DataAdaptor,
  _swigc__p_sensei__DataRequirements,
  _swigc__p_sensei__Histogram,
  _swigc__p_sensei__InTransitDataAdaptor,
  _swigc__p_sensei__IsoSurfacePartitioner,
  _swigc__p_sensei__MappedPartitioner,
  _swigc__p_sensei__MeshMetadata,
  _swigc__p_sensei__MeshMetadataFlags,
  _swigc__p_sensei__MeshRequirementsIterator,
  _swigc__p_sensei__Partitioner,
  _swigc__p_sensei__PlanarPartitioner,
  _swigc__p_sensei__PlanarSlicePartitioner,
  _swigc__p_sensei__Profiler,
  _swigc__p_sensei__ProgrammableDataAdaptor,
  _swigc__p_sensei__SVTKDataAdaptor,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_char_t,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_float_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__allocatorT_long_long_t,
  _swigc__p_std__allocatorT_long_t,
  _swigc__p_std__allocatorT_std__arrayT_double_2_t_t,
  _swigc__p_std__allocatorT_std__arrayT_double_3_t_t,
  _swigc__p_std__allocatorT_std__arrayT_double_6_t_t,
  _swigc__p_std__allocatorT_std__arrayT_int_2_t_t,
  _swigc__p_std__allocatorT_std__arrayT_int_3_t_t,
  _swigc__p_std__allocatorT_std__arrayT_int_6_t_t,
  _swigc__p_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,
  _swigc__p_std__allocatorT_std__pairT_std__string_const_bool_t_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t,
  _swigc__p_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t,
  _swigc__p_std__arrayT_double_2_t,
  _swigc__p_std__arrayT_double_3_t,
  _swigc__p_std__arrayT_double_6_t,
  _swigc__p_std__arrayT_int_2_t,
  _swigc__p_std__arrayT_int_3_t,
  _swigc__p_std__arrayT_int_6_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_int_t,
  _swigc__p_std__lessT_std__string_t,
  _swigc__p_std__mapT_int_std__vectorT_std__string_std__allocatorT_std__string_t_t_std__lessT_int_t_std__allocatorT_std__pairT_int_const_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t,
  _swigc__p_std__mapT_std__string_bool_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_bool_t_t_t,
  _swigc__p_std__ostream,
  _swigc__p_std__shared_ptrT_sensei__BlockPartitioner_t,
  _swigc__p_std__shared_ptrT_sensei__ConfigurablePartitioner_t,
  _swigc__p_std__shared_ptrT_sensei__IsoSurfacePartitioner_t,
  _swigc__p_std__shared_ptrT_sensei__MappedPartitioner_t,
  _swigc__p_std__shared_ptrT_sensei__MeshMetadata_t,
  _swigc__p_std__shared_ptrT_sensei__Partitioner_t,
  _swigc__p_std__shared_ptrT_sensei__PlanarPartitioner_t,
  _swigc__p_std__shared_ptrT_sensei__PlanarSlicePartitioner_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_char_std__allocatorT_char_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_long_long_std__allocatorT_long_long_t_t,
  _swigc__p_std__vectorT_long_std__allocatorT_long_t_t,
  _swigc__p_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t,
  _swigc__p_std__vectorT_std__arrayT_double_3_t_std__allocatorT_std__arrayT_double_3_t_t_t,
  _swigc__p_std__vectorT_std__arrayT_double_6_t_std__allocatorT_std__arrayT_double_6_t_t_t,
  _swigc__p_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t,
  _swigc__p_std__vectorT_std__arrayT_int_3_t_std__allocatorT_std__arrayT_int_3_t_t_t,
  _swigc__p_std__vectorT_std__arrayT_int_6_t_std__allocatorT_std__arrayT_int_6_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_std__allocatorT_int_t_t_std__allocatorT_std__vectorT_int_std__allocatorT_int_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_double_2_t_std__allocatorT_std__arrayT_double_2_t_t_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_std__allocatorT_std__vectorT_std__arrayT_int_2_t_std__allocatorT_std__arrayT_int_2_t_t_t_t_t,
  _swigc__p_svtkAOSDataArrayTemplateT_char_t,
  _swigc__p_svtkAOSDataArrayTemplateT_double_t,
  _swigc__p_svtkAOSDataArrayTemplateT_float_t,
  _swigc__p_svtkAOSDataArrayTemplateT_int_t,
  _swigc__p_svtkAOSDataArrayTemplateT_long_long_t,
  _swigc__p_svtkAOSDataArrayTemplateT_long_t,
  _swigc__p_svtkAOSDataArrayTemplateT_short_t,
  _swigc__p_svtkAOSDataArrayTemplateT_signed_char_t,
  _swigc__p_svtkAOSDataArrayTemplateT_unsigned_char_t,
  _swigc__p_svtkAOSDataArrayTemplateT_unsigned_int_t,
  _swigc__p_svtkAOSDataArrayTemplateT_unsigned_long_long_t,
  _swigc__p_svtkAOSDataArrayTemplateT_unsigned_long_t,
  _swigc__p_svtkAOSDataArrayTemplateT_unsigned_short_t,
  _swigc__p_svtkAbstractArray,
  _swigc__p_svtkArrayIterator,
  _swigc__p_svtkBitArray,
  _swigc__p_svtkBitArrayIterator,
  _swigc__p_svtkCellArray,
  _swigc__p_svtkCellData,
  _swigc__p_svtkCellTypes,
  _swigc__p_svtkCharArray,
  _swigc__p_svtkCollection,
  _swigc__p_svtkCollectionIterator,
  _swigc__p_svtkCompositeDataIterator,
  _swigc__p_svtkCompositeDataSet,
  _swigc__p_svtkDataArray,
  _swigc__p_svtkDataArrayCollection,
  _swigc__p_svtkDataArrayCollectionIterator,
  _swigc__p_svtkDataObject,
  _swigc__p_svtkDataObjectTree,
  _swigc__p_svtkDataObjectTreeIterator,
  _swigc__p_svtkDataSet,
  _swigc__p_svtkDataSetAttributes,
  _swigc__p_svtkDoubleArray,
  _swigc__p_svtkFieldData,
  _swigc__p_svtkFloatArray,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_char_t_char_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_double_t_double_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_float_t_float_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_int_t_int_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_long_t_long_long_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_long_t_long_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_short_t_short_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_signed_char_t_signed_char_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_char_t_unsigned_char_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_int_t_unsigned_int_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_long_t_unsigned_long_long_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_long_t_unsigned_long_t,
  _swigc__p_svtkGenericDataArrayT_svtkAOSDataArrayTemplateT_unsigned_short_t_unsigned_short_t,
  _swigc__p_svtkIdTypeArray,
  _swigc__p_svtkImageData,
  _swigc__p_svtkIndent,
  _swigc__p_svtkIntArray,
  _swigc__p_svtkLongArray,
  _swigc__p_svtkLongLongArray,
  _swigc__p_svtkMultiBlockDataSet,
  _swigc__p_svtkNonOverlappingAMR,
  _swigc__p_svtkObject,
  _swigc__p_svtkObjectBase,
  _swigc__p_svtkOverlappingAMR,
  _swigc__p_svtkPointData,
  _swigc__p_svtkPointSet,
  _swigc__p_svtkPoints,
  _swigc__p_svtkPolyData,
  _swigc__p_svtkRectilinearGrid,
  _swigc__p_svtkShortArray,
  _swigc__p_svtkSignedCharArray,
  _swigc__p_svtkStructuredGrid,
  _swigc__p_svtkTable,
  _swigc__p_svtkUniformGrid,
  _swigc__p_svtkUniformGridAMR,
  _swigc__p_svtkUniformGridAMRDataIterator,
  _swigc__p_svtkUnsignedCharArray,
  _swigc__p_svtkUnsignedIntArray,
  _swigc__p_svtkUnsignedLongArray,
  _swigc__p_svtkUnsignedLongLongArray,
  _swigc__p_svtkUnsignedShortArray,
  _swigc__p_svtkUnstructuredGrid,
  _swigc__p_svtkUnstructuredGridBase,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
#if PY_VERSION_HEX < 0x03070000
  PyEval_InitThreads();
#endif
  import_array();
  
  
  if (import_mpi4py() < 0)
#if PY_MAJOR_VERSION >= 3
  return NULL;
#else
  return;
#endif
  
  SWIG_Python_SetConstant(d, "SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));
  
  // thread safe initialization
  swig::container_owner_attribute();
  
  SWIG_Python_SetConstant(d, "ArrayRequirementsIterator_MODE_ARRAY",SWIG_From_int(static_cast< int >(sensei::ArrayRequirementsIterator::MODE_ARRAY)));
  SWIG_Python_SetConstant(d, "ArrayRequirementsIterator_MODE_ASSOCIATION",SWIG_From_int(static_cast< int >(sensei::ArrayRequirementsIterator::MODE_ASSOCIATION)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

